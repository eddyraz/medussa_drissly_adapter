(undo-tree-save-format-version . 1)
"558e39a2f7f37e7a30ed5d7d7ab3f49c9bdd9eb5"
[nil nil nil nil (25273 16168 326077 774000) 0 nil]
([nil nil ((#("defp log(type, payment_id, msg) do
    case type do
      :debug ->
        Logger.debug msg
      :info ->
        Logger.info msg
      :warn ->
        Logger.warn msg
      :error ->
        Logger.error msg
    end
    IO.binwrite(Application.get_env(:medusa, :\"#{payment_id}\"), \"#{msg}\\n\")
  end
" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 8 (fontified t face font-lock-function-name-face) 8 32 (fontified t) 32 34 (fontified t face font-lock-keyword-face) 34 39 (fontified t) 39 43 (fontified t face font-lock-keyword-face) 43 49 (fontified t) 49 51 (fontified t face font-lock-keyword-face) 51 58 (fontified t) 58 64 (fontified t face elixir-atom-face) 64 76 (fontified t) 76 82 (fontified t face font-lock-type-face) 82 99 (fontified t) 99 104 (fontified t face elixir-atom-face) 104 116 (fontified t) 116 122 (fontified t face font-lock-type-face) 122 138 (fontified t) 138 143 (fontified t face elixir-atom-face) 143 155 (fontified t) 155 161 (fontified t face font-lock-type-face) 161 177 (fontified t) 177 183 (fontified t face elixir-atom-face) 183 195 (fontified t) 195 201 (fontified t face font-lock-type-face) 201 216 (fontified t) 216 219 (fontified t face font-lock-keyword-face) 219 224 (fontified t) 224 226 (fontified t face font-lock-type-face) 226 236 (fontified t) 236 247 (fontified t face font-lock-type-face) 247 256 (fontified t) 256 263 (fontified t face elixir-atom-face) 263 266 (fontified t) 266 267 (fontified t syntax-table (15) face font-lock-string-face) 267 268 (fontified t syntax-table (2) elixir-interpolation (t #<marker at 8114 in medusa_drissly_adapter.ex> #<marker at 8114 in medusa_drissly_adapter.ex> #<marker at 8114 in medusa_drissly_adapter.ex> #<marker at 8114 in medusa_drissly_adapter.ex>) face font-lock-variable-name-face) 268 280 (fontified t face font-lock-variable-name-face) 280 281 (fontified t syntax-table (15) face font-lock-string-face) 281 284 (fontified t) 284 285 (fontified t syntax-table (15) face font-lock-string-face) 285 286 (fontified t syntax-table (2) elixir-interpolation (t #<marker at 8114 in medusa_drissly_adapter.ex> #<marker at 8114 in medusa_drissly_adapter.ex> #<marker at 8114 in medusa_drissly_adapter.ex> #<marker at 8114 in medusa_drissly_adapter.ex>) face font-lock-variable-name-face) 286 291 (fontified t face font-lock-variable-name-face) 291 293 (fontified t face font-lock-string-face) 293 294 (fontified t syntax-table (15) face font-lock-string-face) 294 298 (fontified t) 298 301 (fontified t face font-lock-keyword-face) 301 302 (fontified t)) . -8113) (undo-tree-id6 . -35) (undo-tree-id7 . -35) (undo-tree-id8 . -52) (undo-tree-id9 . -52) (undo-tree-id10 . -68) (undo-tree-id11 . -68) (undo-tree-id12 . -93) (undo-tree-id13 . -93) (undo-tree-id14 . -108) (undo-tree-id15 . -108) (undo-tree-id16 . -132) (undo-tree-id17 . -132) (undo-tree-id18 . -147) (undo-tree-id19 . -147) (undo-tree-id20 . -171) (undo-tree-id21 . -171) (undo-tree-id22 . -187) (undo-tree-id23 . -187) (undo-tree-id24 . -212) (undo-tree-id25 . -212) (undo-tree-id26 . -220) (undo-tree-id27 . -220) (undo-tree-id28 . -296) (undo-tree-id29 . -296) (undo-tree-id30 . -302) (undo-tree-id31 . -302) (undo-tree-id32 . -302) (undo-tree-id33 . -302) (undo-tree-id34 . -267) (undo-tree-id35 . -280) (undo-tree-id36 . -267) (undo-tree-id37 . -280) (undo-tree-id38 . -285) (undo-tree-id39 . -291) (undo-tree-id40 . -285) (undo-tree-id41 . -291) (undo-tree-id42 . -302) (undo-tree-id43 . -302) 8415 (t 25273 16091 600785 623000)) nil (25273 16168 326074 708000) 0 nil])
([nil nil ((8064 . 8066) (#("  " 0 2 (fontified t)) . 8063) (undo-tree-id3 . -2) (undo-tree-id4 . -2) (undo-tree-id5 . -2) (8065 . 8066)) nil (25273 16168 326032 979000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face font-lock-keyword-face)) . 8114) (#(" " 0 1 (fontified t)) . 8114) (#(" " 0 1 (fontified t)) . 8114) (#("
" 0 1 (fontified t)) . 8114) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1)) nil (25273 16168 326027 238000) 0 nil])
([nil nil ((8114 . 8115)) nil (25273 16168 326004 545000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -8268) (undo-tree-id44 . -1) (#(":" 0 1 (fontified t)) . -8269) (undo-tree-id45 . -1) (#("d" 0 1 (fontified t face elixir-atom-face)) . -8270) (undo-tree-id46 . -1) (#("r" 0 1 (fontified t face elixir-atom-face)) . -8271) (undo-tree-id47 . -1) (#("i" 0 1 (fontified t face elixir-atom-face)) . -8272) (undo-tree-id48 . -1) (#("s" 0 1 (fontified t face elixir-atom-face)) . -8273) (undo-tree-id49 . -1) (#("s" 0 1 (fontified t face elixir-atom-face)) . -8274) (undo-tree-id50 . -1) (#("l" 0 1 (fontified t face elixir-atom-face)) . -8275) (undo-tree-id51 . -1) (#("y" 0 1 (fontified t face elixir-atom-face)) . -8276) (undo-tree-id52 . -1) (#(")" 0 1 (fontified t)) . -8277) (undo-tree-id53 . -1) (undo-tree-id54 . 1) (undo-tree-id55 . -1) 8278 (t 25273 16168 325964 424000)) nil (25273 16267 976790 381000) 0 nil])
([nil nil ((8268 . 8269)) nil (25273 16267 976766 456000) 0 nil])
([nil nil ((8292 . 8304) (t 25273 16267 983345 574000)) nil (25273 16355 744179 999000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t)) . -8303) (undo-tree-id56 . -1) 8304) nil (25273 16355 744177 875000) 0 nil])
([nil nil ((8303 . 8309)) nil (25273 16355 744166 173000) 0 nil])
([nil current ((8293 . 8294)) nil (25273 16355 744161 825000) 0 nil])
nil
