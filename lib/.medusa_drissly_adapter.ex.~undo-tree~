(undo-tree-save-format-version . 1)
"699f72f006bd556a5ad44b97ef95febfe59dd9a9"
[nil nil nil nil (25251 38381 96518 907000) 0 nil]
([nil nil ((#(" " 0 1 (face font-lock-doc-face fontified t)) . -836) (undo-tree-id3 . -1) (#(" " 0 1 (face font-lock-doc-face fontified t)) . -837) (undo-tree-id4 . -1) 838 (t 25248 55762 825219 298000)) nil (25251 38381 96516 744000) 0 nil])
([nil nil (("    " . 6952) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (#("                           " 0 27 (face font-lock-doc-face fontified t)) . 1796) (#("   " 0 3 (face font-lock-doc-face fontified t)) . 1795) (#("                           " 0 27 (face font-lock-doc-face fontified t)) . 1727) (#("                             " 0 29 (face font-lock-doc-face fontified t)) . 1508) (#("                           " 0 27 (face font-lock-doc-face fontified t)) . 1423) (#(" " 0 1 (face font-lock-doc-face fontified t)) . 1422) (#("  " 0 2 (face font-lock-doc-face fontified t)) . 1383) (#("                           " 0 27 (face font-lock-doc-face fontified t)) . 1012) (#(" " 0 1 (face font-lock-doc-face fontified t)) . 938) (#(" " 0 1 (face font-lock-doc-face fontified t)) . 864) (#(" " 0 1 (face font-lock-doc-face fontified t)) . 794) (#(" " 0 1 (face font-lock-doc-face fontified t)) . 655) (#("           " 0 11 (face font-lock-doc-face fontified t)) . 350) (#("           " 0 11 (face font-lock-doc-face fontified t)) . 310) 2900) nil (25251 38381 96507 841000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -3186) (undo-tree-id0 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -3187) (undo-tree-id1 . -1) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -3188) (undo-tree-id2 . -1) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -3189) (undo-tree-id3 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -3190) (undo-tree-id4 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -3191) (undo-tree-id5 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -3192) (undo-tree-id6 . -1) 3193 (t 25251 38381 104875 371000)) nil (25258 2419 361817 919000) 0 nil])
([nil nil ((3186 . 3193)) nil (25258 2419 361686 555000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-comment-face)) . -7587) (undo-tree-id41 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -7588) (undo-tree-id42 . -1) (#("m" 0 1 (face font-lock-comment-face fontified t)) . -7589) (undo-tree-id43 . -1) 7590 (t 25258 2419 362754 315000)) nil (25258 2837 351802 737000) 0 nil])
([nil nil ((7588 . 7592) (7587 . 7589)) nil (25258 2837 351795 865000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face font-lock-comment-face)) . -7587) (undo-tree-id40 . -1) 7588) nil (25258 2837 351793 360000) 0 nil])
([nil nil ((7587 . 7588)) nil (25258 2837 351790 264000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face font-lock-comment-face)) . -7586) (undo-tree-id39 . -1) 7587) nil (25258 2837 351788 240000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t face font-lock-comment-face)) . -7591) (undo-tree-id36 . -1) (undo-tree-id37 . 1) (undo-tree-id38 . -1) 7592) nil (25258 2837 351784 383000) 0 nil])
([nil nil ((7586 . 7588)) nil (25258 2837 351778 693000) 0 nil])
([nil nil ((#("{" 0 1 (fontified nil face font-lock-comment-face)) . -7586) (undo-tree-id35 . -1) (#("}" 0 1 (fontified t face font-lock-comment-face)) . 7587)) nil (25258 2837 351776 759000) 0 nil])
([nil nil ((7586 . 7587)) nil (25258 2837 351773 914000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-comment-face)) . -7607) (undo-tree-id32 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -7608) (undo-tree-id33 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -7609) (undo-tree-id34 . -1) 7610) nil (25258 2837 351771 369000) 0 nil])
([nil nil ((7607 . 7610)) nil (25258 2837 351765 428000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face font-lock-comment-face)) . -7609) (undo-tree-id31 . -1) 7610) nil (25258 2837 351763 404000) 0 nil])
([nil nil ((7609 . 7618)) nil (25258 2837 351759 958000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-comment-face)) . -7623) (undo-tree-id28 . -1) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -7624) (undo-tree-id29 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -7625) (undo-tree-id30 . -1) 7626) nil (25258 2837 351757 533000) 0 nil])
([nil nil ((7623 . 7629)) nil (25258 2837 351751 321000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-comment-face)) . -7711) (undo-tree-id25 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -7712) (undo-tree-id26 . -1) (#("m" 0 1 (fontified t face font-lock-comment-face)) . -7713) (undo-tree-id27 . -1) 7714) nil (25258 2837 351748 817000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7715 . 7716) (nil fontified nil 7712 . 7716) (nil fontified nil 7711 . 7712) (7711 . 7716)) nil (25258 2837 351741 673000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t face font-lock-comment-face)) . -7731) (undo-tree-id22 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -7732) (undo-tree-id23 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -7733) (undo-tree-id24 . -1) 7734) nil (25258 2837 351738 37000) 0 nil])
([nil nil ((7731 . 7741)) nil (25258 2837 351729 891000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-comment-face)) . -7746) (undo-tree-id19 . -1) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -7747) (undo-tree-id20 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -7748) (undo-tree-id21 . -1) 7749) nil (25258 2837 351727 387000) 0 nil])
([nil nil ((7746 . 7752)) nil (25258 2837 351721 75000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face font-lock-comment-face)) . -7760) (undo-tree-id13 . -1) (#("_" 0 1 (fontified t face font-lock-comment-face)) . -7761) (undo-tree-id14 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -7762) (undo-tree-id15 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -7763) (undo-tree-id16 . -1) (#("x" 0 1 (fontified t face font-lock-comment-face)) . -7764) (undo-tree-id17 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -7765) (undo-tree-id18 . -1) 7766) nil (25258 2837 351717 618000) 0 nil])
([nil nil ((7760 . 7767)) nil (25258 2837 351706 548000) 0 nil])
([nil nil ((#(";" 0 1 (fontified t face font-lock-comment-face)) . -7766) (undo-tree-id12 . -1) 7767) nil (25258 2837 351704 654000) 0 nil])
([nil nil ((7766 . 7767)) nil (25258 2837 351701 388000) 0 nil])
([nil nil ((7779 . 7781)) nil (25258 2837 351699 995000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-comment-face)) . -7779) (undo-tree-id10 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -7780) (undo-tree-id11 . -1) 7781) nil (25258 2837 351697 521000) 0 nil])
([nil nil ((7779 . 7783)) nil (25258 2837 351692 612000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-comment-face)) . -7782) (undo-tree-id9 . -1) 7783) nil (25258 2837 351690 177000) 0 nil])
([nil nil ((7782 . 7784)) nil (25258 2837 351686 951000) 0 nil])
([nil nil ((#("v" 0 1 (fontified t face font-lock-comment-face)) . -7782) (undo-tree-id7 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -7783) (undo-tree-id8 . -1) 7784) nil (25258 2837 351683 805000) 0 nil])
([nil nil ((7782 . 7783)) nil (25258 2837 351669 308000) 0 nil])
([nil nil ((7783 . 7785)) nil (25258 2837 351663 357000) 0 nil])
([nil nil ((7901 . 7904) (t 25258 2837 354255 547000)) nil (25258 2894 157966 15000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5117) (undo-tree-id46 . -1) 5118 (t 25258 2894 165879 515000)) nil (25258 2955 103782 417000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5166) (undo-tree-id45 . -1) 5167) nil (25258 2955 103777 167000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5207) (undo-tree-id44 . -1) 5208) nil (25258 2955 103768 631000) 0 nil])
([nil nil ((5157 . 5161) (#("     " 0 5 (fontified t)) . -5117) (5161 . 5162) (t 25258 2955 109519 390000)) nil (25258 3001 799704 849000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -5172) (5172 . 5173) (#(")" 0 1 (fontified nil)) . -5172) (5172 . 5173) (5161 . 5173)) nil (25258 3001 799702 725000) 0 nil])
([nil nil ((5172 . 5183)) nil (25258 3001 799700 621000) 0 nil])
([nil nil ((7542 . 7544)) nil (25258 3001 799699 218000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -7542) (undo-tree-id47 . -1) (#("w" 0 1 (fontified t)) . -7543) (undo-tree-id48 . -1) 7544) nil (25258 3001 799694 860000) 0 nil])
([nil nil ((5113 . 5118) (t 25258 3001 809270 650000)) nil (25258 3011 610813 439000) 0 nil])
([nil nil ((5165 . 5170)) nil (25258 3011 610808 329000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5286) (undo-tree-id65 . -1) 5287 (t 25258 3011 621221 167000)) nil (25258 3073 735812 419000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5318) (undo-tree-id64 . -1) 5319) nil (25258 3073 735804 304000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5442) (undo-tree-id63 . -1) 5443) nil (25258 3073 735801 28000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5345) (undo-tree-id62 . -1) 5346) nil (25258 3073 735797 641000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5493) (undo-tree-id61 . -1) 5494) nil (25258 3073 735794 446000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5518) (undo-tree-id60 . -1) 5519) nil (25258 3073 735790 628000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5603) (undo-tree-id59 . -1) 5604) nil (25258 3073 735787 452000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5628) (undo-tree-id58 . -1) 5629) nil (25258 3073 735784 46000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5719) (undo-tree-id57 . -1) 5720) nil (25258 3073 735780 449000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5777) (undo-tree-id56 . -1) 5778) nil (25258 3073 735777 193000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5802) (undo-tree-id55 . -1) 5803) nil (25258 3073 735774 17000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5893) (undo-tree-id54 . -1) 5894) nil (25258 3073 735770 651000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5957) (undo-tree-id53 . -1) 5958) nil (25258 3073 735767 174000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5982) (undo-tree-id52 . -1) 5983) nil (25258 3073 735763 598000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6096) (undo-tree-id51 . -1) 6097) nil (25258 3073 735759 590000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6119) (undo-tree-id50 . -1) 6120) nil (25258 3073 735755 32000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6229) (undo-tree-id49 . -1) 6230) nil (25258 3073 735747 27000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6232) (undo-tree-id66 . -1) (#("e" 0 1 (fontified t)) . -6233) (undo-tree-id67 . -1) (#("n" 0 1 (fontified t)) . -6234) (undo-tree-id68 . -1) (#("d" 0 1 (fontified t face font-lock-keyword-face)) . -6235) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 6236 (t 25258 3073 744928 602000)) nil (25258 3098 773201 615000) 0 nil])
([nil nil ((6240 . 6245) (#("	    " 0 5 (fontified nil)) . 6239) (6239 . 6244) (6239 . 6240)) nil (25258 3098 773185 645000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -6235) (undo-tree-id71 . -1) (#("n" 0 1 (fontified t)) . -6236) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (#("d" 0 1 (fontified t face font-lock-keyword-face)) . -6237) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 6238 (t 25258 3098 780820 205000)) nil (25258 3106 174235 546000) 0 nil])
([nil nil ((6225 . 6228) (t 25258 3106 184789 130000)) nil (25258 3122 338581 103000) 0 nil])
([nil nil ((6227 . 6231)) nil (25258 3122 338579 239000) 0 nil])
([nil nil ((6235 . 6240) (#("            " 0 1 (fontified t) 1 5 (fontified t) 5 12 (fontified t)) . 6234) (undo-tree-id77 . -12) (undo-tree-id78 . -12) (6242 . 6247) (#(" " 0 1 (fontified nil)) . 6233) (undo-tree-id79 . -1) (6225 . 6230) (#("  " 0 2 (fontified nil)) . 6225) (6231 . 6232)) nil (25258 3122 338576 63000) 0 nil])
([nil nil ((6240 . 6244)) nil (25258 3122 338567 668000) 0 nil])
([nil nil ((6241 . 6243) (#(" " 0 1 (fontified nil)) . 6240) (undo-tree-id76 . -1) (#("	    " 0 1 (fontified nil) 1 5 (fontified nil)) . -6237) (6237 . 6238) (#("	" 0 1 (fontified nil)) . 6237) (6235 . 6237) (6244 . 6245)) nil (25258 3122 338561 346000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5314) (#(" " 0 1 (fontified t)) . 5314) (#(" " 0 1 (fontified t)) . 5314) (t 25258 3122 336722 850000)) nil (25258 3285 433128 18000) 0 nil])
([nil nil ((5314 . 5315)) nil (25258 3285 433123 169000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5950) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1)) nil (25258 3285 433115 425000) 0 nil])
([nil nil ((5453 . 5454) (t 25258 3285 444156 532000)) nil (25258 3314 944932 643000) 0 nil])
([nil nil ((5642 . 5643)) nil (25258 3314 944929 998000) 0 nil])
([nil nil ((5817 . 5818)) nil (25258 3314 944926 983000) 0 nil])
([nil nil ((6129 . 6134)) nil (25258 3314 944919 418000) 0 nil])
([nil nil ((5734 . 5748) (t 25258 3314 980071 478000)) nil (25258 3398 880383 737000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5773 . 5774) (nil fontified nil 5773 . 5774) (nil fontified nil 5748 . 5773) (nil fontified nil 5747 . 5748) (5747 . 5774)) nil (25258 3398 880380 571000) 0 nil])
([nil nil ((5773 . 5775) (#(" " 0 1 (fontified nil)) . 5772) (undo-tree-id115 . -1) (#("   " 0 3 (fontified nil)) . -5731) (5776 . 5777)) nil (25258 3398 880376 143000) 0 nil])
([nil nil ((#("{:error, \"Drissly: Access Forbidden\"}" 0 1 (fontified t) 1 7 (fontified t face elixir-atom-face) 7 9 (fontified t) 9 10 (fontified t syntax-table (15) face font-lock-string-face) 10 35 (fontified t face font-lock-string-face) 35 36 (fontified t syntax-table (15) face font-lock-string-face) 36 37 (fontified t)) . 5775) (undo-tree-id110 . -9) (undo-tree-id111 . 37) (undo-tree-id112 . -1) (undo-tree-id113 . 1) (undo-tree-id114 . -37)) nil (25258 3398 880370 453000) 0 nil])
([nil nil ((5731 . 5734)) nil (25258 3398 880360 814000) 0 nil])
([nil nil ((5915 . 5927)) nil (25258 3398 880358 871000) 0 nil])
([nil nil ((5927 . 5929)) nil (25258 3398 880356 967000) 0 nil])
([nil nil ((#("\"Drissly: Internal Server Error\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face) 1 19 (fontified t face font-lock-string-face) 19 31 (fontified t face font-lock-string-face) 31 32 (fontified t syntax-table (15) face font-lock-string-face)) . 5939) (undo-tree-id107 . -32) (undo-tree-id108 . -32) (undo-tree-id109 . -32) 5971) nil (25258 3398 880353 831000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5959 . 5960) (nil fontified nil 5959 . 5960) (nil fontified nil 5947 . 5959) (nil fontified nil 5929 . 5947) (nil fontified nil 5928 . 5929) (5928 . 5960)) nil (25258 3398 880342 731000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5961) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("{" 0 1 (fontified t)) . -5962) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#(":" 0 1 (fontified t)) . -5963) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("e" 0 1 (fontified t face elixir-atom-face)) . -5964) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("r" 0 1 (fontified t face elixir-atom-face)) . -5965) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("r" 0 1 (fontified t face elixir-atom-face)) . -5966) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("o" 0 1 (fontified t face elixir-atom-face)) . -5967) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("r" 0 1 (fontified t face elixir-atom-face)) . -5968) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("," 0 1 (fontified t)) . -5969) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#(" " 0 1 (fontified t)) . -5970) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("}" 0 1 (fontified t)) . -5971) (undo-tree-id104 . -1) (undo-tree-id105 . 1) (undo-tree-id106 . -1) 5972) nil (25258 3398 880327 292000) 0 nil])
([nil nil ((#("# {:error, \"Drissly: Bad Request\"}" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-face) 3 9 (fontified t face font-lock-comment-face) 9 11 (fontified t face font-lock-comment-face) 11 12 (fontified t syntax-table (15) face font-lock-comment-face) 12 32 (fontified t face font-lock-comment-face) 32 33 (fontified t syntax-table (15) face font-lock-comment-face) 33 34 (fontified t face font-lock-comment-face)) . 5453) (t 25258 3398 879854 260000)) nil (25258 3594 816383 317000) 0 nil])
([nil nil ((#("# log :error, ops_id, \"#{get_time()} Drissly Response: #{response.body}\"" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 6 (fontified t face font-lock-comment-face) 6 12 (fontified t face font-lock-comment-face) 12 22 (fontified t face font-lock-comment-face) 22 23 (syntax-table (15) fontified t face font-lock-comment-face) 23 24 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 24 36 (fontified t face font-lock-comment-face) 36 43 (fontified t face font-lock-comment-face) 43 45 (fontified t face font-lock-comment-face) 45 55 (fontified t face font-lock-comment-face) 55 56 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 56 71 (fontified t face font-lock-comment-face) 71 72 (syntax-table (15) fontified t face font-lock-comment-face)) . 5608) (undo-tree-id169 . -23) (undo-tree-id170 . -36) (undo-tree-id171 . -23) (undo-tree-id172 . -36) (undo-tree-id173 . -55) (undo-tree-id174 . -71) (undo-tree-id175 . -55) (undo-tree-id176 . -71)) nil (25258 3594 816380 722000) 0 nil])
([nil nil ((#("# log :error, ops_id, \"#{get_time()} Drissly Response: #{response.body}\"" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 6 (fontified t face font-lock-comment-face) 6 12 (fontified t face font-lock-comment-face) 12 22 (fontified t face font-lock-comment-face) 22 23 (syntax-table (15) fontified t face font-lock-comment-face) 23 24 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 24 25 (fontified t face font-lock-comment-face) 25 36 (fontified t face font-lock-comment-face) 36 55 (fontified t face font-lock-comment-face) 55 56 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 56 71 (fontified t face font-lock-comment-face) 71 72 (syntax-table (15) fontified t face font-lock-comment-face)) . 5717) (undo-tree-id161 . -23) (undo-tree-id162 . -36) (undo-tree-id163 . -23) (undo-tree-id164 . -36) (undo-tree-id165 . -55) (undo-tree-id166 . -71) (undo-tree-id167 . -55) (undo-tree-id168 . -71)) nil (25258 3594 816369 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5608) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1)) nil (25258 3594 816357 268000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5588) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1)) nil (25258 3594 816351 357000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588)) nil (25258 3594 816340 858000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588) (#(" " 0 1 (fontified t)) . 5588)) nil (25258 3594 816258 2000) 0 nil])
([nil nil ((5659 . 5660)) nil (25258 3594 816251 500000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#("
" 0 1 (fontified t)) . 5660) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1)) nil (25258 3594 816249 16000) 0 nil])
([nil nil ((#("                
" 0 1 (fontified t) 1 16 (fontified t) 16 17 (fontified t)) . 5660) (undo-tree-id132 . -17) (undo-tree-id133 . -17) (undo-tree-id134 . -17) (undo-tree-id135 . -16) (undo-tree-id136 . -16) (undo-tree-id137 . -16) (undo-tree-id138 . -16) (undo-tree-id139 . -16) (undo-tree-id140 . -16) (undo-tree-id141 . -16) (undo-tree-id142 . -16) (undo-tree-id143 . -16)) nil (25258 3594 816241 522000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660) (#(" " 0 1 (fontified t)) . 5660)) nil (25258 3594 816221 835000) 0 nil])
([nil nil ((5731 . 5732)) nil (25258 3594 816213 960000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5732) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1)) nil (25258 3594 816211 726000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5732) (#(" " 0 1 (fontified t)) . 5732) (#(" " 0 1 (fontified t)) . 5732) (#(" " 0 1 (fontified t)) . 5732) (#("	" 0 1 (fontified t)) . 5732) (#(" " 0 1 (fontified t)) . 5732) (#(" " 0 1 (fontified t)) . 5732) (#(" " 0 1 (fontified t)) . 5732) (#(" " 0 1 (fontified t)) . 5732) (#(" " 0 1 (fontified t)) . 5732) (#(" " 0 1 (fontified t)) . 5732) (#(" " 0 1 (fontified t)) . 5732) (#(" " 0 1 (fontified t)) . 5732) (#(" " 0 1 (fontified t)) . 5732)) nil (25258 3594 816203 771000) 0 nil])
([nil nil ((5854 . 5855)) nil (25258 3594 816197 840000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5855) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1)) nil (25258 3594 816195 976000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855) (#(" " 0 1 (fontified t)) . 5855)) nil (25258 3594 816183 843000) 0 nil])
([nil nil ((5852 . 5854)) nil (25258 3594 816176 19000) 0 nil])
([nil nil ((5478 . 5479)) nil (25258 3594 816174 546000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5479) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1)) nil (25258 3594 816172 622000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479)) nil (25258 3594 816166 862000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479) (#(" " 0 1 (fontified t)) . 5479)) nil (25258 3594 816160 570000) 0 nil])
([nil nil ((5338 . 5339)) nil (25258 3594 816152 805000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5339) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1)) nil (25258 3594 816150 792000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339) (#(" " 0 1 (fontified t)) . 5339)) nil (25258 3594 816140 412000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5549)) nil (25258 3594 816132 107000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5113) (#(" " 0 1 (fontified t)) . 5113) (#(" " 0 1 (fontified t)) . 5113) (#(" " 0 1 (fontified t)) . 5113) (#(" " 0 1 (fontified t)) . 5113)) nil (25258 3594 816129 522000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5157) (#(" " 0 1 (fontified t)) . 5157) (#(" " 0 1 (fontified t)) . 5157) (#(" " 0 1 (fontified t)) . 5157) (#(" " 0 1 (fontified t)) . 5157)) nil (25258 3594 816125 564000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5185) (#(" " 0 1 (fontified t)) . 5185) (#(" " 0 1 (fontified t)) . 5185) (#(" " 0 1 (fontified t)) . 5185) (#(" " 0 1 (fontified t)) . 5185)) nil (25258 3594 816121 827000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5221) (#(" " 0 1 (fontified t)) . 5221) (#(" " 0 1 (fontified t)) . 5221) (#(" " 0 1 (fontified t)) . 5221) (#(" " 0 1 (fontified t)) . 5221) (#(" " 0 1 (fontified t)) . 5221)) nil (25258 3594 816117 299000) 0 nil])
([nil nil ((5221 . 5222)) nil (25258 3594 816114 53000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5890) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1)) nil (25258 3594 816110 266000) 0 nil])
([nil nil ((5899 . 5900)) nil (25258 3594 816089 707000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5900) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (t 25258 3594 827462 442000)) nil (25258 3650 293857 618000) 0 nil])
([nil nil ((5900 . 5906)) nil (25258 3650 293830 848000) 0 nil])
([nil nil ((#("         end" 0 7 (fontified t) 7 9 (fontified t) 9 12 (fontified t face font-lock-keyword-face)) . 5899) (undo-tree-id181 . -7) (undo-tree-id182 . -7) (undo-tree-id183 . -7) (undo-tree-id184 . -7) (undo-tree-id185 . -12) (t 25258 3650 303375 72000)) nil (25258 3659 556254 116000) 0 nil])
([nil nil ((5899 . 5900) (t 25258 3659 555361 359000)) nil (25258 3671 729453 902000) 0 nil])
([nil nil ((5900 . 5906)) nil (25258 3671 729449 774000) 0 nil])
([nil nil ((5903 . 5906)) nil (25258 3671 729441 809000) 0 nil])
([nil nil ((5295 . 5296) (5294 . 5296) (t 25258 3671 771343 606000)) nil (25258 4153 6602 321000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -5294) (undo-tree-id186 . -1) (#("O" 0 1 (fontified t face font-lock-type-face)) . -5295) (undo-tree-id187 . -1) (#("]" 0 1 (fontified t)) . -5296) (undo-tree-id188 . -1) (undo-tree-id189 . 1) (undo-tree-id190 . -1) 5297) nil (25258 4153 6594 85000) 0 nil])
([nil nil ((5294 . 5295) (t 25258 4153 10044 52000)) nil (25258 4155 106618 996000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t)) . -5294) (undo-tree-id191 . -1) 5295) nil (25258 4155 106610 660000) 0 nil])
([nil nil ((#("                  
" 0 4 (fontified t) 4 18 (fontified t) 18 19 (fontified t)) . 5395) (undo-tree-id197 . -19) (undo-tree-id198 . -19) (undo-tree-id199 . -19) (undo-tree-id200 . -19) (t 25258 4155 110089 771000)) nil (25258 4167 499870 110000) 0 nil])
([nil nil ((#("		
" 0 2 (fontified t) 2 3 (fontified t)) . 5552) (undo-tree-id192 . -3) (undo-tree-id193 . -2) (undo-tree-id194 . -3) (undo-tree-id195 . -3) (undo-tree-id196 . -3)) nil (25258 4167 499854 360000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -1849) (undo-tree-id201 . -1) (#("m" 0 1 (fontified t)) . -1850) (undo-tree-id202 . -1) (#("p" 0 1 (fontified t)) . -1851) (undo-tree-id203 . -1) (#("o" 0 1 (fontified t)) . -1852) (undo-tree-id204 . -1) (#("r" 0 1 (fontified t)) . -1853) (undo-tree-id205 . -1) (#("t" 0 1 (fontified t)) . -1854) (undo-tree-id206 . -1) (#(" " 0 1 (fontified t)) . -1855) (undo-tree-id207 . -1) 1856 (t 25258 4167 514356 912000)) nil (25258 4204 553619 628000) 0 nil])
([nil nil ((1849 . 1857)) nil (25258 4204 553586 565000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5113) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (t 25258 4204 559125 997000)) nil (25258 4272 591699 895000) 0 nil])
([nil nil ((5157 . 5158)) nil (25258 4272 591685 67000) 0 nil])
([nil nil ((5186 . 5187)) nil (25258 4272 591683 725000) 0 nil])
([nil nil ((5223 . 5224)) nil (25258 4272 591679 707000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5880) (#(" " 0 1 (fontified t)) . 5880) (#(" " 0 1 (fontified t)) . 5880) (t 25258 4272 600434 689000)) nil (25258 4281 570249 556000) 0 nil])
([nil nil ((5488 . 5489) (t 25258 4281 608598 586000)) nil (25258 4314 389475 711000) 0 nil])
([nil nil ((5556 . 5557)) nil (25258 4314 389467 95000) 0 nil])
([nil nil ((5630 . 5631) (t 25258 4314 429178 499000)) nil (25258 4321 999062 72000) 0 nil])
([nil nil ((5756 . 5757)) nil (25258 4321 999057 774000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5340) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1) (undo-tree-id359 . -1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . -1) (undo-tree-id364 . -1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . -1) (undo-tree-id370 . -1) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . -1) (undo-tree-id386 . -1) (undo-tree-id387 . -1) (undo-tree-id388 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -5341) (undo-tree-id389 . -1) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . -1) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) (undo-tree-id401 . -1) (undo-tree-id402 . -1) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id409 . -1) (undo-tree-id410 . -1) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -5342) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -5343) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (#("}" 0 1 (fontified t face font-lock-variable-name-face)) . -5344) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (#("," 0 1 (fontified t face font-lock-string-face)) . -5345) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5346) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (#("#" 0 1 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-variable-name-face)) . -5347) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -5348) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . 1) (undo-tree-id617 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -5349) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5350) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -5351) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -5352) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -5353) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -5354) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -5355) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5356) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (#("(" 0 1 (fontified t face font-lock-variable-name-face)) . -5357) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (#(")" 0 1 (fontified t face font-lock-variable-name-face)) . -5358) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (#("}" 0 1 (fontified t face font-lock-variable-name-face)) . -5359) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . 1) (undo-tree-id684 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5360) (undo-tree-id685 . -1) 5361 (t 25258 4322 9308 716000)) nil (25258 4345 619015 682000) 0 nil])
([nil nil ((#("#" 0 1 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-variable-name-face)) . -5336) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -5337) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5338) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -5339) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) 5340) nil (25258 4345 618429 452000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5531) (undo-tree-id688 . -1) 5532 (t 25258 4345 633705 943000)) nil (25258 4355 87459 188000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5603) (undo-tree-id686 . -1) (#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5604) (undo-tree-id687 . -1) 5605) nil (25258 4355 87448 347000) 0 nil])
([nil nil ((5603 . 5604) (t 25258 4355 101861 589000)) nil (25258 4366 417535 675000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5728) (undo-tree-id689 . -1) (#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5729) (undo-tree-id690 . -1) 5730 (t 25258 4366 430045 211000)) nil (25258 4374 333543 885000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5223) (undo-tree-id691 . -1) 5224 (t 25258 4374 334171 687000)) nil (25258 4384 278758 332000) 0 nil])
([nil nil ((#("," 0 1 (fontified t face font-lock-string-face)) . -5781) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5782) (undo-tree-id695 . -1) (#("#" 0 1 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-variable-name-face)) . -5783) (undo-tree-id696 . -1) (#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -5784) (undo-tree-id697 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5785) (undo-tree-id698 . -1) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -5786) (undo-tree-id699 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5787) (undo-tree-id700 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -5788) (undo-tree-id701 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -5789) (undo-tree-id702 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -5790) (undo-tree-id703 . -1) (#("}" 0 1 (face font-lock-variable-name-face fontified t)) . -5791) (undo-tree-id704 . -1) (undo-tree-id705 . 1) (undo-tree-id706 . -1) 5792 (t 25258 4384 294329 173000)) nil (25258 4396 538742 399000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face font-lock-comment-face)) . -5642) (undo-tree-id709 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -5643) (undo-tree-id710 . -1) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -5644) (undo-tree-id711 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -5645) (undo-tree-id712 . -1) (#("_" 0 1 (fontified t face font-lock-comment-face)) . -5646) (undo-tree-id713 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -5647) (undo-tree-id714 . -1) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -5648) (undo-tree-id715 . -1) (#("}" 0 1 (fontified t face font-lock-comment-face)) . -5649) (undo-tree-id716 . -1) (undo-tree-id717 . 1) (undo-tree-id718 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -5650) (undo-tree-id719 . -1) 5651 (t 25258 4396 554520 190000)) nil (25258 4429 198691 204000) 0 nil])
([nil nil ((#("#" 0 1 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-comment-face)) . -5641) (undo-tree-id708 . -1) 5642) nil (25258 4429 198663 181000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5602) (undo-tree-id707 . -1) 5603) nil (25258 4429 198653 32000) 0 nil])
([nil nil ((5717 . 5721) (5619 . 5620) (5715 . 5716) (t 25258 4429 215014 307000)) nil (25258 4454 941364 855000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5816 . 5817) (nil fontified nil 5816 . 5817) (nil fontified nil 5815 . 5816) (nil fontified nil 5808 . 5815) (nil fontified nil 5799 . 5808) (nil fontified nil 5798 . 5799) (nil fontified nil 5790 . 5798) (nil fontified nil 5775 . 5790) (nil fontified nil 5774 . 5775) (nil fontified nil 5755 . 5774) (nil fontified nil 5743 . 5755) (nil fontified nil 5742 . 5743) (nil fontified nil 5741 . 5742) (nil fontified nil 5736 . 5741) (nil fontified nil 5734 . 5736) (nil fontified nil 5732 . 5734) (nil fontified nil 5728 . 5732) (nil fontified nil 5721 . 5728) (5721 . 5817)) nil (25258 4454 941359 365000) 0 nil])
([nil nil ((5602 . 5603)) nil (25258 4454 941349 757000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("{" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("#" 0 1 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t syntax-table (2) face font-lock-variable-name-face)) . 5757) (#(" " 0 1 (fontified t face font-lock-string-face)) . 5757) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("e" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("s" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("n" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("o" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("p" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("s" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("e" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("R" 0 1 (fontified t face font-lock-string-face)) . 5757) (#(" " 0 1 (fontified t face font-lock-string-face)) . 5757) (#("y" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("l" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("s" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("s" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("i" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("r" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("D" 0 1 (fontified t face font-lock-string-face)) . 5757)) nil (25258 4454 941338 967000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("r" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("r" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("e" 0 1 (fontified t face font-lock-string-face)) . 5757) (#(" " 0 1 (fontified t face font-lock-string-face)) . 5757) (#("}" 0 1 (fontified t face font-lock-string-face)) . 5757) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("d" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("o" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("b" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("." 0 1 (fontified t face font-lock-string-face)) . 5757) (#("e" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("s" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("n" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("o" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("p" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("s" 0 1 (fontified t face font-lock-string-face)) . 5757) (#("e" 0 1 (fontified t face font-lock-string-face)) . 5757)) nil (25258 4454 941274 505000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-string-face)) . 5757)) nil (25258 4454 941198 491000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -5762) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -5763) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5764) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -5765) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -5766) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -5767) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5768) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (#("#" 0 1 (fontified t face font-lock-variable-name-face)) . -5769) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5770) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5771) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -5772) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -5773) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5774) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (#("}" 0 1 (fontified t face font-lock-variable-name-face)) . -5775) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) 5776 (t 25258 4454 951389 243000)) nil (25258 4464 65923 534000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -5756) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (#("," 0 1 (fontified t face font-lock-string-face)) . -5757) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5758) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (#("#" 0 1 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-variable-name-face)) . -5759) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -5760) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5761) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) 5762) nil (25258 4464 65811 993000) 0 nil])
([nil nil ((5760 . 5761) (nil face font-lock-string-face 5759 . 5760) (nil fontified nil 5759 . 5760) (5759 . 5760) (#("\"" 0 1 (face font-lock-string-face fontified nil syntax-table (15))) . -5759) (5759 . 5760) (#("\"" 0 1 (fontified nil syntax-table (15))) . -5758) (5758 . 5759) (#("\"" 0 1 (fontified nil face font-lock-string-face syntax-table (15))) . -5758) (5756 . 5759) (t 25258 4464 103519 649000)) nil (25258 4480 989243 271000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil syntax-table (15) face font-lock-string-face)) . -5758) (undo-tree-id998 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . 5759)) nil (25258 4480 989240 707000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil syntax-table (15))) . -5758) (5758 . 5759) (#("\"" 0 1 (fontified nil face font-lock-string-face syntax-table (15))) . -5758) (5758 . 5759)) nil (25258 4480 989238 743000) 0 nil])
([nil nil ((5760 . 5761) (nil face font-lock-string-face 5759 . 5760) (nil fontified nil 5759 . 5760) (5759 . 5760) (#("\"" 0 1 (face font-lock-string-face fontified nil syntax-table (15))) . -5759) (5759 . 5760)) nil (25258 4480 989236 959000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil syntax-table (15) face font-lock-string-face)) . -5759) (undo-tree-id997 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . 5760)) nil (25258 4480 989235 356000) 0 nil])
([nil nil ((5758 . 5768)) nil (25258 4480 989233 453000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face font-lock-string-face)) . -5765) (undo-tree-id994 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5766) (undo-tree-id995 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5767) (undo-tree-id996 . -1) 5768) nil (25258 4480 989231 409000) 0 nil])
([nil nil ((5765 . 5774)) nil (25258 4480 989215 810000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -5757) (undo-tree-id999 . -1) (#("M" 0 1 (fontified t face font-lock-string-face)) . -5758) (undo-tree-id1000 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5759) (undo-tree-id1001 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -5760) (undo-tree-id1002 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5761) (undo-tree-id1003 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -5762) (undo-tree-id1004 . -1) (#("j" 0 1 (fontified t face font-lock-string-face)) . -5763) (undo-tree-id1005 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5764) (undo-tree-id1006 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5765) (undo-tree-id1007 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -5766) (undo-tree-id1008 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5767) (undo-tree-id1009 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5768) (undo-tree-id1010 . -1) (#("E" 0 1 (fontified t face font-lock-string-face)) . -5769) (undo-tree-id1011 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5770) (undo-tree-id1012 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5771) (undo-tree-id1013 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -5772) (undo-tree-id1014 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5773) (undo-tree-id1015 . -1) 5774 (t 25258 4480 999756 483000)) nil (25258 4495 787215 427000) 0 nil])
([nil nil ((5757 . 5758)) nil (25258 4495 787163 990000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5791 . 5792) (nil fontified nil 5786 . 5792) (nil fontified nil 5778 . 5786) (nil fontified nil 5777 . 5778) (nil fontified nil 5776 . 5777) (nil fontified nil 5772 . 5776) (nil fontified nil 5758 . 5772) (5758 . 5792)) nil (25258 4495 787155 965000) 0 nil])
([nil nil ((5792 . 5801) (t 25258 4495 799959 880000)) nil (25258 4522 638240 32000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5817 . 5818) (nil fontified nil 5811 . 5818) (nil fontified nil 5802 . 5811) (nil fontified nil 5801 . 5802) (5801 . 5818)) nil (25258 4522 638231 436000) 0 nil])
([nil nil ((#("," 0 1 (fontified t face font-lock-string-face)) . -5792) (undo-tree-id1016 . -1) 5793 (t 25258 4522 676319 917000)) nil (25258 4540 424385 791000) 0 nil])
([nil nil ((#("," 0 1 (fontified t face font-lock-string-face)) . -5756) (undo-tree-id1017 . -1) 5757 (t 25258 4540 432551 438000)) nil (25258 4546 998511 277000) 0 nil])
([nil nil ((#("." 0 1 (fontified t face font-lock-variable-name-face)) . -5785) (undo-tree-id1018 . -1) (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -5786) (undo-tree-id1019 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5787) (undo-tree-id1020 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -5788) (undo-tree-id1021 . -1) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -5789) (undo-tree-id1022 . -1) 5790 (t 25258 4547 12635 996000)) nil (25258 4553 532114 774000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-string-face)) . -5787) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5788) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5789) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -5790) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5791) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -5792) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5793) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) 5794 (t 25258 4553 544719 284000)) nil (25258 4560 713956 706000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-variable-name-face)) . -5797) (undo-tree-id1093 . -1) 5798 (t 25258 4560 724810 101000)) nil (25258 4577 740140 464000) 0 nil])
([nil nil ((5787 . 5788) (t 25258 4577 745022 353000)) nil (25258 4585 81507 398000) 0 nil])
([nil nil ((#("." 0 1 (fontified t face font-lock-string-face)) . -5787) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) 5788) nil (25258 4585 81505 274000) 0 nil])
([nil nil ((5787 . 5796)) nil (25258 4585 81487 460000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-face)) . -5708) (undo-tree-id1150 . -1) 5709 (t 25258 4585 93112 702000)) nil (25258 4601 895277 355000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5602) (undo-tree-id1149 . -1) 5603) nil (25258 4601 895272 406000) 0 nil])
([nil nil ((#("		  502 -> Logger.error(\"#{get_time()} Drissly Response: #{response} , error: #{error_message}\")" 0 4 (fontified t) 4 11 (fontified t) 11 15 (fontified t face font-lock-type-face) 15 17 (fontified t face font-lock-type-face) 17 19 (fontified t) 19 24 (fontified t) 24 25 (syntax-table (15) fontified t face font-lock-string-face) 25 26 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 26 38 (fontified t face font-lock-variable-name-face) 38 39 (fontified t face font-lock-string-face) 39 53 (fontified t face font-lock-string-face) 53 57 (fontified t face font-lock-string-face) 57 58 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 58 59 (fontified t face font-lock-variable-name-face) 59 67 (fontified t face font-lock-variable-name-face) 67 68 (rear-nonsticky t fontified t face font-lock-variable-name-face) 68 78 (fontified t face font-lock-string-face) 78 79 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 79 88 (fontified t face font-lock-variable-name-face) 88 93 (fontified t face font-lock-variable-name-face) 93 94 (rear-nonsticky t fontified t face font-lock-variable-name-face) 94 95 (syntax-table (15) fontified t face font-lock-string-face) 95 96 (rear-nonsticky t fontified t)) . 5716) (undo-tree-id1101 . -69) (undo-tree-id1102 . -38) (undo-tree-id1103 . -38) (undo-tree-id1104 . -38) (undo-tree-id1105 . -38) (undo-tree-id1106 . -38) (undo-tree-id1107 . -38) (undo-tree-id1108 . -4) (undo-tree-id1109 . -39) (undo-tree-id1110 . -69) (undo-tree-id1111 . -69) (undo-tree-id1112 . -25) (undo-tree-id1113 . -38) (undo-tree-id1114 . -25) (undo-tree-id1115 . -38) (undo-tree-id1116 . -57) (undo-tree-id1117 . -68) (undo-tree-id1118 . -57) (undo-tree-id1119 . -68) (undo-tree-id1120 . -78) (undo-tree-id1121 . -94) (undo-tree-id1122 . -78) (undo-tree-id1123 . -94) (undo-tree-id1124 . -25) (undo-tree-id1125 . -38) (undo-tree-id1126 . -25) (undo-tree-id1127 . -38) (undo-tree-id1128 . -57) (undo-tree-id1129 . -68) (undo-tree-id1130 . -57) (undo-tree-id1131 . -68) (undo-tree-id1132 . -78) (undo-tree-id1133 . -94) (undo-tree-id1134 . -78) (undo-tree-id1135 . -94) (undo-tree-id1136 . -25) (undo-tree-id1137 . -38) (undo-tree-id1138 . -25) (undo-tree-id1139 . -38) (undo-tree-id1140 . -57) (undo-tree-id1141 . -68) (undo-tree-id1142 . -57) (undo-tree-id1143 . -68) (undo-tree-id1144 . -78) (undo-tree-id1145 . -94) (undo-tree-id1146 . -78) (undo-tree-id1147 . -94) (undo-tree-id1148 . -96)) nil (25258 4601 895262 357000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5716) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1)) nil (25258 4601 895179 681000) 0 nil])
([nil nil ((5716 . 5717)) nil (25258 4601 895155 75000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5462) (undo-tree-id1151 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5463) (undo-tree-id1152 . -1) 5464 (t 25258 4601 897316 476000)) nil (25258 4608 478541 695000) 0 nil])
([nil nil ((5462 . 5463)) nil (25258 4608 478525 324000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5157) (undo-tree-id1154 . -1) 5158 (t 25258 4608 489395 355000)) nil (25258 4647 814790 349000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5185) (undo-tree-id1153 . -1) 5186) nil (25258 4647 814785 269000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -5639) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -5640) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5641) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (undo-tree-id1181 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -5642) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) (undo-tree-id1184 . -1) (undo-tree-id1185 . -1) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) (undo-tree-id1190 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -5643) (undo-tree-id1191 . -1) (undo-tree-id1192 . -1) (undo-tree-id1193 . -1) (undo-tree-id1194 . -1) (undo-tree-id1195 . -1) (undo-tree-id1196 . -1) (undo-tree-id1197 . -1) (undo-tree-id1198 . -1) (undo-tree-id1199 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -5644) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . -1) (undo-tree-id1203 . -1) (undo-tree-id1204 . -1) (undo-tree-id1205 . -1) (undo-tree-id1206 . -1) (undo-tree-id1207 . -1) (undo-tree-id1208 . -1) (undo-tree-id1209 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -5645) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -5646) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (undo-tree-id1229 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5647) (undo-tree-id1230 . -1) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) (undo-tree-id1239 . -1) (#("(" 0 1 (fontified t face font-lock-variable-name-face)) . -5648) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) (undo-tree-id1245 . -1) (undo-tree-id1246 . -1) (undo-tree-id1247 . -1) (undo-tree-id1248 . -1) (undo-tree-id1249 . -1) (#(")" 0 1 (fontified t face font-lock-variable-name-face)) . -5649) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (#("}" 0 1 (fontified t face font-lock-variable-name-face)) . -5650) (undo-tree-id1260 . -1) (undo-tree-id1261 . -1) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (undo-tree-id1268 . -1) (undo-tree-id1269 . 1) (undo-tree-id1270 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5651) (undo-tree-id1271 . -1) 5652 (t 25258 4647 813854 16000)) nil (25258 4672 632417 476000) 0 nil])
([nil nil ((#("#" 0 1 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-variable-name-face)) . -5638) (undo-tree-id1272 . -1) (undo-tree-id1273 . -1) (undo-tree-id1274 . -1) (undo-tree-id1275 . -1) (undo-tree-id1276 . -1) (undo-tree-id1277 . -1) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (undo-tree-id1280 . -1) 5639 (t 25258 4672 638133 534000)) nil (25258 4674 796802 58000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t face font-lock-string-face)) . -5575) (undo-tree-id1290 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -5576) (undo-tree-id1291 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -5577) (undo-tree-id1292 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5578) (undo-tree-id1293 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5579) (undo-tree-id1294 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -5580) (undo-tree-id1295 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -5581) (undo-tree-id1296 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -5582) (undo-tree-id1297 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5583) (undo-tree-id1298 . -1) (#("S" 0 1 (fontified t face font-lock-string-face)) . -5584) (undo-tree-id1299 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5585) (undo-tree-id1300 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5586) (undo-tree-id1301 . -1) (#("v" 0 1 (fontified t face font-lock-string-face)) . -5587) (undo-tree-id1302 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5588) (undo-tree-id1303 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5589) (undo-tree-id1304 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5590) (undo-tree-id1305 . -1) (#("E" 0 1 (fontified t face font-lock-string-face)) . -5591) (undo-tree-id1306 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5592) (undo-tree-id1307 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5593) (undo-tree-id1308 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -5594) (undo-tree-id1309 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5595) (undo-tree-id1310 . -1) 5596 (t 25258 4674 814157 683000)) nil (25258 4703 587994 30000) 0 nil])
([nil nil ((#("D" 0 1 (fontified t face font-lock-string-face)) . -5566) (undo-tree-id1281 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5567) (undo-tree-id1282 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -5568) (undo-tree-id1283 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5569) (undo-tree-id1284 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5570) (undo-tree-id1285 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -5571) (undo-tree-id1286 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -5572) (undo-tree-id1287 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -5573) (undo-tree-id1288 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5574) (undo-tree-id1289 . -1) 5575) nil (25258 4703 587968 342000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5623 . 5624) (nil fontified nil 5618 . 5624) (nil fontified nil 5609 . 5618) (nil fontified nil 5608 . 5609) (nil fontified nil 5600 . 5608) (nil fontified nil 5598 . 5600) (nil fontified nil 5585 . 5598) (nil fontified nil 5584 . 5585) (nil fontified nil 5566 . 5584) (5566 . 5624)) nil (25258 4703 587803 781000) 0 nil])
([nil nil ((#("#" 0 1 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-variable-name-face)) . -5584) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -5585) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -5586) (undo-tree-id1325 . -1) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (undo-tree-id1329 . -1) (undo-tree-id1330 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5587) (undo-tree-id1331 . -1) (undo-tree-id1332 . -1) (undo-tree-id1333 . -1) (undo-tree-id1334 . -1) (undo-tree-id1335 . -1) (undo-tree-id1336 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5588) (undo-tree-id1337 . -1) (undo-tree-id1338 . -1) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -5589) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (undo-tree-id1348 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5590) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (undo-tree-id1354 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -5591) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) (undo-tree-id1357 . -1) (undo-tree-id1358 . -1) (undo-tree-id1359 . -1) (undo-tree-id1360 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5592) (undo-tree-id1361 . -1) (undo-tree-id1362 . -1) (undo-tree-id1363 . -1) (undo-tree-id1364 . -1) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5593) (undo-tree-id1367 . -1) (undo-tree-id1368 . -1) (undo-tree-id1369 . -1) (undo-tree-id1370 . -1) (undo-tree-id1371 . -1) (undo-tree-id1372 . -1) (#("." 0 1 (fontified t face font-lock-variable-name-face)) . -5594) (undo-tree-id1373 . -1) (undo-tree-id1374 . -1) (undo-tree-id1375 . -1) (undo-tree-id1376 . -1) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -5595) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5596) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -5597) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (undo-tree-id1396 . -1) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -5598) (undo-tree-id1397 . -1) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (undo-tree-id1402 . -1) (#("}" 0 1 (fontified t face font-lock-variable-name-face)) . -5599) (undo-tree-id1403 . -1) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (undo-tree-id1408 . 1) (undo-tree-id1409 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5600) (undo-tree-id1410 . -1) 5601 (t 25258 4703 598471 935000)) nil (25258 4749 968967 962000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5586) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (5586 . 5587) (#("}" 0 1 (fontified nil face font-lock-variable-name-face)) . -5586) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (5586 . 5587) (5584 . 5587)) nil (25258 4749 968882 260000) 0 nil])
([nil nil ((5586 . 5593)) nil (25258 4749 968868 233000) 0 nil])
([nil nil ((5594 . 5595)) nil (25258 4749 968863 725000) 0 nil])
([nil nil ((#("," 0 1 (fontified t face font-lock-string-face)) . -5600) (undo-tree-id1411 . -1) 5601 (t 25258 4749 982959 75000)) nil (25258 4771 813239 673000) 0 nil])
([nil nil ((5594 . 5595)) nil (25258 4771 813222 631000) 0 nil])
([nil nil ((5601 . 5602)) nil (25258 4771 813214 636000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-string-face)) . -5596) (undo-tree-id1413 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5597) (undo-tree-id1414 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5598) (undo-tree-id1415 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -5599) (undo-tree-id1416 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5600) (undo-tree-id1417 . -1) 5601 (t 25258 4771 831180 797000)) nil (25258 4806 782315 514000) 0 nil])
([nil nil ((5596 . 5609)) nil (25258 4806 782310 204000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face font-lock-string-face)) . -5604) (undo-tree-id1412 . -1) 5605) nil (25258 4806 782307 970000) 0 nil])
([nil nil ((5604 . 5605)) nil (25258 4806 782294 935000) 0 nil])
([nil nil ((#("." 0 1 (fontified t face font-lock-variable-name-face)) . -5829) (undo-tree-id1584 . -1) (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -5830) (undo-tree-id1585 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5831) (undo-tree-id1586 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -5832) (undo-tree-id1587 . -1) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -5833) (undo-tree-id1588 . -1) 5834 (t 25258 4806 791525 959000)) nil (25258 4851 765398 163000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -5762) (undo-tree-id1579 . -1) (#("r" 0 1 (fontified t)) . -5763) (undo-tree-id1580 . -1) (#("r" 0 1 (fontified t)) . -5764) (undo-tree-id1581 . -1) (#("o" 0 1 (fontified t)) . -5765) (undo-tree-id1582 . -1) (#("r" 0 1 (fontified t)) . -5766) (undo-tree-id1583 . -1) 5767) nil (25258 4851 765387 553000) 0 nil])
([nil nil ((5762 . 5766)) nil (25258 4851 765378 156000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5770) (undo-tree-id1573 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -5771) (undo-tree-id1574 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -5772) (undo-tree-id1575 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5773) (undo-tree-id1576 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -5774) (undo-tree-id1577 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -5775) (undo-tree-id1578 . -1) 5776) nil (25258 4851 765373 908000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -5779) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (#("#" 0 1 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-variable-name-face)) . -5780) (undo-tree-id1452 . -1) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (undo-tree-id1459 . -1) (#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -5781) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . 1) (undo-tree-id1470 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -5782) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5783) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -5784) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -5785) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -5786) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -5787) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -5788) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5789) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (#("(" 0 1 (fontified t face font-lock-variable-name-face)) . -5790) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (undo-tree-id1551 . -1) (#(")" 0 1 (fontified t face font-lock-variable-name-face)) . -5791) (undo-tree-id1552 . -1) (undo-tree-id1553 . -1) (undo-tree-id1554 . -1) (undo-tree-id1555 . -1) (undo-tree-id1556 . -1) (undo-tree-id1557 . -1) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (#("}" 0 1 (fontified t face font-lock-variable-name-face)) . -5792) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . -1) (undo-tree-id1566 . -1) (undo-tree-id1567 . -1) (undo-tree-id1568 . -1) (undo-tree-id1569 . 1) (undo-tree-id1570 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5793) (undo-tree-id1571 . -1) (undo-tree-id1572 . -1) 5794) nil (25258 4851 765288 537000) 0 nil])
([nil nil ((5767 . 5772) (t 25258 4851 779953 796000)) nil (25258 4884 798937 139000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-type-face)) . -5769) (undo-tree-id1616 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -5770) (undo-tree-id1617 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -5771) (undo-tree-id1618 . -1) 5772) nil (25258 4884 798934 153000) 0 nil])
([nil nil ((5769 . 5774)) nil (25258 4884 798927 711000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -5773) (undo-tree-id1615 . -1) 5774) nil (25258 4884 798925 868000) 0 nil])
([nil nil ((5773 . 5781)) nil (25258 4884 798922 421000) 0 nil])
([nil nil ((#("\"#{message},Drissly Response: #{response}\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face) 1 2 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t syntax-table (2) face font-lock-variable-name-face) 2 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t face font-lock-string-face) 12 26 (fontified t face font-lock-string-face) 26 30 (fontified t face font-lock-string-face) 30 31 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t syntax-table (2) face font-lock-variable-name-face) 31 32 (fontified t face font-lock-variable-name-face) 32 40 (fontified t face font-lock-variable-name-face) 40 41 (fontified t face font-lock-variable-name-face) 41 42 (fontified t syntax-table (15) face font-lock-string-face)) . 5781) (undo-tree-id1589 . -42) (undo-tree-id1590 . -11) (undo-tree-id1591 . -12) (undo-tree-id1592 . -11) (undo-tree-id1593 . -12) (undo-tree-id1594 . -11) (undo-tree-id1595 . -11) (undo-tree-id1596 . -30) (undo-tree-id1597 . -41) (undo-tree-id1598 . -30) (undo-tree-id1599 . -41) (undo-tree-id1600 . -12) (undo-tree-id1601 . -12) (undo-tree-id1602 . -41) (undo-tree-id1603 . -12) (undo-tree-id1604 . -41) (undo-tree-id1605 . -1) (undo-tree-id1606 . -11) (undo-tree-id1607 . -1) (undo-tree-id1608 . -11) (undo-tree-id1609 . -30) (undo-tree-id1610 . -41) (undo-tree-id1611 . -30) (undo-tree-id1612 . -41) (undo-tree-id1613 . -42) (undo-tree-id1614 . -42) 5823) nil (25258 4884 798916 380000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5821 . 5822) (nil fontified nil 5821 . 5822) (nil fontified nil 5820 . 5821) (nil fontified nil 5812 . 5820) (nil fontified nil 5811 . 5812) (nil fontified nil 5810 . 5811) (nil fontified nil 5806 . 5810) (nil fontified nil 5792 . 5806) (nil fontified nil 5791 . 5792) (nil fontified nil 5782 . 5791) (nil fontified nil 5781 . 5782) (nil fontified nil 5780 . 5781) (5780 . 5822)) nil (25258 4884 798865 754000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -5773) (undo-tree-id1619 . -1) (#("n" 0 1 (fontified t)) . -5774) (undo-tree-id1620 . -1) (#("c" 0 1 (fontified t)) . -5775) (undo-tree-id1621 . -1) (#("o" 0 1 (fontified t)) . -5776) (undo-tree-id1622 . -1) (#("d" 0 1 (fontified t)) . -5777) (undo-tree-id1623 . -1) (#("e" 0 1 (fontified t)) . -5778) (undo-tree-id1624 . -1) 5779 (t 25258 4884 840257 329000)) nil (25258 4900 348955 803000) 0 nil])
([nil nil ((5773 . 5779)) nil (25258 4900 348934 874000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t face font-lock-type-face)) . -5769) (undo-tree-id1627 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -5770) (undo-tree-id1628 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -5771) (undo-tree-id1629 . -1) (#("." 0 1 (fontified t)) . -5772) (undo-tree-id1630 . -1) (#("d" 0 1 (fontified t)) . -5773) (undo-tree-id1631 . -1) (#("e" 0 1 (fontified t)) . -5774) (undo-tree-id1632 . -1) (#("c" 0 1 (fontified t)) . -5775) (undo-tree-id1633 . -1) (#("o" 0 1 (fontified t)) . -5776) (undo-tree-id1634 . -1) (#("d" 0 1 (fontified t)) . -5777) (undo-tree-id1635 . -1) (#("e" 0 1 (fontified t)) . -5778) (undo-tree-id1636 . -1) 5779 (t 25258 4900 360396 831000)) nil (25258 4920 334177 306000) 0 nil])
([nil nil ((5769 . 5778)) nil (25258 4920 334153 772000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -5776) (undo-tree-id1625 . -1) (#("e" 0 1 (fontified t)) . -5777) (undo-tree-id1626 . -1) 5778) nil (25258 4920 334148 652000) 0 nil])
([nil nil ((5776 . 5779)) nil (25258 4920 334124 466000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t rear-nonsticky t syntax-table (15) face font-lock-string-face)) . -5821) (undo-tree-id2430 . -1) (undo-tree-id2431 . -1) (undo-tree-id2432 . -1) (undo-tree-id2433 . -1) (undo-tree-id2434 . -1) (undo-tree-id2435 . -1) (undo-tree-id2436 . -1) (undo-tree-id2437 . -1) (undo-tree-id2438 . -1) (undo-tree-id2439 . -1) (undo-tree-id2440 . -1) (undo-tree-id2441 . -1) (undo-tree-id2442 . -1) (undo-tree-id2443 . -1) (undo-tree-id2444 . -1) (undo-tree-id2445 . -1) (undo-tree-id2446 . -1) (undo-tree-id2447 . -1) (undo-tree-id2448 . -1) (undo-tree-id2449 . -1) (undo-tree-id2450 . -1) (undo-tree-id2451 . -1) (undo-tree-id2452 . -1) (undo-tree-id2453 . -1) (undo-tree-id2454 . -1) (#(")" 0 1 (fontified t)) . -5822) (undo-tree-id2455 . -1) (undo-tree-id2456 . -1) (undo-tree-id2457 . -1) (undo-tree-id2458 . -1) (undo-tree-id2459 . -1) (undo-tree-id2460 . -1) (undo-tree-id2461 . -1) (undo-tree-id2462 . -1) (undo-tree-id2463 . -1) (undo-tree-id2464 . -1) (undo-tree-id2465 . -1) (undo-tree-id2466 . -1) (undo-tree-id2467 . -1) (undo-tree-id2468 . -1) (undo-tree-id2469 . -1) (undo-tree-id2470 . -1) (undo-tree-id2471 . -1) (undo-tree-id2472 . -1) (undo-tree-id2473 . -1) (undo-tree-id2474 . -1) (undo-tree-id2475 . -1) (undo-tree-id2476 . -1) (undo-tree-id2477 . -1) (undo-tree-id2478 . -1) (undo-tree-id2479 . -1) (undo-tree-id2480 . 1) (undo-tree-id2481 . -1) 5823 (t 25258 4920 348573 804000)) nil (25258 4959 465603 399000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . -5821) (undo-tree-id2427 . -1) (undo-tree-id2428 . 1) (undo-tree-id2429 . -1) 5822) nil (25258 4959 465539 558000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t face font-lock-type-face)) . -5771) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (#("." 0 1 (fontified t face font-lock-type-face)) . -5772) (undo-tree-id2111 . -1) (undo-tree-id2112 . -1) (undo-tree-id2113 . -1) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1) (undo-tree-id2131 . -1) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (#("e" 0 1 (fontified t)) . -5773) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (#("n" 0 1 (fontified t)) . -5774) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (#("c" 0 1 (fontified t)) . -5775) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . -1) (undo-tree-id2206 . -1) (undo-tree-id2207 . -1) (undo-tree-id2208 . -1) (undo-tree-id2209 . -1) (undo-tree-id2210 . -1) (undo-tree-id2211 . -1) (undo-tree-id2212 . -1) (undo-tree-id2213 . -1) (undo-tree-id2214 . -1) (undo-tree-id2215 . -1) (undo-tree-id2216 . -1) (undo-tree-id2217 . -1) (undo-tree-id2218 . -1) (undo-tree-id2219 . -1) (undo-tree-id2220 . -1) (undo-tree-id2221 . -1) (undo-tree-id2222 . -1) (#("o" 0 1 (fontified t)) . -5776) (undo-tree-id2223 . -1) (undo-tree-id2224 . -1) (undo-tree-id2225 . -1) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (undo-tree-id2228 . -1) (undo-tree-id2229 . -1) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (undo-tree-id2232 . -1) (undo-tree-id2233 . -1) (undo-tree-id2234 . -1) (undo-tree-id2235 . -1) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1) (undo-tree-id2250 . -1) (#("d" 0 1 (fontified t)) . -5777) (undo-tree-id2251 . -1) (undo-tree-id2252 . -1) (undo-tree-id2253 . -1) (undo-tree-id2254 . -1) (undo-tree-id2255 . -1) (undo-tree-id2256 . -1) (undo-tree-id2257 . -1) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1) (undo-tree-id2261 . -1) (undo-tree-id2262 . -1) (undo-tree-id2263 . -1) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . -1) (undo-tree-id2269 . -1) (undo-tree-id2270 . -1) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (undo-tree-id2273 . -1) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (undo-tree-id2276 . -1) (undo-tree-id2277 . -1) (undo-tree-id2278 . -1) (#("e" 0 1 (fontified t)) . -5778) (undo-tree-id2279 . -1) (undo-tree-id2280 . -1) (undo-tree-id2281 . -1) (undo-tree-id2282 . -1) (undo-tree-id2283 . -1) (undo-tree-id2284 . -1) (undo-tree-id2285 . -1) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1) (undo-tree-id2293 . -1) (undo-tree-id2294 . -1) (undo-tree-id2295 . -1) (undo-tree-id2296 . -1) (undo-tree-id2297 . -1) (undo-tree-id2298 . -1) (undo-tree-id2299 . -1) (undo-tree-id2300 . -1) (undo-tree-id2301 . -1) (undo-tree-id2302 . -1) (undo-tree-id2303 . -1) (undo-tree-id2304 . -1) (undo-tree-id2305 . -1) (undo-tree-id2306 . -1) (#("(" 0 1 (fontified t)) . -5779) (undo-tree-id2307 . -1) (undo-tree-id2308 . -1) (undo-tree-id2309 . -1) (undo-tree-id2310 . -1) (undo-tree-id2311 . -1) (undo-tree-id2312 . -1) (undo-tree-id2313 . -1) (undo-tree-id2314 . -1) (undo-tree-id2315 . -1) (undo-tree-id2316 . -1) (undo-tree-id2317 . -1) (undo-tree-id2318 . -1) (undo-tree-id2319 . -1) (undo-tree-id2320 . -1) (undo-tree-id2321 . -1) (undo-tree-id2322 . -1) (undo-tree-id2323 . -1) (undo-tree-id2324 . -1) (undo-tree-id2325 . -1) (undo-tree-id2326 . -1) (undo-tree-id2327 . -1) (undo-tree-id2328 . -1) (undo-tree-id2329 . -1) (undo-tree-id2330 . -1) (undo-tree-id2331 . -1) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) (undo-tree-id2334 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -5780) (undo-tree-id2335 . -1) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (#("#" 0 1 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-variable-name-face)) . -5781) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -5782) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (undo-tree-id2375 . 1) (undo-tree-id2376 . -1) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -5783) (undo-tree-id2377 . -1) (undo-tree-id2378 . -1) (undo-tree-id2379 . -1) (undo-tree-id2380 . -1) (undo-tree-id2381 . -1) (undo-tree-id2382 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5784) (undo-tree-id2383 . -1) (undo-tree-id2384 . -1) (undo-tree-id2385 . -1) (undo-tree-id2386 . -1) (undo-tree-id2387 . -1) (undo-tree-id2388 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5785) (undo-tree-id2389 . -1) (undo-tree-id2390 . -1) (undo-tree-id2391 . -1) (undo-tree-id2392 . -1) (undo-tree-id2393 . -1) (undo-tree-id2394 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5786) (undo-tree-id2395 . -1) (undo-tree-id2396 . -1) (undo-tree-id2397 . -1) (undo-tree-id2398 . -1) (undo-tree-id2399 . -1) (undo-tree-id2400 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -5787) (undo-tree-id2401 . -1) (undo-tree-id2402 . -1) (undo-tree-id2403 . -1) (undo-tree-id2404 . -1) (undo-tree-id2405 . -1) (undo-tree-id2406 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -5788) (undo-tree-id2407 . -1) (undo-tree-id2408 . -1) (undo-tree-id2409 . -1) (undo-tree-id2410 . -1) (undo-tree-id2411 . -1) (undo-tree-id2412 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5789) (undo-tree-id2413 . -1) (undo-tree-id2414 . -1) (undo-tree-id2415 . -1) (undo-tree-id2416 . -1) (undo-tree-id2417 . -1) (undo-tree-id2418 . -1) (#("}" 0 1 (fontified t face font-lock-variable-name-face)) . -5790) (undo-tree-id2419 . -1) (undo-tree-id2420 . -1) (undo-tree-id2421 . -1) (undo-tree-id2422 . -1) (undo-tree-id2423 . -1) (undo-tree-id2424 . 1) (undo-tree-id2425 . -1) (#("," 0 1 (fontified t face font-lock-string-face)) . -5791) (undo-tree-id2426 . -1) 5792) nil (25258 4959 465498 321000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t face font-lock-type-face)) . -5755) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -5756) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -5757) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -5758) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -5759) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -5760) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (#("." 0 1 (fontified t face font-lock-type-face)) . -5761) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (undo-tree-id1830 . -1) (#("i" 0 1 (fontified t)) . -5762) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (#("n" 0 1 (fontified t)) . -5763) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (#("f" 0 1 (fontified t)) . -5764) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (#("o" 0 1 (fontified t)) . -5765) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (#("(" 0 1 (fontified t)) . -5766) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (#("J" 0 1 (fontified t face font-lock-type-face)) . -5767) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -5768) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -5769) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -5770) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) 5771) nil (25258 4959 465007 576000) 0 nil])
([nil nil ((5755 . 5757) (#("\"" 0 1 (fontified nil syntax-table (15))) . -5755) (5755 . 5756) (t 25258 4959 480911 920000)) nil (25258 4979 58107 758000) 0 nil])
([nil nil ((#("Drissly Response:" 0 7 (fontified t face font-lock-type-face) 7 8 (fontified t) 8 14 (fontified t face elixir-atom-face) 14 17 (fontified t face elixir-atom-face)) . 5757) (undo-tree-id2515 . -17) (undo-tree-id2516 . -17) 5774) nil (25258 4979 58106 386000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5772 . 5773) (nil fontified nil 5770 . 5773) (nil fontified nil 5764 . 5770) (nil fontified nil 5763 . 5764) (nil fontified nil 5756 . 5763) (5756 . 5773)) nil (25258 4979 58104 21000) 0 nil])
([nil nil ((5774 . 5775)) nil (25258 4979 58102 87000) 0 nil])
([nil nil ((5774 . 5775)) nil (25258 4979 58101 166000) 0 nil])
([nil nil ((5775 . 5778)) nil (25258 4979 58100 324000) 0 nil])
([nil nil ((#("#" 0 1 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-comment-delimiter-face)) . -5780) (undo-tree-id2513 . -1) (#("{" 0 1 (fontified t)) . -5781) (undo-tree-id2514 . -1) 5782) nil (25258 4979 58098 881000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -5788) (undo-tree-id2482 . -1) (undo-tree-id2483 . -1) (undo-tree-id2484 . -1) (undo-tree-id2485 . -1) (undo-tree-id2486 . -1) (undo-tree-id2487 . -1) (undo-tree-id2488 . -1) (undo-tree-id2489 . -1) (undo-tree-id2490 . -1) (undo-tree-id2491 . -1) (undo-tree-id2492 . -1) (undo-tree-id2493 . -1) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) (undo-tree-id2498 . -1) (undo-tree-id2499 . -1) (undo-tree-id2500 . -1) (undo-tree-id2501 . -1) (undo-tree-id2502 . -1) (undo-tree-id2503 . -1) (undo-tree-id2504 . -1) (undo-tree-id2505 . -1) (undo-tree-id2506 . -1) (undo-tree-id2507 . -1) (undo-tree-id2508 . -1) (undo-tree-id2509 . -1) (undo-tree-id2510 . -1) (undo-tree-id2511 . 1) (undo-tree-id2512 . -1) 5789) nil (25258 4979 58092 529000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -5777) (undo-tree-id2517 . -1) (undo-tree-id2518 . -1) (undo-tree-id2519 . -1) (#(" " 0 1 (fontified t)) . -5778) (undo-tree-id2520 . -1) (undo-tree-id2521 . -1) (undo-tree-id2522 . -1) (#(" " 0 1 (fontified t)) . -5779) (undo-tree-id2523 . -1) (undo-tree-id2524 . -1) (undo-tree-id2525 . -1) 5780 (t 25258 4979 69077 221000)) nil (25258 4990 531180 76000) 0 nil])
([nil nil ((5777 . 5778)) nil (25258 4990 531149 729000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-string-face)) . -5757) (undo-tree-id2535 . -1) (undo-tree-id2536 . -1) (undo-tree-id2537 . -1) (undo-tree-id2538 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -5758) (undo-tree-id2539 . -1) (undo-tree-id2540 . -1) (undo-tree-id2541 . -1) (undo-tree-id2542 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5759) (undo-tree-id2543 . -1) (undo-tree-id2544 . -1) (undo-tree-id2545 . -1) (undo-tree-id2546 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5760) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1) (undo-tree-id2549 . -1) (undo-tree-id2550 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -5761) (undo-tree-id2551 . -1) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -5762) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5763) (undo-tree-id2559 . -1) (undo-tree-id2560 . -1) (undo-tree-id2561 . -1) (undo-tree-id2562 . -1) (#("R" 0 1 (fontified t face font-lock-string-face)) . -5764) (undo-tree-id2563 . -1) (undo-tree-id2564 . -1) (undo-tree-id2565 . -1) (undo-tree-id2566 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5765) (undo-tree-id2567 . -1) (undo-tree-id2568 . -1) (undo-tree-id2569 . -1) (undo-tree-id2570 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5766) (undo-tree-id2571 . -1) (undo-tree-id2572 . -1) (undo-tree-id2573 . -1) (undo-tree-id2574 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -5767) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (undo-tree-id2577 . -1) (undo-tree-id2578 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -5768) (undo-tree-id2579 . -1) (undo-tree-id2580 . -1) (undo-tree-id2581 . -1) (undo-tree-id2582 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -5769) (undo-tree-id2583 . -1) (undo-tree-id2584 . -1) (undo-tree-id2585 . -1) (undo-tree-id2586 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5770) (undo-tree-id2587 . -1) (undo-tree-id2588 . -1) (undo-tree-id2589 . -1) (undo-tree-id2590 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5771) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) (#(":" 0 1 (fontified t rear-nonsticky t face font-lock-string-face)) . -5772) (undo-tree-id2595 . -1) (undo-tree-id2596 . -1) (undo-tree-id2597 . -1) (undo-tree-id2598 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -5773) (undo-tree-id2599 . -1) (undo-tree-id2600 . -1) (undo-tree-id2601 . -1) (undo-tree-id2602 . -1) (#(" " 0 1 (fontified t)) . -5774) (undo-tree-id2603 . -1) (undo-tree-id2604 . -1) (undo-tree-id2605 . -1) (#("<" 0 1 (fontified t)) . -5775) (undo-tree-id2606 . -1) (undo-tree-id2607 . -1) (undo-tree-id2608 . -1) (#(">" 0 1 (fontified t)) . -5776) (undo-tree-id2609 . -1) (undo-tree-id2610 . -1) (undo-tree-id2611 . -1) (#(" " 0 1 (fontified t)) . -5777) (undo-tree-id2612 . -1) 5778 (t 25258 4990 549172 930000)) nil (25258 5005 418989 815000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -5755) (undo-tree-id2526 . -1) (undo-tree-id2527 . -1) (undo-tree-id2528 . -1) (undo-tree-id2529 . -1) (undo-tree-id2530 . -1) (#("D" 0 1 (fontified t face font-lock-string-face)) . -5756) (undo-tree-id2531 . -1) (undo-tree-id2532 . -1) (undo-tree-id2533 . -1) (undo-tree-id2534 . -1) 5757) nil (25258 5233 304718 716000) 0 nil])
([nil nil ((#(".body" 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t face font-lock-variable-name-face) 2 3 (fontified t face font-lock-variable-name-face) 3 4 (fontified t face font-lock-variable-name-face) 4 5 (fontified t face font-lock-variable-name-face)) . 5697) (undo-tree-id2623 . -5) (undo-tree-id2624 . -5)) ((5697 . 5702)) (25258 5234 669645 13000) 0 nil])
([nil nil ((#("error" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face)) . 5699)) ((5699 . 5704)) (25258 5234 996669 783000) 0 nil])
([nil nil ((5699 . 5703)) ((#("Tipo" 0 4 (fontified t face font-lock-string-face)) . 5699) (t 25258 5208 650851 15000)) (25258 5235 294302 575000) 0 nil])
([nil nil ((5703 . 5711) (t 25258 5208 650851 15000)) nil (25258 5246 716514 195000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-string-face)) . -5710) (undo-tree-id2625 . -1) 5711) nil (25258 5246 716509 186000) 0 nil])
([nil nil ((5710 . 5712)) nil (25258 5246 716487 655000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -5689) (undo-tree-id2627 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5690) (undo-tree-id2628 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5691) (undo-tree-id2629 . -1) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -5692) (undo-tree-id2630 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5693) (undo-tree-id2631 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -5694) (undo-tree-id2632 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5695) (undo-tree-id2633 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5696) (undo-tree-id2634 . -1) 5697 (t 25258 5246 723120 980000)) nil (25258 5253 148238 459000) 0 nil])
([nil nil ((5689 . 5690)) nil (25258 5253 148219 93000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5689) (undo-tree-id2626 . -1) 5690) nil (25258 5253 148214 825000) 0 nil])
([nil nil ((5689 . 5696)) nil (25258 5253 148190 58000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face font-lock-string-face)) . -5574) (undo-tree-id2644 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5575) (undo-tree-id2645 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5576) (undo-tree-id2646 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -5577) (undo-tree-id2647 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -5578) (undo-tree-id2648 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -5579) (undo-tree-id2649 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5580) (undo-tree-id2650 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5581) (undo-tree-id2651 . -1) 5582 (t 25258 5253 167166 107000)) nil (25258 5288 691134 114000) 0 nil])
([nil nil ((5574 . 5579)) nil (25258 5288 691117 62000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face font-lock-string-face)) . -5674) (undo-tree-id2636 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5675) (undo-tree-id2637 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5676) (undo-tree-id2638 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -5677) (undo-tree-id2639 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -5678) (undo-tree-id2640 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -5679) (undo-tree-id2641 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5680) (undo-tree-id2642 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5681) (undo-tree-id2643 . -1) 5682) nil (25258 5288 691112 774000) 0 nil])
([nil nil ((5674 . 5675)) nil (25258 5288 691098 627000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-string-face)) . -5674) (undo-tree-id2635 . -1) 5675) nil (25258 5288 691095 221000) 0 nil])
([nil nil ((5674 . 5679)) nil (25258 5288 691077 598000) 0 nil])
([nil nil ((#("#" 0 1 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-variable-name-face)) . -5681) (undo-tree-id2652 . -1) (undo-tree-id2653 . -1) (undo-tree-id2654 . -1) (undo-tree-id2655 . -1) (undo-tree-id2656 . -1) (undo-tree-id2657 . -1) (undo-tree-id2658 . -1) (undo-tree-id2659 . -1) (undo-tree-id2660 . -1) (undo-tree-id2661 . -1) (undo-tree-id2662 . -1) (undo-tree-id2663 . -1) (#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -5682) (undo-tree-id2664 . -1) (undo-tree-id2665 . -1) (undo-tree-id2666 . -1) (undo-tree-id2667 . -1) (undo-tree-id2668 . -1) (undo-tree-id2669 . -1) (undo-tree-id2670 . -1) (undo-tree-id2671 . -1) (undo-tree-id2672 . -1) (undo-tree-id2673 . -1) (undo-tree-id2674 . -1) (undo-tree-id2675 . -1) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -5683) (undo-tree-id2676 . -1) (undo-tree-id2677 . -1) (undo-tree-id2678 . -1) (undo-tree-id2679 . -1) (undo-tree-id2680 . -1) (undo-tree-id2681 . -1) (undo-tree-id2682 . -1) (undo-tree-id2683 . -1) (undo-tree-id2684 . -1) (undo-tree-id2685 . -1) (undo-tree-id2686 . -1) (undo-tree-id2687 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5684) (undo-tree-id2688 . -1) (undo-tree-id2689 . -1) (undo-tree-id2690 . -1) (undo-tree-id2691 . -1) (undo-tree-id2692 . -1) (undo-tree-id2693 . -1) (undo-tree-id2694 . -1) (undo-tree-id2695 . -1) (undo-tree-id2696 . -1) (undo-tree-id2697 . -1) (undo-tree-id2698 . -1) (undo-tree-id2699 . -1) (undo-tree-id2700 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5685) (undo-tree-id2701 . -1) (undo-tree-id2702 . -1) (undo-tree-id2703 . -1) (undo-tree-id2704 . -1) (undo-tree-id2705 . -1) (undo-tree-id2706 . -1) (undo-tree-id2707 . -1) (undo-tree-id2708 . -1) (undo-tree-id2709 . -1) (undo-tree-id2710 . -1) (undo-tree-id2711 . -1) (undo-tree-id2712 . -1) (undo-tree-id2713 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5686) (undo-tree-id2714 . -1) (undo-tree-id2715 . -1) (undo-tree-id2716 . -1) (undo-tree-id2717 . -1) (undo-tree-id2718 . -1) (undo-tree-id2719 . -1) (undo-tree-id2720 . -1) (undo-tree-id2721 . -1) (undo-tree-id2722 . -1) (undo-tree-id2723 . -1) (undo-tree-id2724 . -1) (undo-tree-id2725 . -1) (undo-tree-id2726 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -5687) (undo-tree-id2727 . -1) (undo-tree-id2728 . -1) (undo-tree-id2729 . -1) (undo-tree-id2730 . -1) (undo-tree-id2731 . -1) (undo-tree-id2732 . -1) (undo-tree-id2733 . -1) (undo-tree-id2734 . -1) (undo-tree-id2735 . -1) (undo-tree-id2736 . -1) (undo-tree-id2737 . -1) (undo-tree-id2738 . -1) (undo-tree-id2739 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -5688) (undo-tree-id2740 . -1) (undo-tree-id2741 . -1) (undo-tree-id2742 . -1) (undo-tree-id2743 . -1) (undo-tree-id2744 . -1) (undo-tree-id2745 . -1) (undo-tree-id2746 . -1) (undo-tree-id2747 . -1) (undo-tree-id2748 . -1) (undo-tree-id2749 . -1) (undo-tree-id2750 . -1) (undo-tree-id2751 . -1) (undo-tree-id2752 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5689) (undo-tree-id2753 . -1) (undo-tree-id2754 . -1) (undo-tree-id2755 . -1) (undo-tree-id2756 . -1) (undo-tree-id2757 . -1) (undo-tree-id2758 . -1) (undo-tree-id2759 . -1) (undo-tree-id2760 . -1) (undo-tree-id2761 . -1) (undo-tree-id2762 . -1) (undo-tree-id2763 . -1) (undo-tree-id2764 . -1) (undo-tree-id2765 . -1) (#("}" 0 1 (fontified t face font-lock-variable-name-face)) . -5690) (undo-tree-id2766 . -1) (undo-tree-id2767 . -1) (undo-tree-id2768 . -1) (undo-tree-id2769 . -1) (undo-tree-id2770 . -1) (undo-tree-id2771 . -1) (undo-tree-id2772 . -1) (undo-tree-id2773 . -1) (undo-tree-id2774 . -1) (undo-tree-id2775 . -1) (undo-tree-id2776 . -1) (undo-tree-id2777 . -1) (undo-tree-id2778 . 1) (undo-tree-id2779 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5691) (undo-tree-id2780 . -1) (undo-tree-id2781 . -1) 5692 (t 25258 5288 707412 206000)) nil (25258 5310 818677 591000) 0 nil])
([nil nil ((#("T" 0 1 (fontified t face font-lock-string-face)) . -5681) (undo-tree-id2782 . -1) (undo-tree-id2783 . -1) (undo-tree-id2784 . -1) (undo-tree-id2785 . -1) (undo-tree-id2786 . -1) (undo-tree-id2787 . -1) (undo-tree-id2788 . -1) (undo-tree-id2789 . -1) (undo-tree-id2790 . -1) (undo-tree-id2791 . -1) (undo-tree-id2792 . -1) (undo-tree-id2793 . -1) (undo-tree-id2794 . -1) (undo-tree-id2795 . -1) (undo-tree-id2796 . -1) (undo-tree-id2797 . -1) (undo-tree-id2798 . -1) (undo-tree-id2799 . -1) (undo-tree-id2800 . -1) (undo-tree-id2801 . -1) (undo-tree-id2802 . -1) (undo-tree-id2803 . -1) (undo-tree-id2804 . -1) (undo-tree-id2805 . -1) (undo-tree-id2806 . -1) (undo-tree-id2807 . -1) (undo-tree-id2808 . -1) (undo-tree-id2809 . -1) (undo-tree-id2810 . -1) (undo-tree-id2811 . -1) (undo-tree-id2812 . -1) (undo-tree-id2813 . -1) (undo-tree-id2814 . -1) (undo-tree-id2815 . -1) (undo-tree-id2816 . -1) (undo-tree-id2817 . -1) (undo-tree-id2818 . -1) (undo-tree-id2819 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -5682) (undo-tree-id2820 . -1) (undo-tree-id2821 . -1) (undo-tree-id2822 . -1) (undo-tree-id2823 . -1) (undo-tree-id2824 . -1) (undo-tree-id2825 . -1) (undo-tree-id2826 . -1) (undo-tree-id2827 . -1) (undo-tree-id2828 . -1) (undo-tree-id2829 . -1) (undo-tree-id2830 . -1) (undo-tree-id2831 . -1) (undo-tree-id2832 . -1) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) (undo-tree-id2835 . -1) (undo-tree-id2836 . -1) (undo-tree-id2837 . -1) (undo-tree-id2838 . -1) (undo-tree-id2839 . -1) (undo-tree-id2840 . -1) (undo-tree-id2841 . -1) (undo-tree-id2842 . -1) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -1) (undo-tree-id2847 . -1) (undo-tree-id2848 . -1) (undo-tree-id2849 . -1) (undo-tree-id2850 . -1) (undo-tree-id2851 . -1) (undo-tree-id2852 . -1) (undo-tree-id2853 . -1) (undo-tree-id2854 . -1) (undo-tree-id2855 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -5683) (undo-tree-id2856 . -1) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) (undo-tree-id2863 . -1) (undo-tree-id2864 . -1) (undo-tree-id2865 . -1) (undo-tree-id2866 . -1) (undo-tree-id2867 . -1) (undo-tree-id2868 . -1) (undo-tree-id2869 . -1) (undo-tree-id2870 . -1) (undo-tree-id2871 . -1) (undo-tree-id2872 . -1) (undo-tree-id2873 . -1) (undo-tree-id2874 . -1) (undo-tree-id2875 . -1) (undo-tree-id2876 . -1) (undo-tree-id2877 . -1) (undo-tree-id2878 . -1) (undo-tree-id2879 . -1) (undo-tree-id2880 . -1) (undo-tree-id2881 . -1) (undo-tree-id2882 . -1) (undo-tree-id2883 . -1) (undo-tree-id2884 . -1) (undo-tree-id2885 . -1) (undo-tree-id2886 . -1) (undo-tree-id2887 . -1) (undo-tree-id2888 . -1) (undo-tree-id2889 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -5684) (undo-tree-id2890 . -1) (undo-tree-id2891 . -1) (undo-tree-id2892 . -1) (undo-tree-id2893 . -1) (undo-tree-id2894 . -1) (undo-tree-id2895 . -1) (undo-tree-id2896 . -1) (undo-tree-id2897 . -1) (undo-tree-id2898 . -1) (undo-tree-id2899 . -1) (undo-tree-id2900 . -1) (undo-tree-id2901 . -1) (undo-tree-id2902 . -1) (undo-tree-id2903 . -1) (undo-tree-id2904 . -1) (undo-tree-id2905 . -1) (undo-tree-id2906 . -1) (undo-tree-id2907 . -1) (undo-tree-id2908 . -1) (undo-tree-id2909 . -1) (undo-tree-id2910 . -1) (undo-tree-id2911 . -1) (undo-tree-id2912 . -1) (undo-tree-id2913 . -1) (undo-tree-id2914 . -1) (undo-tree-id2915 . -1) (undo-tree-id2916 . -1) (undo-tree-id2917 . -1) (undo-tree-id2918 . -1) (undo-tree-id2919 . -1) (undo-tree-id2920 . -1) (undo-tree-id2921 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5685) (undo-tree-id2922 . -1) (undo-tree-id2923 . -1) (undo-tree-id2924 . -1) (undo-tree-id2925 . -1) (undo-tree-id2926 . -1) (undo-tree-id2927 . -1) (undo-tree-id2928 . -1) (undo-tree-id2929 . -1) (undo-tree-id2930 . -1) (undo-tree-id2931 . -1) (undo-tree-id2932 . -1) (undo-tree-id2933 . -1) (undo-tree-id2934 . -1) (undo-tree-id2935 . -1) (undo-tree-id2936 . -1) (undo-tree-id2937 . -1) (undo-tree-id2938 . -1) (undo-tree-id2939 . -1) (undo-tree-id2940 . -1) (undo-tree-id2941 . -1) (undo-tree-id2942 . -1) (undo-tree-id2943 . -1) (undo-tree-id2944 . -1) (undo-tree-id2945 . -1) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -5686) (undo-tree-id2952 . -1) (undo-tree-id2953 . -1) (undo-tree-id2954 . -1) (undo-tree-id2955 . -1) (undo-tree-id2956 . -1) (undo-tree-id2957 . -1) (undo-tree-id2958 . -1) (undo-tree-id2959 . -1) (undo-tree-id2960 . -1) (undo-tree-id2961 . -1) (undo-tree-id2962 . -1) (undo-tree-id2963 . -1) (undo-tree-id2964 . -1) (undo-tree-id2965 . -1) (undo-tree-id2966 . -1) (undo-tree-id2967 . -1) (undo-tree-id2968 . -1) (undo-tree-id2969 . -1) (undo-tree-id2970 . -1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2977 . -1) (undo-tree-id2978 . -1) (undo-tree-id2979 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5687) (undo-tree-id2980 . -1) (undo-tree-id2981 . -1) (undo-tree-id2982 . -1) (undo-tree-id2983 . -1) (undo-tree-id2984 . -1) (undo-tree-id2985 . -1) (undo-tree-id2986 . -1) (undo-tree-id2987 . -1) (undo-tree-id2988 . -1) (undo-tree-id2989 . -1) (undo-tree-id2990 . -1) (undo-tree-id2991 . -1) (undo-tree-id2992 . -1) (undo-tree-id2993 . -1) (undo-tree-id2994 . -1) (undo-tree-id2995 . -1) (undo-tree-id2996 . -1) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3003 . -1) (undo-tree-id3004 . -1) (undo-tree-id3005 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5688) (undo-tree-id3006 . -1) (undo-tree-id3007 . -1) (undo-tree-id3008 . -1) (undo-tree-id3009 . -1) (undo-tree-id3010 . -1) (undo-tree-id3011 . -1) (undo-tree-id3012 . -1) (undo-tree-id3013 . -1) (undo-tree-id3014 . -1) (undo-tree-id3015 . -1) (undo-tree-id3016 . -1) (undo-tree-id3017 . -1) (undo-tree-id3018 . -1) (undo-tree-id3019 . -1) (undo-tree-id3020 . -1) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3027 . -1) (undo-tree-id3028 . -1) (undo-tree-id3029 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5689) (undo-tree-id3030 . -1) (undo-tree-id3031 . -1) (undo-tree-id3032 . -1) (undo-tree-id3033 . -1) (undo-tree-id3034 . -1) (undo-tree-id3035 . -1) (undo-tree-id3036 . -1) (undo-tree-id3037 . -1) (undo-tree-id3038 . -1) (undo-tree-id3039 . -1) (undo-tree-id3040 . -1) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3047 . -1) (undo-tree-id3048 . -1) (undo-tree-id3049 . -1) (undo-tree-id3050 . -1) (undo-tree-id3051 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5690) (undo-tree-id3052 . -1) (undo-tree-id3053 . -1) (undo-tree-id3054 . -1) (undo-tree-id3055 . -1) (undo-tree-id3056 . -1) (undo-tree-id3057 . -1) (undo-tree-id3058 . -1) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3065 . -1) (undo-tree-id3066 . -1) (undo-tree-id3067 . -1) (undo-tree-id3068 . -1) (undo-tree-id3069 . -1) (undo-tree-id3070 . -1) (undo-tree-id3071 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5691) (undo-tree-id3072 . -1) (undo-tree-id3073 . -1) (undo-tree-id3074 . -1) (undo-tree-id3075 . -1) (undo-tree-id3076 . -1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -1) (undo-tree-id3079 . -1) (undo-tree-id3080 . -1) (undo-tree-id3081 . -1) (undo-tree-id3082 . -1) (undo-tree-id3083 . -1) (undo-tree-id3084 . -1) (undo-tree-id3085 . -1) (undo-tree-id3086 . -1) (undo-tree-id3087 . -1) (undo-tree-id3088 . -1) (undo-tree-id3089 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -5692) (undo-tree-id3090 . -1) (undo-tree-id3091 . -1) (undo-tree-id3092 . -1) (undo-tree-id3093 . -1) (undo-tree-id3094 . -1) (undo-tree-id3095 . -1) (undo-tree-id3096 . -1) (undo-tree-id3097 . -1) (undo-tree-id3098 . -1) (undo-tree-id3099 . -1) (undo-tree-id3100 . -1) (undo-tree-id3101 . -1) (undo-tree-id3102 . -1) (undo-tree-id3103 . -1) (undo-tree-id3104 . -1) (undo-tree-id3105 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -5693) (undo-tree-id3106 . -1) (undo-tree-id3107 . -1) (undo-tree-id3108 . -1) (undo-tree-id3109 . -1) (undo-tree-id3110 . -1) (undo-tree-id3111 . -1) (undo-tree-id3112 . -1) (undo-tree-id3113 . -1) (undo-tree-id3114 . -1) (undo-tree-id3115 . -1) (undo-tree-id3116 . -1) (undo-tree-id3117 . -1) (undo-tree-id3118 . -1) (undo-tree-id3119 . -1) (#("," 0 1 (fontified t face font-lock-string-face)) . -5694) (undo-tree-id3120 . -1) (undo-tree-id3121 . -1) (undo-tree-id3122 . -1) (undo-tree-id3123 . -1) (undo-tree-id3124 . -1) (undo-tree-id3125 . -1) (undo-tree-id3126 . -1) (undo-tree-id3127 . -1) (undo-tree-id3128 . -1) (undo-tree-id3129 . -1) (undo-tree-id3130 . -1) (undo-tree-id3131 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5695) (undo-tree-id3132 . -1) (undo-tree-id3133 . -1) (undo-tree-id3134 . -1) (undo-tree-id3135 . -1) (undo-tree-id3136 . -1) (undo-tree-id3137 . -1) (undo-tree-id3138 . -1) (undo-tree-id3139 . -1) (undo-tree-id3140 . -1) (undo-tree-id3141 . -1) 5696 (t 25258 5310 835563 129000)) nil (25258 5321 456167 482000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) face font-lock-variable-name-face)) . -5581) (undo-tree-id3142 . -1) (undo-tree-id3143 . -1) (undo-tree-id3144 . -1) (undo-tree-id3145 . -1) (undo-tree-id3146 . -1) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -5582) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3151 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3154 . -1) (undo-tree-id3155 . -1) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -5583) (undo-tree-id3156 . -1) (undo-tree-id3157 . -1) (undo-tree-id3158 . -1) (undo-tree-id3159 . -1) (undo-tree-id3160 . -1) (undo-tree-id3161 . -1) (undo-tree-id3162 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5584) (undo-tree-id3163 . -1) (undo-tree-id3164 . -1) (undo-tree-id3165 . -1) (undo-tree-id3166 . -1) (undo-tree-id3167 . -1) (undo-tree-id3168 . -1) (undo-tree-id3169 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5585) (undo-tree-id3170 . -1) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3175 . -1) (undo-tree-id3176 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5586) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3179 . -1) (undo-tree-id3180 . -1) (undo-tree-id3181 . -1) (undo-tree-id3182 . -1) (undo-tree-id3183 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -5587) (undo-tree-id3184 . -1) (undo-tree-id3185 . -1) (undo-tree-id3186 . -1) (undo-tree-id3187 . -1) (undo-tree-id3188 . -1) (undo-tree-id3189 . -1) (undo-tree-id3190 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -5588) (undo-tree-id3191 . -1) (undo-tree-id3192 . -1) (undo-tree-id3193 . -1) (undo-tree-id3194 . -1) (undo-tree-id3195 . -1) (undo-tree-id3196 . -1) (undo-tree-id3197 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5589) (undo-tree-id3198 . -1) (undo-tree-id3199 . -1) (undo-tree-id3200 . -1) (undo-tree-id3201 . -1) (undo-tree-id3202 . -1) (undo-tree-id3203 . -1) (undo-tree-id3204 . -1) (#("}" 0 1 (fontified t face font-lock-variable-name-face)) . -5590) (undo-tree-id3205 . -1) (undo-tree-id3206 . -1) (undo-tree-id3207 . -1) (undo-tree-id3208 . -1) (undo-tree-id3209 . -1) (undo-tree-id3210 . -1) (undo-tree-id3211 . -1) (#("," 0 1 (fontified t face font-lock-string-face)) . -5591) (undo-tree-id3212 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5592) (undo-tree-id3213 . -1) 5593 (t 25258 5321 471635 83000)) nil (25258 5328 720680 166000) 0 nil])
([nil nil ((5367 . 5368) (t 25258 5328 739684 33000)) nil (25258 5420 538783 92000) 0 nil])
([nil nil ((5367 . 5371)) nil (25258 5420 538780 838000) 0 nil])
([nil nil ((5368 . 5369) (5367 . 5369) (#("\"" 0 1 (fontified nil face font-lock-variable-name-face syntax-table (15))) . -5367) (5367 . 5368)) nil (25258 5420 538778 683000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -5350) (undo-tree-id3223 . -1) (undo-tree-id3224 . -1) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (#("#" 0 1 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-variable-name-face)) . -5351) (undo-tree-id3228 . -1) (undo-tree-id3229 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -5352) (undo-tree-id3233 . -1) (undo-tree-id3234 . -1) (undo-tree-id3235 . -1) (undo-tree-id3236 . -1) (undo-tree-id3237 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -5353) (undo-tree-id3238 . -1) (undo-tree-id3239 . -1) (undo-tree-id3240 . -1) (undo-tree-id3241 . -1) (undo-tree-id3242 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5354) (undo-tree-id3243 . -1) (undo-tree-id3244 . -1) (undo-tree-id3245 . -1) (undo-tree-id3246 . -1) (undo-tree-id3247 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5355) (undo-tree-id3248 . -1) (undo-tree-id3249 . -1) (undo-tree-id3250 . -1) (undo-tree-id3251 . -1) (undo-tree-id3252 . -1) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -5356) (undo-tree-id3253 . -1) (undo-tree-id3254 . -1) (undo-tree-id3255 . -1) (undo-tree-id3256 . -1) (undo-tree-id3257 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5357) (undo-tree-id3258 . -1) (undo-tree-id3259 . -1) (undo-tree-id3260 . -1) (undo-tree-id3261 . -1) (undo-tree-id3262 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -5358) (undo-tree-id3263 . -1) (undo-tree-id3264 . -1) (undo-tree-id3265 . -1) (undo-tree-id3266 . -1) (undo-tree-id3267 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -5359) (undo-tree-id3268 . -1) (undo-tree-id3269 . -1) (undo-tree-id3270 . -1) (undo-tree-id3271 . -1) (undo-tree-id3272 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5360) (undo-tree-id3273 . -1) (undo-tree-id3274 . -1) (undo-tree-id3275 . -1) (undo-tree-id3276 . -1) (undo-tree-id3277 . -1) (#("." 0 1 (fontified t face font-lock-variable-name-face)) . -5361) (undo-tree-id3278 . -1) (undo-tree-id3279 . -1) (undo-tree-id3280 . -1) (undo-tree-id3281 . -1) (undo-tree-id3282 . -1) (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -5362) (undo-tree-id3283 . -1) (undo-tree-id3284 . -1) (undo-tree-id3285 . -1) (undo-tree-id3286 . -1) (undo-tree-id3287 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5363) (undo-tree-id3288 . -1) (undo-tree-id3289 . -1) (undo-tree-id3290 . -1) (undo-tree-id3291 . -1) (undo-tree-id3292 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -5364) (undo-tree-id3293 . -1) (undo-tree-id3294 . -1) (undo-tree-id3295 . -1) (undo-tree-id3296 . -1) (undo-tree-id3297 . -1) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -5365) (undo-tree-id3298 . -1) (undo-tree-id3299 . -1) (undo-tree-id3300 . -1) (undo-tree-id3301 . -1) (undo-tree-id3302 . -1) (#("}" 0 1 (fontified t face font-lock-variable-name-face)) . -5366) (undo-tree-id3303 . -1) (undo-tree-id3304 . -1) (undo-tree-id3305 . -1) (undo-tree-id3306 . -1) (undo-tree-id3307 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -5367) (undo-tree-id3308 . -1) (#(" " 0 1 (fontified t)) . -5368) (undo-tree-id3309 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -5369) (undo-tree-id3310 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5370) (undo-tree-id3311 . -1) 5371) nil (25258 5420 538759 127000) 0 nil])
([nil nil ((5351 . 5355) (5350 . 5352) (#("\"" 0 1 (fontified nil face font-lock-string-face syntax-table (15))) . -5350) (5350 . 5351)) nil (25258 5420 538536 989000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t face font-lock-string-face)) . -5356) (undo-tree-id3221 . -1) (#(">" 0 1 (fontified t face font-lock-string-face)) . -5357) (undo-tree-id3222 . -1) 5358) nil (25258 5420 538533 171000) 0 nil])
([nil nil ((5356 . 5368)) nil (25258 5420 538527 140000) 0 nil])
([nil nil ((5368 . 5370)) nil (25258 5420 538525 337000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -5372) (undo-tree-id3220 . -1) 5373) nil (25258 5420 538523 142000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -5355) (undo-tree-id3219 . -1) 5356) nil (25258 5420 538518 343000) 0 nil])
([nil nil ((5368 . 5376)) nil (25258 5420 538513 805000) 0 nil])
([nil nil ((5376 . 5381)) nil (25258 5420 538511 30000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -5376) (undo-tree-id3214 . -1) (#("b" 0 1 (fontified t)) . -5377) (undo-tree-id3215 . -1) (#("o" 0 1 (fontified t)) . -5378) (undo-tree-id3216 . -1) (#("d" 0 1 (fontified t)) . -5379) (undo-tree-id3217 . -1) (#("y" 0 1 (fontified t)) . -5380) (undo-tree-id3218 . -1) 5381) nil (25258 5420 538501 311000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-type-face)) . -5356) (undo-tree-id3322 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -5357) (undo-tree-id3323 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -5358) (undo-tree-id3324 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -5359) (undo-tree-id3325 . -1) (#("." 0 1 (fontified t)) . -5360) (undo-tree-id3326 . -1) (#("d" 0 1 (fontified t)) . -5361) (undo-tree-id3327 . -1) (#("e" 0 1 (fontified t)) . -5362) (undo-tree-id3328 . -1) (#("c" 0 1 (fontified t)) . -5363) (undo-tree-id3329 . -1) (#("o" 0 1 (fontified t)) . -5364) (undo-tree-id3330 . -1) (#("d" 0 1 (fontified t)) . -5365) (undo-tree-id3331 . -1) (#("e" 0 1 (fontified t)) . -5366) (undo-tree-id3332 . -1) (#("(" 0 1 (fontified t)) . -5367) (undo-tree-id3333 . -1) (#("r" 0 1 (fontified t)) . -5368) (undo-tree-id3334 . -1) (#("e" 0 1 (fontified t)) . -5369) (undo-tree-id3335 . -1) (#("s" 0 1 (fontified t)) . -5370) (undo-tree-id3336 . -1) (#("p" 0 1 (fontified t)) . -5371) (undo-tree-id3337 . -1) (#("o" 0 1 (fontified t)) . -5372) (undo-tree-id3338 . -1) (#("n" 0 1 (fontified t)) . -5373) (undo-tree-id3339 . -1) (#("s" 0 1 (fontified t)) . -5374) (undo-tree-id3340 . -1) (#("e" 0 1 (fontified t)) . -5375) (undo-tree-id3341 . -1) (#(")" 0 1 (fontified t)) . -5376) (undo-tree-id3342 . -1) (undo-tree-id3343 . 1) (undo-tree-id3344 . -1) 5377 (t 25258 5420 556288 209000)) nil (25258 5472 241883 137000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t face font-lock-type-face)) . -5355) (undo-tree-id3321 . -1) 5356) nil (25258 5472 241833 353000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -5351) (undo-tree-id3318 . -1) (#("<" 0 1 (fontified t)) . -5352) (undo-tree-id3319 . -1) (#(">" 0 1 (fontified t)) . -5353) (undo-tree-id3320 . -1) 5354) nil (25258 5472 241828 454000) 0 nil])
([nil nil ((#("}" 0 1 (fontified nil)) . -5353) (undo-tree-id3314 . -1) (undo-tree-id3315 . -1) (5353 . 5354) (#("}" 0 1 (fontified nil face font-lock-variable-name-face)) . -5353) (undo-tree-id3316 . -1) (undo-tree-id3317 . -1) (5353 . 5354) (5350 . 5354)) nil (25258 5472 241773 671000) 0 nil])
([nil nil ((5353 . 5364)) nil (25258 5472 241763 542000) 0 nil])
([nil nil ((5365 . 5366)) nil (25258 5472 241761 829000) 0 nil])
([nil nil ((5370 . 5371) (5366 . 5371)) nil (25258 5472 241759 845000) 0 nil])
([nil nil ((#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -5370) (undo-tree-id3313 . -1) 5371) nil (25258 5472 241756 819000) 0 nil])
([nil nil ((5370 . 5379)) nil (25258 5472 241752 20000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5378) (undo-tree-id3312 . -1) 5379) nil (25258 5472 241747 622000) 0 nil])
([nil nil ((5378 . 5383)) nil (25258 5472 241727 164000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5370) (undo-tree-id3345 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -5371) (undo-tree-id3346 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -5372) (undo-tree-id3347 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5373) (undo-tree-id3348 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -5374) (undo-tree-id3349 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -5375) (undo-tree-id3350 . -1) 5376 (t 25258 5472 260617 944000)) nil (25258 5483 964370 265000) 0 nil])
([nil nil ((5351 . 5368) (t 25258 5483 980691 739000)) nil (25258 5501 373222 633000) 0 nil])
([nil nil ((5537 . 5544) (t 25258 5501 392800 758000)) nil (25258 5515 286452 995000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face font-lock-string-face)) . -5538) (undo-tree-id3351 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5539) (undo-tree-id3352 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5540) (undo-tree-id3353 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -5541) (undo-tree-id3354 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -5542) (undo-tree-id3355 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -5543) (undo-tree-id3356 . -1) 5544) nil (25258 5515 286447 675000) 0 nil])
([nil nil ((5538 . 5543)) nil (25258 5515 286422 107000) 0 nil])
([nil nil ((6905 . 6907) (t 25258 5515 332887 523000)) nil (25258 5764 285787 779000) 0 nil])
([nil nil ((6906 . 6907)) nil (25258 5764 285785 255000) 0 nil])
([nil nil ((#("  " 0 2 (fontified nil)) . 6902) (6902 . 6904) (6902 . 6903) (#("  " 0 2 (fontified nil)) . 6901) (6901 . 6903) (6901 . 6902)) nil (25258 5764 285782 310000) 0 nil])
([nil nil ((6903 . 6905) (#("  " 0 2 (fontified nil)) . 6902) (6902 . 6904) (6902 . 6903)) nil (25258 5764 285777 491000) 0 nil])
([nil nil ((6903 . 6905) (#("  " 0 2 (fontified nil)) . 6902) (6902 . 6904) (6902 . 6903)) nil (25258 5764 285773 734000) 0 nil])
([nil nil ((6903 . 6905) (#("  " 0 2 (fontified nil)) . 6902) (6902 . 6904) (6902 . 6903)) nil (25258 5764 285770 38000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7189 . 7190) (nil fontified nil 7187 . 7190) (nil fontified nil 7184 . 7187) (nil fontified nil 7181 . 7184) (nil fontified nil 7147 . 7181) (nil fontified nil 7142 . 7147) (nil fontified nil 7135 . 7142) (nil fontified nil 7131 . 7135) (nil fontified nil 7125 . 7131) (nil fontified nil 7124 . 7125) (nil fontified nil 7102 . 7124) (nil fontified nil 7101 . 7102) (nil fontified nil 7074 . 7101) (nil fontified nil 7073 . 7074) (nil fontified nil 7066 . 7073) (nil fontified nil 7060 . 7066) (nil fontified nil 7053 . 7060) (nil fontified nil 7051 . 7053) (nil fontified nil 7011 . 7051) (nil fontified nil 7009 . 7011) (nil fontified nil 6970 . 7009) (nil fontified nil 6968 . 6970) (nil fontified nil 6963 . 6968) (nil fontified nil 6961 . 6963) (nil fontified nil 6935 . 6961) (nil fontified nil 6910 . 6935) (nil fontified nil 6909 . 6910) (nil fontified nil 6905 . 6909) (6905 . 7190)) nil (25258 5764 285763 536000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . 7009) (#("_" 0 1 (fontified t face font-lock-comment-face)) . 7009) (#("s" 0 1 (fontified t)) . 7009) (#("u" 0 1 (fontified t)) . 7009) (#("t" 0 1 (fontified t)) . 7009) (#("a" 0 1 (fontified t)) . 7009) (#("t" 0 1 (fontified t)) . 7009) (#("s" 0 1 (fontified t)) . 7009) (#("_" 0 1 (fontified t face font-lock-comment-face)) . 7009) (#("s" 0 1 (fontified t)) . 7009) (#("m" 0 1 (fontified t)) . 7009) (#("s" 0 1 (fontified t)) . 7009) (#("_" 0 1 (fontified t face font-lock-comment-face)) . 7009) (#("k" 0 1 (fontified t)) . 7009) (#("c" 0 1 (fontified t)) . 7009) (#("e" 0 1 (fontified t)) . 7009) (#("h" 0 1 (fontified t)) . 7009) (#("c" 0 1 (fontified t)) . 7009) (#(" " 0 1 (fontified t)) . 7009) (#("r" 0 1 (fontified t)) . 7009) (#("o" 0 1 (fontified t face font-lock-keyword-face)) . 7009)) nil (25258 5764 285743 270000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7009) (#(")" 0 1 (fontified t)) . 7009) (#("e" 0 1 (fontified t)) . 7009) (#("s" 0 1 (fontified t)) . 7009) (#("n" 0 1 (fontified t)) . 7009) (#("o" 0 1 (fontified t)) . 7009) (#("p" 0 1 (fontified t)) . 7009) (#("s" 0 1 (fontified t)) . 7009) (#("e" 0 1 (fontified t)) . 7009) (#("r" 0 1 (fontified t)) . 7009) (#("_" 0 1 (fontified t face font-lock-comment-face)) . 7009) (#("r" 0 1 (fontified t)) . 7009) (#("e" 0 1 (fontified t)) . 7009) (#("v" 0 1 (fontified t)) . 7009) (#("r" 0 1 (fontified t)) . 7009) (#("e" 0 1 (fontified t)) . 7009) (#("s" 0 1 (fontified t)) . 7009) (#("(" 0 1 (fontified t)) . 7009) (#("e" 0 1 (fontified t)) . 7009) (#("d" 0 1 (fontified t)) . 7009) (#("o" 0 1 (fontified t)) . 7009)) nil (25258 5764 285726 780000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -7113) (undo-tree-id3432 . -1) (#("e" 0 1 (fontified t)) . -7114) (undo-tree-id3433 . -1) (#("r" 0 1 (fontified t)) . -7115) (undo-tree-id3434 . -1) (#("v" 0 1 (fontified t)) . -7116) (undo-tree-id3435 . -1) (#("e" 0 1 (fontified t)) . -7117) (undo-tree-id3436 . -1) (#("r" 0 1 (fontified t)) . -7118) (undo-tree-id3437 . -1) (#("_" 0 1 (fontified t)) . -7119) (undo-tree-id3438 . -1) (#("r" 0 1 (fontified t)) . -7120) (undo-tree-id3439 . -1) (#("e" 0 1 (fontified t)) . -7121) (undo-tree-id3440 . -1) (#("s" 0 1 (fontified t)) . -7122) (undo-tree-id3441 . -1) (#("p" 0 1 (fontified t)) . -7123) (undo-tree-id3442 . -1) (#("o" 0 1 (fontified t)) . -7124) (undo-tree-id3443 . -1) (#("n" 0 1 (fontified t)) . -7125) (undo-tree-id3444 . -1) (#("s" 0 1 (fontified t)) . -7126) (undo-tree-id3445 . -1) (#("e" 0 1 (fontified t)) . -7127) (undo-tree-id3446 . -1) (#("." 0 1 (fontified t)) . -7128) (undo-tree-id3447 . -1) (#("b" 0 1 (fontified t)) . -7129) (undo-tree-id3448 . -1) (#("o" 0 1 (fontified t)) . -7130) (undo-tree-id3449 . -1) (#("d" 0 1 (fontified t)) . -7131) (undo-tree-id3450 . -1) (#("y" 0 1 (fontified t)) . -7132) (undo-tree-id3451 . -1) (#(")" 0 1 (fontified t)) . -7133) (undo-tree-id3452 . -1) (undo-tree-id3453 . 1) (undo-tree-id3454 . -1) 7134) nil (25258 5764 285708 217000) 0 nil])
([nil nil ((#("J" 0 1 (fontified t face font-lock-type-face)) . -7100) (undo-tree-id3419 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -7101) (undo-tree-id3420 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -7102) (undo-tree-id3421 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -7103) (undo-tree-id3422 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -7104) (undo-tree-id3423 . -1) (#("." 0 1 (fontified t)) . -7105) (undo-tree-id3424 . -1) (#("d" 0 1 (fontified t)) . -7106) (undo-tree-id3425 . -1) (#("e" 0 1 (fontified t)) . -7107) (undo-tree-id3426 . -1) (#("c" 0 1 (fontified t)) . -7108) (undo-tree-id3427 . -1) (#("o" 0 1 (fontified t)) . -7109) (undo-tree-id3428 . -1) (#("d" 0 1 (fontified t)) . -7110) (undo-tree-id3429 . -1) (#("e" 0 1 (fontified t)) . -7111) (undo-tree-id3430 . -1) (#("(" 0 1 (fontified t)) . -7112) (undo-tree-id3431 . -1) 7113) nil (25258 5764 285654 992000) 0 nil])
([nil nil ((7100 . 7103)) nil (25258 5764 285625 950000) 0 nil])
([nil nil ((#("B" 0 1 (fontified t face font-lock-string-face)) . -7032) (undo-tree-id3398 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -7033) (undo-tree-id3399 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -7034) (undo-tree-id3400 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -7035) (undo-tree-id3401 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -7036) (undo-tree-id3402 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -7037) (undo-tree-id3403 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -7038) (undo-tree-id3404 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7039) (undo-tree-id3405 . -1) (#("S" 0 1 (fontified t face font-lock-string-face)) . -7040) (undo-tree-id3406 . -1) (#("M" 0 1 (fontified t face font-lock-string-face)) . -7041) (undo-tree-id3407 . -1) (#("S" 0 1 (fontified t face font-lock-string-face)) . -7042) (undo-tree-id3408 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7043) (undo-tree-id3409 . -1) (#("D" 0 1 (fontified t face font-lock-string-face)) . -7044) (undo-tree-id3410 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -7045) (undo-tree-id3411 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -7046) (undo-tree-id3412 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -7047) (undo-tree-id3413 . -1) (#("v" 0 1 (fontified t face font-lock-string-face)) . -7048) (undo-tree-id3414 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -7049) (undo-tree-id3415 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -7050) (undo-tree-id3416 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -7051) (undo-tree-id3417 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7052) (undo-tree-id3418 . -1) 7053) nil (25258 5764 285615 642000) 0 nil])
([nil nil ((7032 . 7046)) nil (25258 5764 285569 129000) 0 nil])
([nil nil ((#("E" 0 1 (fontified t face font-lock-string-face)) . -7046) (undo-tree-id3392 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -7047) (undo-tree-id3393 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -7048) (undo-tree-id3394 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -7049) (undo-tree-id3395 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -7050) (undo-tree-id3396 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7051) (undo-tree-id3397 . -1) 7052) nil (25258 5764 285564 771000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -7048) (undo-tree-id3369 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -7049) (undo-tree-id3370 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -7050) (undo-tree-id3371 . -1) (#("v" 0 1 (fontified t face font-lock-variable-name-face)) . -7051) (undo-tree-id3372 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -7052) (undo-tree-id3373 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -7053) (undo-tree-id3374 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -7054) (undo-tree-id3375 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -7055) (undo-tree-id3376 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -7056) (undo-tree-id3377 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -7057) (undo-tree-id3378 . -1) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -7058) (undo-tree-id3379 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -7059) (undo-tree-id3380 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -7060) (undo-tree-id3381 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -7061) (undo-tree-id3382 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -7062) (undo-tree-id3383 . -1) (#("." 0 1 (fontified t face font-lock-variable-name-face)) . -7063) (undo-tree-id3384 . -1) (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -7064) (undo-tree-id3385 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -7065) (undo-tree-id3386 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -7066) (undo-tree-id3387 . -1) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -7067) (undo-tree-id3388 . -1) (#("}" 0 1 (fontified t face font-lock-variable-name-face)) . -7068) (undo-tree-id3389 . -1) (undo-tree-id3390 . 1) (undo-tree-id3391 . -1) 7069) nil (25258 5764 285499 274000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -7045) (undo-tree-id3366 . -1) (#("#" 0 1 (elixir-interpolation (t #<marker at 7483 in medusa_drissly_adapter.ex> #<marker at 7483 in medusa_drissly_adapter.ex> #<marker at 7483 in medusa_drissly_adapter.ex> #<marker at 7483 in medusa_drissly_adapter.ex>) fontified t face font-lock-variable-name-face)) . -7046) (undo-tree-id3367 . -1) (#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -7047) (undo-tree-id3368 . -1) 7048) nil (25258 5764 285448 263000) 0 nil])
([nil nil ((7049 . 7050) (nil face font-lock-string-face 7048 . 7049) (nil fontified nil 7048 . 7049) (7048 . 7049) (#("\"" 0 1 (face font-lock-string-face fontified nil syntax-table (15))) . -7048) (7048 . 7049) (#("\"" 0 1 (fontified nil syntax-table (15))) . -7047) (7047 . 7048) (#("\"" 0 1 (fontified nil face font-lock-string-face syntax-table (15))) . -7047) (7045 . 7048)) nil (25258 5764 285438 305000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil syntax-table (15) face font-lock-string-face)) . -7048) (undo-tree-id3365 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . 7049)) nil (25258 5764 285431 593000) 0 nil])
([nil nil ((7049 . 7050) (nil face font-lock-string-face 7048 . 7049) (nil fontified nil 7048 . 7049) (7048 . 7049) (#("\"" 0 1 (face font-lock-string-face fontified nil syntax-table (15))) . -7048) (7048 . 7049)) nil (25258 5764 285426 704000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil syntax-table (15) face font-lock-string-face)) . -7047) (undo-tree-id3364 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . 7048)) nil (25258 5764 285422 6000) 0 nil])
([nil nil ((7049 . 7050) (nil face font-lock-string-face 7048 . 7049) (nil fontified nil 7048 . 7049) (7048 . 7049) (#("\"" 0 1 (face font-lock-string-face fontified nil syntax-table (15))) . -7048) (7048 . 7049) (#("\"" 0 1 (fontified nil syntax-table (15))) . -7047) (7047 . 7048) (#("\"" 0 1 (fontified nil face font-lock-string-face syntax-table (15))) . -7047) (7047 . 7048)) nil (25258 5764 285416 75000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil syntax-table (15) face font-lock-string-face)) . -7047) (undo-tree-id3363 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . 7048)) nil (25258 5764 285409 303000) 0 nil])
([nil nil ((7047 . 7063)) nil (25258 5764 285404 875000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-string-face)) . -7060) (undo-tree-id3360 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -7061) (undo-tree-id3361 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -7062) (undo-tree-id3362 . -1) 7063) nil (25258 5764 285401 499000) 0 nil])
([nil nil ((7060 . 7079)) nil (25258 5764 285392 804000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-string-face)) . -7076) (undo-tree-id3357 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -7077) (undo-tree-id3358 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -7078) (undo-tree-id3359 . -1) 7079) nil (25258 5764 285388 326000) 0 nil])
([nil nil ((7076 . 7084)) nil (25258 5764 285365 425000) 0 nil])
([nil nil ((7084 . 7090)) nil (25258 5764 285363 451000) 0 nil])
([nil nil ((7047 . 7057)) nil (25258 5764 285360 536000) 0 nil])
([nil nil ((7078 . 7079)) nil (25258 5764 285353 243000) 0 nil])
([nil nil ((#("else
      ok:" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 14 (fontified t)) . -7108) (undo-tree-id3455 . -5) (undo-tree-id3456 . -5) (undo-tree-id3457 . -14) (undo-tree-id3458 . -5) (undo-tree-id3459 . -14) (undo-tree-id3460 . -5) 7122 (t 25258 5764 304301 439000)) nil (25258 5778 545935 393000) 0 nil])
([nil nil (("


" . -7574) (#("


" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . -7021) (#("  
  
" 0 2 (fontified t) 2 3 (fontified t) 3 5 (fontified t) 5 6 (fontified t)) . -7016) (undo-tree-id3478 . -3) (undo-tree-id3479 . -3) (undo-tree-id3480 . -6) (undo-tree-id3481 . -6) (#("    
" 0 4 (fontified t) 4 5 (fontified t)) . -7002) (undo-tree-id3482 . -4) (undo-tree-id3483 . -5) (undo-tree-id3484 . -5) (undo-tree-id3485 . -5) (undo-tree-id3486 . -4) (undo-tree-id3487 . -4) (undo-tree-id3488 . -4) (undo-tree-id3489 . -4) (undo-tree-id3490 . -4) (#("
" 0 1 (fontified t)) . -6801) (undo-tree-id3491 . -1) (undo-tree-id3492 . -1) (#("
" 0 1 (fontified t)) . -6410) (#("	    
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . -5689) (5262 . 5688) (#("            case status_code do
                  400 -> Logger.error(\"Drissly Response: Codigo de error: #{status_code} , #{message}\"   )
                  401 -> Logger.error(\"#{get_time()} Drissly Response: #{response.body}\")
                  403 -> Logger.error(\"Drissly Error: Access Forbidden\")
                  500 -> Logger.error(\"Drissly Error: Tipo de error: #{error_message}\")
                  502 -> Logger.error(\"Drissly Error: #{error_message}\")
                  _   -> response
	    end
 end   
  
  
" 0 4 (fontified t) 4 12 (fontified t) 12 16 (fontified t face font-lock-keyword-face) 16 29 (fontified t) 29 31 (fontified t face font-lock-keyword-face) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 50 (fontified t) 50 57 (fontified t) 57 63 (fontified t face font-lock-type-face) 63 70 (fontified t) 70 71 (fontified t syntax-table (15) face font-lock-string-face) 71 106 (fontified t face font-lock-string-face) 106 107 (fontified t elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) face font-lock-variable-name-face) 107 119 (fontified t face font-lock-variable-name-face) 119 120 (fontified t face font-lock-variable-name-face) 120 123 (fontified t face font-lock-string-face) 123 124 (fontified t elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) face font-lock-variable-name-face) 124 133 (fontified t face font-lock-variable-name-face) 133 134 (fontified t syntax-table (15) face font-lock-string-face) 134 135 (fontified t) 135 136 (fontified t) 136 137 (fontified t) 137 139 (fontified t) 139 143 (fontified t) 143 157 (fontified t) 157 164 (fontified t) 164 170 (fontified t face font-lock-type-face) 170 177 (fontified t) 177 178 (syntax-table (15) fontified t face font-lock-string-face) 178 179 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 179 191 (fontified t face font-lock-variable-name-face) 191 210 (fontified t face font-lock-string-face) 210 211 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 211 226 (fontified t face font-lock-variable-name-face) 226 227 (syntax-table (15) fontified t face font-lock-string-face) 227 229 (fontified t) 229 230 (fontified t) 230 233 (fontified t) 233 247 (fontified t) 247 253 (fontified t) 253 254 (fontified t) 254 260 (fontified t face font-lock-type-face) 260 266 (fontified t) 266 267 (fontified t) 267 268 (fontified t syntax-table (15) face font-lock-string-face) 268 299 (fontified t face font-lock-string-face) 299 300 (rear-nonsticky t fontified t syntax-table (15) face font-lock-string-face) 300 301 (fontified t) 301 302 (fontified t) 302 306 (fontified t) 306 320 (fontified t) 320 327 (fontified t) 327 333 (fontified t face font-lock-type-face) 333 339 (fontified t) 339 340 (fontified t) 340 341 (syntax-table (15) fontified t face font-lock-string-face) 341 356 (fontified t face font-lock-string-face) 356 369 (fontified t face font-lock-string-face) 369 371 (fontified t face font-lock-string-face) 371 372 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 372 381 (fontified t face font-lock-variable-name-face) 381 386 (fontified t face font-lock-variable-name-face) 386 387 (rear-nonsticky t fontified t face font-lock-variable-name-face) 387 388 (rear-nonsticky t syntax-table (15) fontified t face font-lock-string-face) 388 389 (fontified t) 389 390 (fontified t) 390 393 (fontified t) 393 408 (fontified t) 408 415 (fontified t) 415 419 (fontified t face font-lock-type-face) 419 421 (fontified t face font-lock-type-face) 421 423 (fontified t) 423 428 (fontified t) 428 429 (syntax-table (15) fontified t face font-lock-string-face) 429 444 (fontified t face font-lock-string-face) 444 445 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 445 454 (fontified t face font-lock-variable-name-face) 454 460 (fontified t face font-lock-variable-name-face) 460 461 (syntax-table (15) fontified t face font-lock-string-face) 461 462 (fontified t) 462 463 (fontified t) 463 464 (fontified t) 464 467 (fontified t) 467 471 (fontified t) 471 475 (fontified t) 475 481 (fontified t) 481 482 (fontified t face font-lock-constant-face) 482 488 (fontified t) 488 496 (fontified t) 496 497 (fontified t) 497 500 (fontified t) 500 502 (fontified t) 502 505 (fontified t face font-lock-keyword-face) 505 506 (fontified t) 506 507 (fontified t) 507 510 (fontified t face font-lock-keyword-face) 510 513 (fontified t) 513 514 (fontified t) 514 516 (fontified t) 516 517 (fontified t) 517 519 (fontified t) 519 520 (fontified t)) . -5262) (undo-tree-id3493 . -253) (undo-tree-id3494 . -253) (undo-tree-id3495 . -253) (undo-tree-id3496 . -253) (undo-tree-id3497 . -253) (undo-tree-id3498 . -253) (undo-tree-id3499 . -253) (undo-tree-id3500 . -253) (undo-tree-id3501 . -327) (undo-tree-id3502 . -327) (undo-tree-id3503 . -327) (undo-tree-id3504 . -327) (undo-tree-id3505 . -327) (undo-tree-id3506 . -327) (undo-tree-id3507 . -327) (undo-tree-id3508 . -327) (undo-tree-id3509 . -340) (undo-tree-id3510 . -302) (undo-tree-id3511 . -71) (undo-tree-id3512 . -88) (undo-tree-id3513 . -71) (undo-tree-id3514 . -88) (undo-tree-id3515 . -71) (undo-tree-id3516 . -88) (undo-tree-id3517 . -71) (undo-tree-id3518 . -88) (undo-tree-id3519 . -496) (undo-tree-id3520 . -496) (undo-tree-id3521 . -496) (undo-tree-id3522 . -496) (undo-tree-id3523 . -429) (undo-tree-id3524 . -429) (undo-tree-id3525 . -429) (undo-tree-id3526 . -429) (undo-tree-id3527 . -429) (undo-tree-id3528 . -429) (undo-tree-id3529 . -429) (undo-tree-id3530 . -429) (undo-tree-id3531 . -444) (undo-tree-id3532 . -444) (undo-tree-id3533 . -444) (undo-tree-id3534 . -444) (undo-tree-id3535 . -444) (undo-tree-id3536 . -460) (undo-tree-id3537 . -444) (undo-tree-id3538 . -460) (undo-tree-id3539 . -407) (undo-tree-id3540 . -444) (undo-tree-id3541 . -460) (undo-tree-id3542 . -444) (undo-tree-id3543 . -460) (undo-tree-id3544 . -463) (undo-tree-id3545 . -463) (undo-tree-id3546 . -463) (undo-tree-id3547 . -463) (undo-tree-id3548 . -463) (undo-tree-id3549 . -496) (undo-tree-id3550 . -463) (undo-tree-id3551 . -496) (undo-tree-id3552 . -496) (undo-tree-id3553 . -496) (undo-tree-id3554 . -496) (undo-tree-id3555 . -496) (undo-tree-id3556 . -463) (undo-tree-id3557 . -496) (undo-tree-id3558 . -463) (undo-tree-id3559 . -444) (undo-tree-id3560 . -463) (undo-tree-id3561 . -463) (undo-tree-id3562 . -463) (undo-tree-id3563 . -463) (undo-tree-id3564 . -463) (undo-tree-id3565 . -463) (undo-tree-id3566 . -463) (undo-tree-id3567 . -463) (undo-tree-id3568 . -463) (undo-tree-id3569 . -463) (undo-tree-id3570 . -463) (undo-tree-id3571 . -463) (undo-tree-id3572 . -429) (undo-tree-id3573 . -444) (undo-tree-id3574 . -429) (undo-tree-id3575 . -444) (undo-tree-id3576 . -444) (undo-tree-id3577 . -444) (undo-tree-id3578 . -444) (undo-tree-id3579 . -444) (undo-tree-id3580 . -444) (undo-tree-id3581 . -460) (undo-tree-id3582 . -444) (undo-tree-id3583 . -460) (undo-tree-id3584 . -463) (undo-tree-id3585 . -429) (undo-tree-id3586 . -356) (undo-tree-id3587 . -387) (undo-tree-id3588 . -356) (undo-tree-id3589 . -387) (undo-tree-id3590 . -496) (undo-tree-id3591 . -496) (undo-tree-id3592 . -496) (undo-tree-id3593 . -496) (undo-tree-id3594 . -496) (undo-tree-id3595 . -496) (undo-tree-id3596 . -496) (undo-tree-id3597 . -496) (undo-tree-id3598 . -496) (undo-tree-id3599 . -496) (undo-tree-id3600 . -496) (undo-tree-id3601 . -496) (undo-tree-id3602 . -341) (undo-tree-id3603 . -496) (undo-tree-id3604 . -488) (undo-tree-id3605 . -496) (undo-tree-id3606 . -488) (undo-tree-id3607 . -496) (undo-tree-id3608 . -488) (undo-tree-id3609 . -488) (undo-tree-id3610 . -488) (undo-tree-id3611 . -496) (undo-tree-id3612 . -488) (undo-tree-id3613 . -496) (undo-tree-id3614 . -444) (undo-tree-id3615 . -460) (undo-tree-id3616 . -444) (undo-tree-id3617 . -460) (undo-tree-id3618 . -356) (undo-tree-id3619 . -387) (undo-tree-id3620 . -356) (undo-tree-id3621 . -387) (undo-tree-id3622 . -88) (undo-tree-id3623 . -191) (undo-tree-id3624 . -88) (undo-tree-id3625 . -191) (undo-tree-id3626 . -106) (undo-tree-id3627 . -120) (undo-tree-id3628 . -106) (undo-tree-id3629 . -120) (undo-tree-id3630 . -123) (undo-tree-id3631 . -133) (undo-tree-id3632 . -123) (undo-tree-id3633 . -133) (undo-tree-id3634 . -178) (undo-tree-id3635 . -191) (undo-tree-id3636 . -178) (undo-tree-id3637 . -191) (undo-tree-id3638 . -210) (undo-tree-id3639 . -226) (undo-tree-id3640 . -210) (undo-tree-id3641 . -226) (undo-tree-id3642 . -371) (undo-tree-id3643 . -387) (undo-tree-id3644 . -371) (undo-tree-id3645 . -387) (undo-tree-id3646 . -444) (undo-tree-id3647 . -460) (undo-tree-id3648 . -444) (undo-tree-id3649 . -460) (undo-tree-id3650 . -281) (undo-tree-id3651 . -281) (undo-tree-id3652 . -488) (t 25258 5778 567041 783000)) nil (25258 5789 366470 842000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -6834) (undo-tree-id3461 . -1) (#("e" 0 1 (fontified t)) . -6835) (undo-tree-id3462 . -1) (#("r" 0 1 (fontified t)) . -6836) (undo-tree-id3463 . -1) (#("v" 0 1 (fontified t)) . -6837) (undo-tree-id3464 . -1) (#("e" 0 1 (fontified t)) . -6838) (undo-tree-id3465 . -1) (#("r" 0 1 (fontified t)) . -6839) (undo-tree-id3466 . -1) (#("_" 0 1 (fontified t)) . -6840) (undo-tree-id3467 . -1) (#("r" 0 1 (fontified t)) . -6841) (undo-tree-id3468 . -1) (#("e" 0 1 (fontified t)) . -6842) (undo-tree-id3469 . -1) (#("s" 0 1 (fontified t)) . -6843) (undo-tree-id3470 . -1) (#("p" 0 1 (fontified t)) . -6844) (undo-tree-id3471 . -1) (#("o" 0 1 (fontified t)) . -6845) (undo-tree-id3472 . -1) (#("n" 0 1 (fontified t)) . -6846) (undo-tree-id3473 . -1) (#("s" 0 1 (fontified t)) . -6847) (undo-tree-id3474 . -1) (#("e" 0 1 (fontified t)) . -6848) (undo-tree-id3475 . -1) (#("," 0 1 (fontified t)) . -6849) (undo-tree-id3476 . -1) (#(" " 0 1 (fontified t)) . -6850) (undo-tree-id3477 . -1) 6851) nil (25258 5789 366310 765000) 0 nil])
([nil nil ((#("    " 0 4 (fontified nil)) . 2479) (2479 . 2483) (2479 . 2480) (t 25258 5789 382108 231000)) nil (25258 5839 14076 525000) 0 nil])
([nil nil ((2480 . 2484) (#("    " 0 4 (fontified nil)) . 2479) (2479 . 2483) (2479 . 2480)) nil (25258 5839 14072 217000) 0 nil])
([nil nil ((2480 . 2484) (#("    " 0 4 (fontified nil)) . 2479) (2479 . 2483) (2479 . 2480)) nil (25258 5839 14067 939000) 0 nil])
([nil nil ((2478 . 2481)) nil (25258 5839 14064 72000) 0 nil])
([nil nil ((7000 . 7004) (#("      " 0 6 (fontified nil)) . 6999) (undo-tree-id3653 . -4) (7003 . 7005) (7003 . 7004)) nil (25258 5839 14060 706000) 0 nil])
([nil nil ((7000 . 7006) (#("      " 0 6 (fontified nil)) . 6999) (6999 . 7005) (6999 . 7000)) nil (25258 5839 14041 722000) 0 nil])
([nil nil ((7004 . 7008)) nil (25258 5839 14037 625000) 0 nil])
([nil nil ((7011 . 7015) (7008 . 7009)) nil (25258 5839 14034 48000) 0 nil])
([nil nil ((7015 . 7021)) nil (25258 5839 14025 994000) 0 nil])
([nil nil ((2480 . 2487) (t 25258 5839 38049 904000)) nil (25258 5860 646952 159000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -2486) (undo-tree-id3665 . -1) 2487) nil (25258 5860 646950 767000) 0 nil])
([nil nil ((2486 . 2503)) nil (25258 5860 646948 633000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2500) (undo-tree-id3662 . -1) (#("r" 0 1 (fontified t)) . -2501) (undo-tree-id3663 . -1) (#("e" 0 1 (fontified t)) . -2502) (undo-tree-id3664 . -1) 2503) nil (25258 5860 646946 659000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -2508) (2508 . 2509) (#(")" 0 1 (fontified nil)) . -2508) (2508 . 2509) (2500 . 2509)) nil (25258 5860 646942 412000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2511) (undo-tree-id3658 . -1) (undo-tree-id3659 . -1) (undo-tree-id3660 . -1) (undo-tree-id3661 . -1)) nil (25258 5860 646939 366000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 2511) (undo-tree-id3654 . -5) (undo-tree-id3655 . -5) (undo-tree-id3656 . -5) (undo-tree-id3657 . -5)) nil (25258 5860 646931 963000) 0 nil])
([nil nil (("
" . -7017) (2447 . 2511) (#("    phone_num = options[:phone] |> check_number_requirements() 
    
" 0 4 (fontified t) 4 13 (fontified t face font-lock-variable-name-face) 13 24 (fontified t) 24 30 (fontified t face elixir-atom-face) 30 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 64 (fontified t) 64 68 (fontified t) 68 69 (fontified t)) . -2447) (undo-tree-id3678 . -69) (undo-tree-id3679 . -69) (undo-tree-id3680 . -64) (undo-tree-id3681 . -64) (undo-tree-id3682 . -64) (undo-tree-id3683 . -69) (undo-tree-id3684 . -63) (undo-tree-id3685 . -64) (undo-tree-id3686 . -64) (undo-tree-id3687 . -64) (undo-tree-id3688 . -64) (undo-tree-id3689 . -64) (undo-tree-id3690 . -64) (t 25258 5860 660393 678000)) nil (25258 5869 157942 398000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2446) (undo-tree-id3670 . -1) (undo-tree-id3671 . -1) (undo-tree-id3672 . -1) (undo-tree-id3673 . -1) (undo-tree-id3674 . -1) (undo-tree-id3675 . -1) (undo-tree-id3676 . -1) (undo-tree-id3677 . -1)) nil (25258 5869 157899 481000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2509) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) (undo-tree-id3668 . -1) (undo-tree-id3669 . -1)) nil (25258 5869 157888 742000) 0 nil])
([nil nil ((7014 . 7021) (t 25258 5869 167759 525000)) nil (25258 5974 906246 899000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7021 . 7022) (nil fontified nil 7021 . 7022) (7021 . 7022)) nil (25258 5974 906245 837000) 0 nil])
([nil nil ((7014 . 7021)) nil (25258 5974 906244 755000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7072 . 7073) (nil fontified nil 7021 . 7073) (7021 . 7073)) nil (25258 5974 906243 583000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-string-face)) . -7052) (undo-tree-id3700 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -7053) (undo-tree-id3701 . -1) (#("v" 0 1 (fontified t face font-lock-string-face)) . -7054) (undo-tree-id3702 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -7055) (undo-tree-id3703 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -7056) (undo-tree-id3704 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -7057) (undo-tree-id3705 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -7058) (undo-tree-id3706 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7059) (undo-tree-id3707 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -7060) (undo-tree-id3708 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -7061) (undo-tree-id3709 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -7062) (undo-tree-id3710 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -7063) (undo-tree-id3711 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -7064) (undo-tree-id3712 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -7065) (undo-tree-id3713 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -7066) (undo-tree-id3714 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -7067) (undo-tree-id3715 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -7068) (undo-tree-id3716 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -7069) (undo-tree-id3717 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -7070) (undo-tree-id3718 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -7071) (undo-tree-id3719 . -1) 7072) nil (25258 5974 906238 53000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil syntax-table (15) face font-lock-string-face)) . -7051) (undo-tree-id3699 . -1) (#("\"" 0 1 (fontified t rear-nonsticky t syntax-table (15) face font-lock-string-face)) . 7052)) nil (25258 5974 906220 30000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -7046) (undo-tree-id3694 . -1) (#("g" 0 1 (fontified t)) . -7047) (undo-tree-id3695 . -1) (#("e" 0 1 (fontified t)) . -7048) (undo-tree-id3696 . -1) (#(":" 0 1 (fontified t)) . -7049) (undo-tree-id3697 . -1) (#(" " 0 1 (fontified t)) . -7050) (undo-tree-id3698 . -1) 7051) nil (25258 5974 906217 535000) 0 nil])
([nil nil ((7046 . 7051)) nil (25258 5974 906210 413000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7104 . 7105) (nil fontified nil 7068 . 7105) (nil fontified nil 7051 . 7068) (7051 . 7105)) nil (25258 5974 906209 371000) 0 nil])
([nil nil ((7051 . 7053) (#("\"" 0 1 (fontified nil syntax-table (15))) . -7051) (7051 . 7052)) nil (25258 5974 906207 778000) 0 nil])
([nil nil ((#("Verifique el numero de telefono, debe tener 10 digitos" 0 9 (fontified t face font-lock-type-face) 9 17 (fontified t) 17 53 (fontified t) 53 54 (fontified t rear-nonsticky t)) . 7053) (undo-tree-id3691 . -54) (undo-tree-id3692 . -54) (undo-tree-id3693 . -54) 7107) nil (25258 5974 906205 754000) 0 nil])
([nil nil ((nil fontified nil 7105 . 7106) (nil fontified nil 7069 . 7105) (nil fontified nil 7061 . 7069) (nil fontified nil 7052 . 7061) (7052 . 7106)) nil (25258 5974 906192 370000) 0 nil])
([nil nil ((6928 . 6929)) nil (25258 5974 906187 331000) 0 nil])
([nil nil ((#("      

" 0 6 (fontified t) 6 7 (rear-nonsticky t fontified t) 7 8 (fontified t)) . -7110) (undo-tree-id3745 . -8) (undo-tree-id3746 . -6) (6923 . 7017) (#("     # Logger.error(\"Drissly Error: Verifique el numero de telefono, debe tener 10 digitos\")
" 0 5 (fontified t) 5 7 (fontified t face font-lock-comment-delimiter-face) 7 13 (fontified t face font-lock-comment-face) 13 20 (fontified t face font-lock-comment-face) 20 21 (fontified t syntax-table (15) face font-lock-comment-face) 21 53 (fontified t face font-lock-comment-face) 53 90 (fontified t face font-lock-comment-face) 90 91 (fontified t syntax-table (15) face font-lock-comment-face) 91 92 (fontified t face font-lock-comment-face) 92 93 (fontified t face font-lock-comment-face)) . -6923) (undo-tree-id3747 . -93) (undo-tree-id3748 . -34) (undo-tree-id3749 . -34) (undo-tree-id3750 . -34) (undo-tree-id3751 . -34) (undo-tree-id3752 . -36) (undo-tree-id3753 . -6) (undo-tree-id3754 . -6) (t 25258 5974 920632 887000)) nil (25258 6068 255100 287000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6929) (undo-tree-id3743 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6930) (undo-tree-id3744 . -1) 6931) nil (25258 6068 255083 296000) 0 nil])
([nil nil ((7016 . 7022) (#("      " 0 6 (fontified t)) . 7015) (undo-tree-id3740 . -6) (undo-tree-id3741 . -6) (undo-tree-id3742 . -6) (7021 . 7022)) nil (25258 6068 255077 696000) 0 nil])
([nil nil ((7015 . 7024)) nil (25258 6068 255071 395000) 0 nil])
([nil nil ((#("raise ArgumentError, message: \"Verifique el numero de telefono, debe tener 10 digitos\"" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 19 (fontified t face font-lock-type-face) 19 21 (fontified t) 21 29 (fontified t face elixir-atom-face) 29 30 (fontified t) 30 31 (syntax-table (15) fontified t face font-lock-string-face) 31 40 (fontified t face font-lock-string-face) 40 48 (fontified t face font-lock-string-face) 48 84 (fontified t face font-lock-string-face) 84 85 (rear-nonsticky t fontified t face font-lock-string-face) 85 86 (syntax-table (15) fontified t face font-lock-string-face)) . 7031) (undo-tree-id3735 . -31) (undo-tree-id3736 . -30) (undo-tree-id3737 . -86) (undo-tree-id3738 . -86) (undo-tree-id3739 . -86)) nil (25258 6068 255069 191000) 0 nil])
([nil nil ((7021 . 7027)) nil (25258 6068 255058 922000) 0 nil])
([nil nil ((7021 . 7023)) nil (25258 6068 255057 349000) 0 nil])
([nil nil ((#("error:nil" 0 6 (fontified t) 6 9 (fontified t)) . 7023) (undo-tree-id3732 . -9) (undo-tree-id3733 . -9) (undo-tree-id3734 . -9) 7032) nil (25258 6068 255055 436000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7030 . 7031) (nil fontified nil 7028 . 7031) (nil fontified nil 7022 . 7028) (7022 . 7031)) nil (25258 6068 255049 304000) 0 nil])
([nil nil ((7028 . 7029)) nil (25258 6068 255046 840000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -7029) (undo-tree-id3729 . -1) (#("i" 0 1 (fontified t)) . -7030) (undo-tree-id3730 . -1) (#("l" 0 1 (fontified t rear-nonsticky t face elixir-atom-face)) . -7031) (undo-tree-id3731 . -1) 7032) nil (25258 6068 255044 135000) 0 nil])
([nil nil ((7029 . 7035)) nil (25258 6068 255037 894000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -7029) (undo-tree-id3723 . -1) (#("u" 0 1 (fontified t)) . -7030) (undo-tree-id3724 . -1) (#("m" 0 1 (fontified t)) . -7031) (undo-tree-id3725 . -1) (#("b" 0 1 (fontified t)) . -7032) (undo-tree-id3726 . -1) (#("e" 0 1 (fontified t)) . -7033) (undo-tree-id3727 . -1) (#("r" 0 1 (fontified t)) . -7034) (undo-tree-id3728 . -1) 7035) nil (25258 6068 255034 237000) 0 nil])
([nil nil ((7029 . 7032)) nil (25258 6068 255022 325000) 0 nil])
([nil nil ((6929 . 6937)) nil (25258 6068 255020 632000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -7037) (undo-tree-id3720 . -1) (#("i" 0 1 (fontified t)) . -7038) (undo-tree-id3721 . -1) (#("l" 0 1 (fontified t face elixir-atom-face)) . -7039) (undo-tree-id3722 . -1) 7040) nil (25258 6068 255016 224000) 0 nil])
([nil nil ((7037 . 7042)) nil (25258 6068 254995 236000) 0 nil])
([nil nil ((#("{error: error}" 0 1 (fontified t) 1 7 (fontified t face elixir-atom-face) 7 13 (fontified t) 13 14 (fontified t)) . 7029) (undo-tree-id3755 . -1) (undo-tree-id3756 . -14) (undo-tree-id3757 . 14) (undo-tree-id3758 . -1) (undo-tree-id3759 . 1) (undo-tree-id3760 . -14) (undo-tree-id3761 . -14) (t 25258 6068 267360 212000)) nil (25258 6095 706246 790000) 0 nil])
([nil nil ((7029 . 7032)) nil (25258 6095 706212 698000) 0 nil])
([nil nil ((2510 . 2514) (#("    " 0 4 (fontified t)) . 2509) (undo-tree-id3788 . -4) (2508 . 2514) (t 25258 6095 753964 272000)) nil (25258 6334 114831 100000) 0 nil])
([nil nil ((2510 . 2514) (#("    " 0 4 (fontified nil)) . 2509) (2509 . 2513) (2509 . 2510)) nil (25258 6334 114827 183000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2509) (undo-tree-id3785 . -1) (undo-tree-id3786 . -1) (undo-tree-id3787 . -1)) nil (25258 6334 114824 418000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 2509) (undo-tree-id3782 . -5) (undo-tree-id3783 . -5) (undo-tree-id3784 . -5)) nil (25258 6334 114819 98000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 2509) (undo-tree-id3778 . -5) (undo-tree-id3779 . -5) (undo-tree-id3780 . -5) (undo-tree-id3781 . -5)) nil (25258 6334 114813 578000) 0 nil])
([nil nil ((2668 . 2672) (#("    " 0 4 (fontified t)) . 2667) (undo-tree-id3776 . -4) (2667 . 2672) (#("    " 0 4 (fontified t)) . 2666) (undo-tree-id3777 . -4) (2670 . 2671)) nil (25258 6334 114803 940000) 0 nil])
([nil nil ((2668 . 2672) (#("    " 0 4 (fontified nil)) . 2667) (2667 . 2671) (2667 . 2668)) nil (25258 6334 114798 350000) 0 nil])
([nil nil ((2668 . 2672) (#("    " 0 4 (fontified nil)) . 2667) (2667 . 2671) (2667 . 2668)) nil (25258 6334 114795 214000) 0 nil])
([nil nil ((#("check_number_requirements()" 0 27 (fontified t)) . 2481) (undo-tree-id3770 . -27) (undo-tree-id3771 . -27) (undo-tree-id3772 . 1) (undo-tree-id3773 . -27) (undo-tree-id3774 . 2) (undo-tree-id3775 . -26) 2508) nil (25258 6334 114791 357000) 0 nil])
([nil nil ((2639 . 2648)) nil (25258 6334 114781 860000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2674 . 2675) (nil fontified nil 2648 . 2675) (2648 . 2675)) nil (25258 6334 114780 166000) 0 nil])
([nil nil ((2675 . 2678)) nil (25258 6334 114777 822000) 0 nil])
([nil nil ((2678 . 2685)) nil (25258 6334 114776 349000) 0 nil])
([nil nil ((2686 . 2691) (2685 . 2687)) nil (25258 6334 114774 716000) 0 nil])
([nil nil ((2692 . 2693)) nil (25258 6334 114772 973000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2693) (undo-tree-id3764 . -1) (undo-tree-id3765 . -1) (undo-tree-id3766 . -1) (#("
" 0 1 (fontified t)) . 2693) (undo-tree-id3767 . -1) (undo-tree-id3768 . -1) (undo-tree-id3769 . -1)) nil (25258 6334 114770 509000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2693) (#(" " 0 1 (fontified t)) . 2693)) nil (25258 6334 114760 360000) 0 nil])
([nil nil ((2693 . 2695)) nil (25258 6334 114758 527000) 0 nil])
([nil nil ((2857 . 2858) (#("	" 0 1 (fontified t)) . 2856) (undo-tree-id3762 . -1) (undo-tree-id3763 . -1) (2855 . 2858)) nil (25258 6334 114756 413000) 0 nil])
([nil nil ((2857 . 2867)) nil (25258 6334 114743 228000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -2868) (2868 . 2869) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -2868) (2868 . 2869) (2867 . 2869) (#("\"" 0 1 (fontified nil syntax-table (15))) . -2867) (2867 . 2868)) nil (25258 6334 114739 201000) 0 nil])
([nil nil ((2868 . 2884)) nil (25258 6334 114731 427000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 7101) (undo-tree-id3796 . -7) (undo-tree-id3797 . -7) (undo-tree-id3798 . -7) (undo-tree-id3799 . -7) (undo-tree-id3800 . -7) (undo-tree-id3801 . -6) (undo-tree-id3802 . -6) (undo-tree-id3803 . -6) (t 25258 6334 132235 761000)) nil (25258 6381 681324 148000) 0 nil])
([nil nil ((7116 . 7120)) nil (25258 6381 681315 802000) 0 nil])
([nil nil ((7116 . 7118)) nil (25258 6381 681315 61000) 0 nil])
([nil nil ((#("ok: number" 0 3 (fontified t face elixir-atom-face) 3 10 (fontified t)) . 7118) (undo-tree-id3792 . -10) (undo-tree-id3793 . -10) (undo-tree-id3794 . -10) (undo-tree-id3795 . -10) 7128) nil (25258 6381 681313 899000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7126 . 7127) (nil fontified nil 7120 . 7127) (nil fontified nil 7117 . 7120) (7117 . 7127)) nil (25258 6381 681308 980000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -7097) (undo-tree-id3789 . -1) (#("i" 0 1 (fontified t)) . -7098) (undo-tree-id3790 . -1) (#("l" 0 1 (fontified t face elixir-atom-face)) . -7099) (undo-tree-id3791 . -1) 7100) nil (25258 6381 681304 201000) 0 nil])
([nil nil ((2894 . 2898) (#("    " 0 4 (fontified nil)) . 2893) (2893 . 2897) (2893 . 2894) (t 25258 6381 694711 64000)) nil (25258 6413 59484 884000) 0 nil])
([nil nil ((2893 . 2897)) nil (25258 6413 59483 701000) 0 nil])
([nil nil ((2899 . 2901) (#(" " 0 1 (fontified nil)) . 2898) (undo-tree-id3804 . -1) (2893 . 2895) (2897 . 2898)) nil (25258 6413 59482 609000) 0 nil])
([nil nil ((2889 . 2890)) nil (25258 6413 59465 17000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2889)) nil (25258 6413 59463 815000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2893) (#(" " 0 1 (fontified t)) . 2893)) nil (25258 6413 59458 826000) 0 nil])
([nil nil ((2689 . 2690) (t 25258 6413 61766 740000)) nil (25258 6464 402717 319000) 0 nil])
([nil nil ((2689 . 2690) (t 25258 6464 416317 160000)) nil (25258 6472 189927 25000) 0 nil])
([nil nil ((#("case check_number_requirements() do
      {ok: , _} ->  
    " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 31 (fontified t) 31 32 (fontified t rear-nonsticky t) 32 33 (fontified t) 33 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 42 (fontified t) 42 43 (fontified t) 43 46 (fontified t face elixir-atom-face) 46 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t face font-lock-constant-face) 50 54 (fontified t) 54 56 (fontified t) 56 57 (fontified t) 57 61 (fontified t)) . -2643) (undo-tree-id3809 . -36) (undo-tree-id3810 . -36) (undo-tree-id3811 . -57) (undo-tree-id3812 . -57) (undo-tree-id3813 . -57) (undo-tree-id3814 . -5) (undo-tree-id3815 . -61) (undo-tree-id3816 . -41) (undo-tree-id3817 . -61) 2704 (t 25258 6472 212106 977000)) nil (25258 6507 623556 767000) 0 nil])
([nil nil ((#("     _ -> \"Numero no valido\"	" 0 5 (fontified t) 5 6 (fontified t face font-lock-constant-face) 6 10 (fontified t) 10 11 (syntax-table (15) fontified t face font-lock-string-face) 11 27 (fontified t face font-lock-string-face) 27 28 (syntax-table (15) fontified t face font-lock-string-face) 28 29 (fontified t)) . 2798)) nil (25258 6507 623543 562000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2801) (undo-tree-id3805 . -1) (#("n" 0 1 (fontified t)) . -2802) (undo-tree-id3806 . -1) (#("d" 0 1 (fontified t face font-lock-keyword-face)) . -2803) (undo-tree-id3807 . -1) (undo-tree-id3808 . -1) 2804) nil (25258 6507 623540 46000) 0 nil])
([nil nil ((2480 . 2501)) nil (25258 6507 623523 164000) 0 nil])
([nil nil ((2501 . 2508)) nil (25258 6507 623516 963000) 0 nil])
([nil nil ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 7039) (undo-tree-id3829 . -7) (undo-tree-id3830 . -7) (undo-tree-id3831 . -7) (undo-tree-id3832 . -7) (undo-tree-id3833 . -7) (undo-tree-id3834 . -7) (undo-tree-id3835 . -7) (undo-tree-id3836 . -6) (undo-tree-id3837 . -6) (undo-tree-id3838 . -6) (undo-tree-id3839 . -7) (t 25258 6507 635182 747000)) nil (25258 6524 181875 771000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -7065) (undo-tree-id3824 . -1) (undo-tree-id3825 . -1) (undo-tree-id3826 . -1) (undo-tree-id3827 . 1) (undo-tree-id3828 . -1) 7066) nil (25258 6524 181853 570000) 0 nil])
([nil nil ((#("{" 0 1 (fontified t)) . -7054) (undo-tree-id3818 . -1) (undo-tree-id3819 . -1) (#("o" 0 1 (fontified t)) . -7055) (undo-tree-id3820 . -1) (#("k" 0 1 (fontified t)) . -7056) (undo-tree-id3821 . -1) (#(":" 0 1 (fontified t)) . -7057) (undo-tree-id3822 . -1) (#(" " 0 1 (fontified t)) . -7058) (undo-tree-id3823 . -1) 7059) nil (25258 6524 181835 627000) 0 nil])
([nil nil ((6946 . 6947) (6945 . 6947) (t 25258 6524 234766 353000)) nil (25258 10210 223332 831000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -6945) (undo-tree-id3847 . -1) (#("O" 0 1 (fontified t face font-lock-type-face)) . -6946) (undo-tree-id3848 . -1) (#("]" 0 1 (fontified t)) . -6947) (undo-tree-id3849 . -1) (undo-tree-id3850 . 1) (undo-tree-id3851 . -1) 6948) nil (25258 10210 223329 204000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7084 . 7085) (nil fontified nil 7078 . 7085) (7078 . 7085)) nil (25258 10210 223318 714000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -7078) (undo-tree-id3840 . -1) (#("y" 0 1 (fontified t)) . -7079) (undo-tree-id3841 . -1) (#("t" 0 1 (fontified t)) . -7080) (undo-tree-id3842 . -1) (#("h" 0 1 (fontified t)) . -7081) (undo-tree-id3843 . -1) (#("o" 0 1 (fontified t)) . -7082) (undo-tree-id3844 . -1) (#("n" 0 1 (fontified t)) . -7083) (undo-tree-id3845 . -1) (#(" " 0 1 (fontified t rear-nonsticky t)) . -7084) (undo-tree-id3846 . -1) 7085) nil (25258 10210 223310 217000) 0 nil])
([nil nil ((2669 . 2673) (#("    " 0 4 (fontified t)) . 2668) (undo-tree-id3960 . -4) (undo-tree-id3961 . -4) (undo-tree-id3962 . -4) (undo-tree-id3963 . -4) (2672 . 2673) (#("    " 0 4 (fontified nil)) . 2667) (2667 . 2671) (2667 . 2668) (t 25258 10210 245840 681000)) nil (25258 10322 937208 562000) 0 nil])
([nil nil ((2669 . 2673) (#("    " 0 4 (fontified nil)) . 2668) (2668 . 2672) (2668 . 2669)) nil (25258 10322 937197 330000) 0 nil])
([nil nil ((2673 . 2676)) nil (25258 10322 937194 404000) 0 nil])
([nil nil ((#("check_number_requirements() " 0 25 (fontified t) 25 27 (fontified t) 27 28 (fontified t)) . 2481) (undo-tree-id3956 . -28) (undo-tree-id3957 . -28) (undo-tree-id3958 . -26) (undo-tree-id3959 . -28) 2509) nil (25258 10322 937191 829000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2668 . 2669) (nil fontified nil 2668 . 2669) (nil fontified nil 2666 . 2668) (nil fontified nil 2641 . 2666) (2641 . 2669)) nil (25258 10322 937182 762000) 0 nil])
([nil nil ((2641 . 2644)) nil (25258 10322 937179 315000) 0 nil])
([nil nil ((2641 . 2645)) nil (25258 10322 937177 632000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2676) (undo-tree-id3949 . -1) (#(" " 0 1 (fontified t)) . -2677) (undo-tree-id3950 . -1) (#(" " 0 1 (fontified t)) . -2678) (undo-tree-id3951 . -1) (#(" " 0 1 (fontified t)) . -2679) (undo-tree-id3952 . -1) (#("i" 0 1 (fontified t)) . -2680) (undo-tree-id3953 . -1) (#("f" 0 1 (fontified t face font-lock-keyword-face)) . -2681) (undo-tree-id3954 . -1) (#(" " 0 1 (fontified t)) . -2682) (undo-tree-id3955 . -1) 2683) nil (25258 10322 937173 123000) 0 nil])
([nil nil ((2676 . 2678)) nil (25258 10322 937156 782000) 0 nil])
([nil nil ((2678 . 2685)) nil (25258 10322 937154 347000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2685) (undo-tree-id3946 . -1) (undo-tree-id3947 . -1) (undo-tree-id3948 . -1)) nil (25258 10322 937151 502000) 0 nil])
([nil nil ((2845 . 2849) (#("    " 0 4 (fontified nil)) . 2844) (2844 . 2848) (2844 . 2845)) nil (25258 10322 937142 905000) 0 nil])
([nil nil ((2844 . 2848)) nil (25258 10322 937139 940000) 0 nil])
([nil nil ((2848 . 2852)) nil (25258 10322 937138 176000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -2848) (undo-tree-id3942 . -1) (#("l" 0 1 (fontified t)) . -2849) (undo-tree-id3943 . -1) (#("s" 0 1 (fontified t)) . -2850) (undo-tree-id3944 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -2851) (undo-tree-id3945 . -1) 2852) nil (25258 10322 937134 830000) 0 nil])
([nil nil ((2848 . 2852)) nil (25258 10322 937125 41000) 0 nil])
([nil nil ((2852 . 2859)) nil (25258 10322 937123 177000) 0 nil])
([nil nil ((2857 . 2868)) nil (25258 10322 937121 364000) 0 nil])
([nil nil ((#("L" 0 1 (fontified t face font-lock-type-face)) . -2857) (undo-tree-id3931 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -2858) (undo-tree-id3932 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -2859) (undo-tree-id3933 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -2860) (undo-tree-id3934 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -2861) (undo-tree-id3935 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -2862) (undo-tree-id3936 . -1) (#("." 0 1 (fontified t)) . -2863) (undo-tree-id3937 . -1) (#("i" 0 1 (fontified t)) . -2864) (undo-tree-id3938 . -1) (#("n" 0 1 (fontified t)) . -2865) (undo-tree-id3939 . -1) (#("f" 0 1 (fontified t)) . -2866) (undo-tree-id3940 . -1) (#("o" 0 1 (fontified t)) . -2867) (undo-tree-id3941 . -1) 2868) nil (25258 10322 937115 32000) 0 nil])
([nil nil ((2854 . 2860) (#("      " 0 4 (fontified t) 4 6 (fontified t)) . 2853) (undo-tree-id3929 . -6) (undo-tree-id3930 . -4) (2859 . 2860)) nil (25258 10322 937089 583000) 0 nil])
([nil nil ((2852 . 2859)) nil (25258 10322 937083 381000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2971 . 2972) (nil fontified nil 2971 . 2972) (nil fontified nil 2970 . 2971) (nil fontified nil 2901 . 2970) (nil fontified nil 2900 . 2901) (nil fontified nil 2893 . 2900) (nil fontified nil 2890 . 2893) (nil fontified nil 2887 . 2890) (nil fontified nil 2886 . 2887) (nil fontified nil 2884 . 2886) (nil fontified nil 2859 . 2884) (2859 . 2972)) nil (25258 10322 937079 954000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . -2866) (undo-tree-id3867 . -1) (undo-tree-id3868 . -1) (undo-tree-id3869 . -1) (#("m" 0 1 (fontified t)) . -2867) (undo-tree-id3870 . -1) (undo-tree-id3871 . -1) (undo-tree-id3872 . -1) (#("b" 0 1 (fontified t)) . -2868) (undo-tree-id3873 . -1) (undo-tree-id3874 . -1) (undo-tree-id3875 . -1) (#("e" 0 1 (fontified t)) . -2869) (undo-tree-id3876 . -1) (undo-tree-id3877 . -1) (undo-tree-id3878 . -1) (#("r" 0 1 (fontified t)) . -2870) (undo-tree-id3879 . -1) (undo-tree-id3880 . -1) (undo-tree-id3881 . -1) (#("_" 0 1 (fontified t)) . -2871) (undo-tree-id3882 . -1) (undo-tree-id3883 . -1) (undo-tree-id3884 . -1) (#("r" 0 1 (fontified t)) . -2872) (undo-tree-id3885 . -1) (undo-tree-id3886 . -1) (undo-tree-id3887 . -1) (#("e" 0 1 (fontified t)) . -2873) (undo-tree-id3888 . -1) (undo-tree-id3889 . -1) (undo-tree-id3890 . -1) (#("q" 0 1 (fontified t)) . -2874) (undo-tree-id3891 . -1) (undo-tree-id3892 . -1) (undo-tree-id3893 . -1) (#("u" 0 1 (fontified t)) . -2875) (undo-tree-id3894 . -1) (undo-tree-id3895 . -1) (undo-tree-id3896 . -1) (#("i" 0 1 (fontified t)) . -2876) (undo-tree-id3897 . -1) (undo-tree-id3898 . -1) (undo-tree-id3899 . -1) (#("r" 0 1 (fontified t)) . -2877) (undo-tree-id3900 . -1) (undo-tree-id3901 . -1) (undo-tree-id3902 . -1) (#("e" 0 1 (fontified t)) . -2878) (undo-tree-id3903 . -1) (undo-tree-id3904 . -1) (undo-tree-id3905 . -1) (#("m" 0 1 (fontified t)) . -2879) (undo-tree-id3906 . -1) (undo-tree-id3907 . -1) (undo-tree-id3908 . -1) (#("e" 0 1 (fontified t)) . -2880) (undo-tree-id3909 . -1) (undo-tree-id3910 . -1) (undo-tree-id3911 . -1) (#("n" 0 1 (fontified t)) . -2881) (undo-tree-id3912 . -1) (undo-tree-id3913 . -1) (undo-tree-id3914 . -1) (#("t" 0 1 (fontified t)) . -2882) (undo-tree-id3915 . -1) (undo-tree-id3916 . -1) (undo-tree-id3917 . -1) (#("s" 0 1 (fontified t)) . -2883) (undo-tree-id3918 . -1) (undo-tree-id3919 . -1) (undo-tree-id3920 . -1) (#("(" 0 1 (fontified t)) . -2884) (undo-tree-id3921 . -1) (undo-tree-id3922 . -1) (undo-tree-id3923 . 1) (undo-tree-id3924 . -1) (#(")" 0 1 (fontified t)) . -2885) (undo-tree-id3925 . -1) (undo-tree-id3926 . 1) (undo-tree-id3927 . -1) (#(" " 0 1 (fontified t)) . -2886) (undo-tree-id3928 . -1) 2887) nil (25258 10322 937058 152000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -2859) (undo-tree-id3852 . -1) (#("h" 0 1 (fontified t)) . -2860) (undo-tree-id3853 . -1) (#("e" 0 1 (fontified t)) . -2861) (undo-tree-id3854 . -1) (#("c" 0 1 (fontified t)) . -2862) (undo-tree-id3855 . -1) (undo-tree-id3856 . -1) (undo-tree-id3857 . -1) (#("k" 0 1 (fontified t)) . -2863) (undo-tree-id3858 . -1) (undo-tree-id3859 . -1) (undo-tree-id3860 . -1) (#("_" 0 1 (fontified t)) . -2864) (undo-tree-id3861 . -1) (undo-tree-id3862 . -1) (undo-tree-id3863 . -1) (#("n" 0 1 (fontified t)) . -2865) (undo-tree-id3864 . -1) (undo-tree-id3865 . -1) (undo-tree-id3866 . -1) 2866) nil (25258 10322 936933 823000) 0 nil])
([nil nil ((#("!" 0 1 (fontified t)) . -7061) (undo-tree-id3973 . -1) 7062 (t 25258 10322 987653 801000)) nil (25258 10495 529882 14000) 0 nil])
([nil nil ((7061 . 7062)) nil (25258 10495 529877 275000) 0 nil])
([nil nil ((#("error = Logger.error(\"Drissly Error: Verifique el numero de telefono, debe tener 10 digitos\")" 0 5 (fontified t face font-lock-variable-name-face) 5 8 (fontified t) 8 11 (fontified t face font-lock-type-face) 11 14 (fontified t face font-lock-type-face) 14 21 (fontified t) 21 22 (syntax-table (15) fontified t face font-lock-string-face) 22 91 (fontified t face font-lock-string-face) 91 92 (syntax-table (15) fontified t face font-lock-string-face) 92 93 (fontified t)) . 7076) (undo-tree-id3971 . -8) (undo-tree-id3972 . -93)) nil (25258 10495 529874 480000) 0 nil])
([nil nil ((7076 . 7082)) nil (25258 10495 529868 719000) 0 nil])
([nil nil ((#("else
      number
    en" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 11 (fontified t) 11 16 (fontified t) 16 17 (rear-nonsticky t fontified t) 17 18 (fontified t) 18 22 (fontified t) 22 24 (fontified t face font-lock-keyword-face)) . -7087) (undo-tree-id3965 . -17) (undo-tree-id3966 . -11) (undo-tree-id3967 . -24) (undo-tree-id3968 . -18) (undo-tree-id3969 . -24) (undo-tree-id3970 . 2) 7111) nil (25258 10495 529863 830000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -7087) (undo-tree-id3964 . -1) 7088) nil (25258 10495 529842 268000) 0 nil])
([nil nil ((7099 . 7101) (#("  " 0 2 (fontified nil)) . 7098) (7098 . 7100) (7098 . 7099) (t 25258 10495 558933 583000)) nil (25258 10511 196929 167000) 0 nil])
([nil nil ((7099 . 7102)) nil (25258 10511 196926 171000) 0 nil])
([nil nil ((7088 . 7091)) nil (25258 10511 196923 757000) 0 nil])
([nil nil ((7097 . 7100)) nil (25258 10511 196918 6000) 0 nil])
([nil nil ((2953 . 2957) (t 25258 10511 215514 675000)) nil (25258 10551 543685 429000) 0 nil])
([nil nil ((#("end  
" 0 3 (face font-lock-keyword-face)) . -7106) (undo-tree-id3982 . -3) (7087 . 7105) (#("    
     end
   end
" 10 12 (face font-lock-keyword-face) 12 13 (rear-nonsticky t face font-lock-keyword-face) 17 20 (face font-lock-keyword-face)) . -7087) (undo-tree-id3983 . -4) (undo-tree-id3984 . -4) (undo-tree-id3985 . -20) (undo-tree-id3986 . -4) (#("      
end     
  
end
  
    
" 0 6 (fontified t) 6 7 (fontified t) 7 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 15 (fontified t) 15 16 (fontified t) 16 18 (fontified t) 18 19 (fontified t) 19 22 (fontified t face font-lock-keyword-face) 22 23 (fontified t) 23 25 (fontified t) 25 26 (fontified t) 26 31 (fontified t)) . -2977) (undo-tree-id3987 . -7) (undo-tree-id3988 . -7) (undo-tree-id3989 . -7) (undo-tree-id3990 . -16) (undo-tree-id3991 . -16) (undo-tree-id3992 . -16) (undo-tree-id3993 . -19) (undo-tree-id3994 . -19) (undo-tree-id3995 . -23) (undo-tree-id3996 . -23) (undo-tree-id3997 . -26) (undo-tree-id3998 . -26) (undo-tree-id3999 . -31) (undo-tree-id4000 . -31) (undo-tree-id4001 . -7) (undo-tree-id4002 . -11) (undo-tree-id4003 . -11) (undo-tree-id4004 . -11) (undo-tree-id4005 . -11) (undo-tree-id4006 . -11) (2962 . 2976) (2686 . 2861) (#("          
    send_request(
      ops,
      url,
      phone_num,
      tos,
      spa,
      addition_text,
      ref,
      folio
    )
    |> parse_response()

" 0 6 (fontified t) 6 10 (fontified t) 10 11 (fontified t) 11 15 (fontified t) 15 28 (fontified t) 28 29 (fontified t) 29 140 (fontified t) 140 163 (fontified t) 163 164 (fontified t) 164 165 (fontified t)) . -2686) (undo-tree-id4007 . -165) (undo-tree-id4008 . -165) (undo-tree-id4009 . -164) (undo-tree-id4010 . -164) (undo-tree-id4011 . -134) (undo-tree-id4012 . -134) (undo-tree-id4013 . -140) (undo-tree-id4014 . -140) (undo-tree-id4015 . -122) (undo-tree-id4016 . -122) (undo-tree-id4017 . -122) (undo-tree-id4018 . -122) (#("

" 0 1 (fontified t) 1 2 (fontified t)) . -2648) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -2) (2446 . 2522) (#("    phone_num = options[:phone] |> 
    tos = options[:id_product]
" 0 4 (fontified t) 4 13 (fontified t face font-lock-variable-name-face) 13 24 (fontified t) 24 30 (fontified t face elixir-atom-face) 30 35 (fontified t) 35 36 (fontified t) 36 40 (fontified t) 40 43 (fontified t face font-lock-variable-name-face) 43 54 (fontified t) 54 65 (fontified t face elixir-atom-face) 65 66 (fontified t) 66 67 (fontified t)) . -2446) (undo-tree-id4023 . -35) (undo-tree-id4024 . -35) (t 25258 10551 556959 692000)) nil (25258 10603 320984 136000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2462) (#(" " 0 1 (fontified t)) . 2462) (#(" " 0 1 (fontified t)) . 2462) (#(" " 0 1 (fontified t)) . 2462) (#(" " 0 1 (fontified t)) . 2462) (#(" " 0 1 (fontified t)) . 2462) (#("
" 0 1 (fontified t)) . 2462) (undo-tree-id3979 . -1) (undo-tree-id3980 . -1) (undo-tree-id3981 . -1)) nil (25258 10603 320919 823000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -2482) (undo-tree-id3974 . -1) (#(" " 0 1 (fontified t)) . -2483) (undo-tree-id3975 . -1) (#("|" 0 1 (fontified t)) . -2484) (undo-tree-id3976 . -1) (#(">" 0 1 (fontified t)) . -2485) (undo-tree-id3977 . -1) (#(" " 0 1 (fontified t)) . -2486) (undo-tree-id3978 . -1) 2487) nil (25258 10603 320906 507000) 0 nil])
([nil nil ((2669 . 2675) (t 25258 10603 346711 865000)) nil (25258 10633 148578 899000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -2669) (undo-tree-id4025 . -1) (#("u" 0 1 (fontified t)) . -2670) (undo-tree-id4026 . -1) (#("m" 0 1 (fontified t)) . -2671) (undo-tree-id4027 . -1) (#("b" 0 1 (fontified t)) . -2672) (undo-tree-id4028 . -1) (#("e" 0 1 (fontified t)) . -2673) (undo-tree-id4029 . -1) (#("r" 0 1 (fontified t)) . -2674) (undo-tree-id4030 . -1) 2675) nil (25258 10633 148573 669000) 0 nil])
([nil nil ((2669 . 2674)) nil (25258 10633 148545 255000) 0 nil])
([nil nil ((2674 . 2678) (t 25258 10633 195673 191000)) nil (25258 10635 572992 882000) 0 nil])
([nil nil ((2669 . 2672) (t 25258 10635 591748 902000)) nil (25258 10686 609530 600000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -2669) (undo-tree-id4031 . -1) (#("o" 0 1 (fontified t)) . -2670) (undo-tree-id4032 . -1) (#("s" 0 1 (fontified t)) . -2671) (undo-tree-id4033 . -1) 2672) nil (25258 10686 609525 681000) 0 nil])
([nil nil ((2669 . 2670)) nil (25258 10686 609505 653000) 0 nil])
([nil nil ((2670 . 2673)) nil (25258 10686 609498 249000) 0 nil])
([nil nil ((7072 . 7076) (t 25258 10686 621312 681000)) nil (25258 10817 577052 961000) 0 nil])
([nil nil ((7016 . 7026)) nil (25258 10817 577052 189000) 0 nil])
([nil nil ((7086 . 7096)) nil (25258 10817 577051 528000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -7100) (7100 . 7101) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -7100) (7100 . 7101) (7099 . 7101) (#("\"" 0 1 (fontified nil syntax-table (15))) . -7099) (7096 . 7100)) nil (25258 10817 577050 35000) 0 nil])
([nil nil ((7100 . 7107)) nil (25258 10817 577048 482000) 0 nil])
([nil nil ((7108 . 7109)) nil (25258 10817 577047 791000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -7126) (7126 . 7127) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -7126) (7126 . 7127) (7125 . 7127) (#("\"" 0 1 (fontified nil syntax-table (15))) . -7125) (7109 . 7126)) nil (25258 10817 577045 947000) 0 nil])
([nil nil ((7127 . 7128)) nil (25258 10817 577043 943000) 0 nil])
([nil nil ((7126 . 7139)) nil (25258 10817 577040 46000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-string-face)) . -7101) (undo-tree-id4047 . -1) 7102 (t 25258 10817 580947 537000)) nil (25258 10908 341115 773000) 0 nil])
([nil nil ((7101 . 7102)) nil (25258 10908 341111 595000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -7082) (undo-tree-id4043 . -1) (#("n" 0 1 (fontified t)) . -7083) (undo-tree-id4044 . -1) (#("d" 0 1 (fontified t)) . -7084) (undo-tree-id4045 . -1) (#(" " 0 1 (fontified t)) . -7085) (undo-tree-id4046 . -1) 7086) nil (25258 10908 341108 279000) 0 nil])
([nil nil ((7082 . 7085)) nil (25258 10908 341082 761000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -7082) (undo-tree-id4040 . -1) (#("r" 0 1 (fontified t)) . -7083) (undo-tree-id4041 . -1) (#(" " 0 1 (fontified t)) . -7084) (undo-tree-id4042 . -1) 7085) nil (25258 10908 341079 715000) 0 nil])
([nil nil ((7082 . 7086)) nil (25258 10908 341071 649000) 0 nil])
([nil nil ((#("\\" 0 1 (fontified t)) . -7083) (undo-tree-id4037 . -1) (#("\\" 0 1 (fontified t)) . -7084) (undo-tree-id4038 . -1) (#(" " 0 1 (fontified t)) . -7085) (undo-tree-id4039 . -1) 7086) nil (25258 10908 341068 343000) 0 nil])
([nil nil ((7083 . 7086)) nil (25258 10908 341059 917000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -7109) (undo-tree-id4034 . -1) (#("r" 0 1 (fontified t)) . -7110) (undo-tree-id4035 . -1) (#(" " 0 1 (fontified t)) . -7111) (undo-tree-id4036 . -1) 7112) nil (25258 10908 341054 787000) 0 nil])
([nil nil ((7109 . 7112)) nil (25258 10908 341030 662000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -7097) (undo-tree-id4050 . -1) 7098 (t 25258 10908 359199 312000)) nil (25258 10925 108744 962000) 0 nil])
([nil nil ((7096 . 7097)) nil (25258 10925 108743 339000) 0 nil])
([nil nil ((#("!" 0 1 (fontified t)) . -7096) (undo-tree-id4049 . -1) 7097) nil (25258 10925 108742 377000) 0 nil])
([nil nil ((7096 . 7097)) nil (25258 10925 108740 394000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . -7122) (undo-tree-id4048 . -1) 7123) nil (25258 10925 108738 470000) 0 nil])
([nil nil ((7122 . 7123)) nil (25258 10925 108724 13000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t face font-lock-string-face)) . -7100) (undo-tree-id4051 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -7101) (undo-tree-id4052 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -7102) (undo-tree-id4053 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -7103) (undo-tree-id4054 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -7104) (undo-tree-id4055 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -7105) (undo-tree-id4056 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -7106) (undo-tree-id4057 . -1) 7107 (t 25258 10925 111594 408000)) nil (25258 10958 155732 391000) 0 nil])
([nil nil ((7100 . 7107)) nil (25258 10958 155702 164000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -7083) (undo-tree-id4058 . -1) (#("|" 0 1 (fontified t)) . -7084) (undo-tree-id4059 . -1) (#(" " 0 1 (fontified t)) . -7085) (undo-tree-id4060 . -1) 7086 (t 25258 10958 164356 880000)) nil (25258 10991 519690 439000) 0 nil])
([nil nil ((7083 . 7087)) nil (25258 10991 519665 141000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t)) . -7110) (undo-tree-id4061 . -1) (#("|" 0 1 (fontified t)) . -7111) (undo-tree-id4062 . -1) (#(" " 0 1 (fontified t)) . -7112) (undo-tree-id4063 . -1) 7113 (t 25258 10991 569105 694000)) nil (25258 10996 513224 43000) 0 nil])
([nil nil ((7110 . 7114)) nil (25258 10996 513197 452000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -7083) (undo-tree-id4068 . -1) (#("n" 0 1 (fontified t)) . -7084) (undo-tree-id4069 . -1) (#("d" 0 1 (fontified t)) . -7085) (undo-tree-id4070 . -1) (#(" " 0 1 (fontified t)) . -7086) (undo-tree-id4071 . -1) 7087 (t 25258 10996 537215 277000)) nil (25258 11010 593323 578000) 0 nil])
([nil nil ((7083 . 7086)) nil (25258 11010 593319 951000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -7109) (undo-tree-id4064 . -1) (#("n" 0 1 (fontified t)) . -7110) (undo-tree-id4065 . -1) (#("d" 0 1 (fontified t)) . -7111) (undo-tree-id4066 . -1) (#(" " 0 1 (fontified t)) . -7112) (undo-tree-id4067 . -1) 7113) nil (25258 11241 181978 613000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((7109 . 7112)) ((#("&& " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 7109) (t 25258 11010 597522 990000)) (25258 11241 728278 817000) 0 (:visualizer [1 0 1 #<marker in no buffer>])])
([nil nil ((#("a" 0 1 (fontified t)) . 7096) (#("r" 0 1 (fontified t)) . 7096) (#("e" 0 1 (fontified t)) . 7096) (#("p" 0 1 (fontified t)) . 7096) (#("o" 0 1 (fontified t)) . 7096) (#(" " 0 1 (fontified t)) . 7096) (#("&" 0 1 (fontified t)) . 7096) (#("&" 0 1 (fontified t)) . 7096) (#(" " 0 1 (fontified t)) . 7096) (undo-tree-id4255 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . 7096) (undo-tree-id4256 . -1) (#("a" 0 1 (fontified t)) . 7096) (#("g" 0 1 (fontified t)) . 7096) (#("r" 0 1 (fontified t)) . 7096) (#("a" 0 1 (fontified t)) . 7096) (#("c" 0 1 (fontified t)) . 7096) (#("e" 0 1 (fontified t)) . 7096) (#("r" 0 1 (fontified t)) . 7096) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . 7096) (#(" " 0 1 (fontified t)) . 7096) (#("=" 0 1 (fontified t)) . 7096) (#("!" 0 1 (fontified t)) . 7096) (t 25258 11010 597522 990000)) nil (25258 11307 636021 952000) 0 nil] [nil nil ((#("number |> to_charlist |> length == 10" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t)) . 7044) (undo-tree-id4168 . -37) (undo-tree-id4169 . -37) 7081 (t 25258 11010 597522 990000)) ((7044 . 7081)) (25258 11239 133562 426000) 0 (:visualizer [0 1 0 #<marker in no buffer>])] [nil nil ((#(" " 0 1 (fontified t)) . -7065) (undo-tree-id4094 . -1) (#("|" 0 1 (fontified t)) . -7066) (undo-tree-id4095 . -1) (#(">" 0 1 (fontified t)) . -7067) (undo-tree-id4096 . -1) (#(" " 0 1 (fontified t)) . -7068) (undo-tree-id4097 . -1) (#("l" 0 1 (fontified t)) . -7069) (undo-tree-id4098 . -1) (#("e" 0 1 (fontified t)) . -7070) (undo-tree-id4099 . -1) (#("n" 0 1 (fontified t)) . -7071) (undo-tree-id4100 . -1) (#("g" 0 1 (fontified t)) . -7072) (undo-tree-id4101 . -1) (#("t" 0 1 (fontified t)) . -7073) (undo-tree-id4102 . -1) (#("h" 0 1 (fontified t)) . -7074) (undo-tree-id4103 . -1) (#(" " 0 1 (fontified t)) . -7075) (undo-tree-id4104 . -1) (#("=" 0 1 (fontified t)) . -7076) (undo-tree-id4105 . -1) (#("=" 0 1 (fontified t)) . -7077) (undo-tree-id4106 . -1) (#(" " 0 1 (fontified t)) . -7078) (undo-tree-id4107 . -1) (#("1" 0 1 (fontified t)) . -7079) (undo-tree-id4108 . -1) (#("0" 0 1 (fontified t)) . -7080) (undo-tree-id4109 . -1) (#(" " 0 1 (fontified t)) . -7081) (undo-tree-id4110 . -1) (#(" " 0 1 (fontified t)) . -7082) (undo-tree-id4111 . -1) (#("&" 0 1 (fontified t)) . -7083) (undo-tree-id4112 . -1) (#("&" 0 1 (fontified t)) . -7084) (undo-tree-id4113 . -1) (#(" " 0 1 (fontified t)) . -7085) (undo-tree-id4114 . -1) 7086 (t 25258 11010 597522 990000)) ((7065 . 7086)) (25258 11055 650763 51000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("i" 0 1 (fontified t)) . 7096) (#("c" 0 1 (fontified t)) . 7096) (#("i" 0 1 (fontified t)) . 7096) (#("v" 0 1 (fontified t)) . 7096) (#("r" 0 1 (fontified t)) . 7096) (#("e" 0 1 (fontified t)) . 7096) (#("s" 0 1 (fontified t)) . 7096) (#("_" 0 1 (fontified t face font-lock-comment-face)) . 7096) (#("o" 0 1 (fontified t)) . 7096) (#("g" 0 1 (fontified t)) . 7096) (#("a" 0 1 (fontified t)) . 7096) (#("p" 0 1 (fontified t)) . 7096) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . 7096) (#(" " 0 1 (fontified t)) . 7096) (#("=" 0 1 (fontified t)) . 7096) (#("!" 0 1 (fontified t)) . 7096) (#(" " 0 1 (fontified t)) . 7096) (#("n" 0 1 (fontified t)) . 7096) (#("o" 0 1 (fontified t)) . 7096) (#("i" 0 1 (fontified t)) . 7096) (#("t" 0 1 (fontified t)) . 7096)) nil (25258 11307 636005 150000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7045) (undo-tree-id4164 . -1) (#("&" 0 1 (fontified t)) . -7046) (undo-tree-id4165 . -1) (#("&" 0 1 (fontified t)) . -7047) (undo-tree-id4166 . -1) (#(" " 0 1 (fontified t)) . -7048) (undo-tree-id4167 . -1) 7049) ((7045 . 7049)) (25258 11238 860444 843000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("n" 0 1 (fontified t)) . -7044) (undo-tree-id4073 . -1) (#("u" 0 1 (fontified t)) . -7045) (undo-tree-id4074 . -1) (#("m" 0 1 (fontified t)) . -7046) (undo-tree-id4075 . -1) (#("b" 0 1 (fontified t)) . -7047) (undo-tree-id4076 . -1) (#("e" 0 1 (fontified t)) . -7048) (undo-tree-id4077 . -1) (#("r" 0 1 (fontified t)) . -7049) (undo-tree-id4078 . -1) (#(" " 0 1 (fontified t)) . -7050) (undo-tree-id4079 . -1) (#("|" 0 1 (fontified t)) . -7051) (undo-tree-id4080 . -1) (#(">" 0 1 (fontified t)) . -7052) (undo-tree-id4081 . -1) (#(" " 0 1 (fontified t)) . -7053) (undo-tree-id4082 . -1) (#("t" 0 1 (fontified t)) . -7054) (undo-tree-id4083 . -1) (#("o" 0 1 (fontified t)) . -7055) (undo-tree-id4084 . -1) (#("_" 0 1 (fontified t)) . -7056) (undo-tree-id4085 . -1) (#("c" 0 1 (fontified t)) . -7057) (undo-tree-id4086 . -1) (#("h" 0 1 (fontified t)) . -7058) (undo-tree-id4087 . -1) (#("a" 0 1 (fontified t)) . -7059) (undo-tree-id4088 . -1) (#("r" 0 1 (fontified t)) . -7060) (undo-tree-id4089 . -1) (#("l" 0 1 (fontified t)) . -7061) (undo-tree-id4090 . -1) (#("i" 0 1 (fontified t)) . -7062) (undo-tree-id4091 . -1) (#("s" 0 1 (fontified t)) . -7063) (undo-tree-id4092 . -1) (#("t" 0 1 (fontified t)) . -7064) (undo-tree-id4093 . -1) 7065) ((7044 . 7065)) (25258 11055 334833 395000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified t)) . 7096) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . 7096) (#("o" 0 1 (fontified t)) . 7096)) nil (25258 11307 635995 532000) 0 nil])
([nil nil ((7100 . 7103)) ((#("&& " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 7100)) (25258 11238 598273 863000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified t)) . -7043) (undo-tree-id4072 . -1) 7044) ((7043 . 7044)) (25258 11054 483812 459000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("o" 0 1 (fontified t)) . -7016) (undo-tree-id4245 . -1) (#("p" 0 1 (fontified t)) . -7017) (undo-tree-id4246 . -1) (#("e" 0 1 (fontified t)) . -7018) (undo-tree-id4247 . -1) (#("r" 0 1 (fontified t)) . -7019) (undo-tree-id4248 . -1) (#("a" 0 1 (fontified t)) . -7020) (undo-tree-id4249 . -1) (#("t" 0 1 (fontified t)) . -7021) (undo-tree-id4250 . -1) (#("i" 0 1 (fontified t)) . -7022) (undo-tree-id4251 . -1) (#("o" 0 1 (fontified t)) . -7023) (undo-tree-id4252 . -1) (#("n" 0 1 (fontified t)) . -7024) (undo-tree-id4253 . -1) (#("," 0 1 (fontified t)) . -7025) (undo-tree-id4254 . -1) 7026) nil (25258 11307 635986 114000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7122) (undo-tree-id4159 . -1) (#("e" 0 1 (fontified t)) . -7123) (undo-tree-id4160 . -1) (#("n" 0 1 (fontified t)) . -7124) (undo-tree-id4161 . -1) (#("d" 0 1 (fontified t face font-lock-keyword-face)) . -7125) (undo-tree-id4162 . -1) (undo-tree-id4163 . -1) 7126) ((7122 . 7126)) (25258 11238 317089 849000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
nil
([nil nil ((#("(" 0 1 (fontified t)) . -2668) (undo-tree-id4257 . -1) (undo-tree-id4258 . -1) (#("o" 0 1 (fontified t)) . -2669) (undo-tree-id4259 . -1) (undo-tree-id4260 . -1) (#("p" 0 1 (fontified t)) . -2670) (undo-tree-id4261 . -1) (undo-tree-id4262 . -1) (#("s" 0 1 (fontified t)) . -2671) (undo-tree-id4263 . -1) (undo-tree-id4264 . -1) (#("," 0 1 (fontified t)) . -2672) (undo-tree-id4265 . -1) (undo-tree-id4266 . -1) 2673 (t 25258 11307 651337 198000)) nil (25258 11321 786247 327000) 0 nil])
([nil nil ((7122 . 7126)) ((#(" els" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t)) . 7122) (undo-tree-id4243 . -4) (undo-tree-id4244 . -4)) (25258 11238 48763 760000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((2668 . 2669)) nil (25258 11321 786214 244000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -7123) (undo-tree-id4156 . -1) (#("l" 0 1 (fontified t)) . -7124) (undo-tree-id4157 . -1) (#("s" 0 1 (fontified t)) . -7125) (undo-tree-id4158 . -1) 7126) ((7123 . 7126)) (25258 11237 764314 78000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(" " 0 1 (fontified t)) . -7067) (undo-tree-id4267 . -1) (undo-tree-id4268 . -1) (#(" " 0 1 (fontified t)) . -7068) (undo-tree-id4269 . -1) (undo-tree-id4270 . -1) (#("&" 0 1 (fontified t)) . -7069) (undo-tree-id4271 . -1) (undo-tree-id4272 . -1) (#("&" 0 1 (fontified t)) . -7070) (undo-tree-id4273 . -1) (undo-tree-id4274 . -1) (#(" " 0 1 (fontified t)) . -7071) (undo-tree-id4275 . -1) (undo-tree-id4276 . -1) (#("o" 0 1 (fontified t)) . -7072) (undo-tree-id4277 . -1) (undo-tree-id4278 . -1) (#("p" 0 1 (fontified t)) . -7073) (undo-tree-id4279 . -1) (undo-tree-id4280 . -1) (#("e" 0 1 (fontified t)) . -7074) (undo-tree-id4281 . -1) (undo-tree-id4282 . -1) (#("r" 0 1 (fontified t)) . -7075) (undo-tree-id4283 . -1) (undo-tree-id4284 . -1) (#("a" 0 1 (fontified t)) . -7076) (undo-tree-id4285 . -1) (undo-tree-id4286 . -1) (#("t" 0 1 (fontified t)) . -7077) (undo-tree-id4287 . -1) (undo-tree-id4288 . -1) (#("i" 0 1 (fontified t)) . -7078) (undo-tree-id4289 . -1) (undo-tree-id4290 . -1) (#("o" 0 1 (fontified t)) . -7079) (undo-tree-id4291 . -1) (undo-tree-id4292 . -1) (#("n" 0 1 (fontified t)) . -7080) (undo-tree-id4293 . -1) (undo-tree-id4294 . -1) (#(" " 0 1 (fontified t)) . -7081) (undo-tree-id4295 . -1) (undo-tree-id4296 . -1) 7082 (t 25258 11321 811587 857000)) nil (25258 11351 304366 182000) 0 nil])
([nil nil ((7123 . 7128)) ((#("elif " 0 5 (fontified t)) . 7123)) (25258 11237 441589 264000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((7067 . 7068)) nil (25258 11351 304324 694000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . -7041) (undo-tree-id4149 . -1) (undo-tree-id4150 . -1) (#("f" 0 1 (fontified t)) . -7042) (undo-tree-id4151 . -1) (undo-tree-id4152 . -1) (#(" " 0 1 (fontified t)) . -7043) (undo-tree-id4153 . -1) (undo-tree-id4154 . -1) (#(" " 0 1 (fontified t)) . -7044) (undo-tree-id4155 . -1) 7045) ((7041 . 7045)) (25258 11237 165485 199000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((2680 . 2686) (t 25258 11351 320104 40000)) nil (25258 11424 910071 707000) 0 nil])
([nil nil ((7041 . 7046)) ((#("case " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 7041)) (25258 11236 877413 714000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((2686 . 2690)) nil (25258 11424 910069 763000) 0 nil])
([nil nil ((#("!" 0 1 (fontified t)) . -7056) (undo-tree-id4146 . -1) (#("=" 0 1 (fontified t)) . -7057) (undo-tree-id4147 . -1) (#(" " 0 1 (fontified t)) . -7058) (undo-tree-id4148 . -1) 7059) ((7056 . 7059)) (25258 11236 585794 477000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("=" 0 1 (fontified t)) . -2687) (undo-tree-id4301 . -1) (#("=" 0 1 (fontified t)) . -2688) (undo-tree-id4302 . -1) (#(" " 0 1 (fontified t)) . -2689) (undo-tree-id4303 . -1) 2690) nil (25258 11424 910066 698000) 0 nil])
([nil nil ((7056 . 7059)) ((#("dp " 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t)) . 7056) (undo-tree-id4239 . -2) (undo-tree-id4240 . -2) (undo-tree-id4241 . -3) (undo-tree-id4242 . -3)) (25258 11236 314394 209000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((2687 . 2689)) nil (25258 11424 910053 382000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -7057) (undo-tree-id4145 . -1) 7058) ((7057 . 7058)) (25258 11236 72268 293000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("+" 0 1 (fontified t)) . -2688) (undo-tree-id4300 . -1) 2689) nil (25258 11424 910051 228000) 0 nil])
([nil nil ((7057 . 7058)) ((#("o" 0 1 (fontified t face font-lock-keyword-face)) . 7057)) (25258 11234 763208 628000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("\"" 0 1 (fontified nil)) . -2691) (2691 . 2692) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -2691) (2691 . 2692) (2690 . 2692) (#("\"" 0 1 (fontified nil syntax-table (15))) . -2690) (2688 . 2691)) nil (25258 11424 910047 20000) 0 nil])
([nil nil ((7059 . 7065) (#(" " 0 1 (fontified t)) . 7058) (undo-tree-id4144 . -1) (7059 . 7060)) ((#("
" 0 1 (fontified nil)) . 7059) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (7058 . 7059) (#("      " 0 6 (fontified t)) . 7059)) (25258 11233 885679 576000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((2691 . 2698)) nil (25258 11424 910043 524000) 0 nil])
([nil nil ((#("&" 0 1 (fontified t)) . -7075) (undo-tree-id4141 . -1) (#("&" 0 1 (fontified t)) . -7076) (undo-tree-id4142 . -1) (#(" " 0 1 (fontified t)) . -7077) (undo-tree-id4143 . -1) 7078) ((7075 . 7078)) (25258 11233 693127 356000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((2699 . 2700)) nil (25258 11424 910041 911000) 0 nil])
([nil nil ((7075 . 7077)) ((#("  " 0 2 (fontified t)) . 7075) (undo-tree-id4235 . -2) (undo-tree-id4236 . -2)) (25258 11233 522488 665000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((2700 . 2710)) nil (25258 11424 910040 498000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -7077) (undo-tree-id4128 . -1) (#("p" 0 1 (fontified t)) . -7078) (undo-tree-id4129 . -1) (#("e" 0 1 (fontified t)) . -7079) (undo-tree-id4130 . -1) (#("r" 0 1 (fontified t)) . -7080) (undo-tree-id4131 . -1) (#("a" 0 1 (fontified t)) . -7081) (undo-tree-id4132 . -1) (#("t" 0 1 (fontified t)) . -7082) (undo-tree-id4133 . -1) (#("i" 0 1 (fontified t)) . -7083) (undo-tree-id4134 . -1) (#("o" 0 1 (fontified t)) . -7084) (undo-tree-id4135 . -1) (#("n" 0 1 (fontified t)) . -7085) (undo-tree-id4136 . -1) (#(" " 0 1 (fontified t)) . -7086) (undo-tree-id4137 . -1) (#("!" 0 1 (fontified t)) . -7087) (undo-tree-id4138 . -1) (#("=" 0 1 (fontified t)) . -7088) (undo-tree-id4139 . -1) (#(" " 0 1 (fontified t)) . -7089) (undo-tree-id4140 . -1) 7090) ((7077 . 7090)) (25258 11233 343920 104000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("+" 0 1 (fontified t)) . -2708) (undo-tree-id4298 . -1) (#(" " 0 1 (fontified t)) . -2709) (undo-tree-id4299 . -1) 2710) nil (25258 11424 910038 214000) 0 nil])
([nil nil ((7075 . 7081) (#("   " 0 3 (fontified t)) . 7074) (undo-tree-id4126 . -1) (undo-tree-id4127 . -3) (7077 . 7078)) ((#("
" 0 1 (fontified nil)) . 7077) (undo-tree-id4233 . -1) (undo-tree-id4234 . -1) (7074 . 7077) (#("      " 0 6 (fontified t)) . 7075)) (25258 11233 154423 702000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((2708 . 2709)) nil (25258 11424 910033 154000) 0 nil])
([nil nil ((7074 . 7078)) ((#(" -> " 0 3 (fontified t) 3 4 (fontified t)) . 7074) (undo-tree-id4224 . -4) (undo-tree-id4225 . -4) (undo-tree-id4226 . -4) (undo-tree-id4227 . -4) (undo-tree-id4228 . -4) (undo-tree-id4229 . -4) (undo-tree-id4230 . -4) (undo-tree-id4231 . -4) (undo-tree-id4232 . -4)) (25258 11232 977203 253000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("-" 0 1 (fontified t)) . -2708) (undo-tree-id4297 . -1) 2709) nil (25258 11424 910030 970000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7100) (undo-tree-id4120 . -1) (#("&" 0 1 (fontified t)) . -7101) (undo-tree-id4121 . -1) (#("&" 0 1 (fontified t)) . -7102) (undo-tree-id4122 . -1) (#(" " 0 1 (fontified t)) . -7103) (undo-tree-id4123 . -1) (#("d" 0 1 (fontified t)) . -7104) (undo-tree-id4124 . -1) (#("o" 0 1 (fontified t face font-lock-keyword-face)) . -7105) (undo-tree-id4125 . -1) 7106) ((7100 . 7106)) (25258 11232 791731 614000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("\"" 0 1 (fontified nil)) . -2711) (2711 . 2712) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -2711) (2711 . 2712) (2710 . 2712) (#("\"" 0 1 (fontified nil syntax-table (15))) . -2710) (2708 . 2711)) nil (25258 11424 910017 354000) 0 nil])
([nil nil ((7100 . 7104)) ((#(" -> " 0 4 (fontified t)) . 7100)) (25258 11232 614694 992000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((2712 . 2713)) nil (25258 11424 910012 826000) 0 nil])
([nil nil ((7078 . 7079) (#(" " 0 1 (fontified t)) . 7077) (undo-tree-id4118 . -1) (undo-tree-id4119 . -1) (7078 . 7079)) ((#("
" 0 1 (fontified nil)) . 7078) (undo-tree-id4206 . -1) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) (undo-tree-id4209 . -1) (undo-tree-id4210 . -1) (undo-tree-id4211 . -1) (undo-tree-id4212 . -1) (undo-tree-id4213 . -1) (undo-tree-id4214 . -1) (undo-tree-id4215 . -1) (7077 . 7078) (#("	" 0 1 (fontified t)) . 7078) (undo-tree-id4216 . -1) (undo-tree-id4217 . -1) (undo-tree-id4218 . -1) (undo-tree-id4219 . -1) (undo-tree-id4220 . -1) (undo-tree-id4221 . -1) (undo-tree-id4222 . -1) (undo-tree-id4223 . -1)) (25258 11232 448969 977000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((2711 . 2725)) nil (25258 11424 910006 854000) 0 nil])
([nil nil ((7079 . 7084)) ((#("case " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 7079) (undo-tree-id4198 . -5) (undo-tree-id4199 . -5) (undo-tree-id4200 . -5) (undo-tree-id4201 . -5) (undo-tree-id4202 . -5) (undo-tree-id4203 . -5) (undo-tree-id4204 . -5) (undo-tree-id4205 . -5)) (25258 11232 293304 186000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((7130 . 7137) (t 25258 11424 933358 150000)) nil (25258 11456 518214 570000) 0 nil])
([nil nil ((7084 . 7093)) ((#("number do" 0 7 (fontified t) 7 9 (fontified t face font-lock-keyword-face)) . 7084) (undo-tree-id4190 . -9) (undo-tree-id4191 . -9) (undo-tree-id4192 . -9) (undo-tree-id4193 . -9) (undo-tree-id4194 . -9) (undo-tree-id4195 . -9) (undo-tree-id4196 . -9) (undo-tree-id4197 . -9)) (25258 11232 144434 901000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((7135 . 7139)) nil (25258 11456 518212 667000) 0 nil])
([nil nil ((7093 . 7099)) ((#("
	    " 0 1 (fontified t) 1 4 (fontified t) 4 6 (fontified t)) . 7093) (undo-tree-id4182 . -6) (undo-tree-id4183 . -6) (undo-tree-id4184 . -6) (undo-tree-id4185 . -6) (undo-tree-id4186 . -6) (undo-tree-id4187 . -1) (undo-tree-id4188 . -1) (undo-tree-id4189 . -6)) (25258 11231 999482 124000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("s" 0 1 (fontified t)) . -7136) (undo-tree-id4305 . -1) (#("e" 0 1 (fontified t)) . -7137) (undo-tree-id4306 . -1) (#("l" 0 1 (fontified t)) . -7138) (undo-tree-id4307 . -1) 7139) nil (25258 11456 518209 992000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7135 . 7136) (nil fontified nil 7135 . 7136) (nil fontified nil 7134 . 7135) (nil fontified nil 7133 . 7134) (nil fontified nil 7132 . 7133) (nil fontified nil 7131 . 7132) (nil fontified nil 7130 . 7131) (nil fontified nil 7129 . 7130) (nil fontified nil 7128 . 7129) (nil fontified nil 7127 . 7128) (nil fontified nil 7126 . 7127) (nil fontified nil 7125 . 7126) (nil fontified nil 7124 . 7125) (nil fontified nil 7123 . 7124) (nil fontified nil 7122 . 7123) (nil fontified nil 7121 . 7122) (nil fontified nil 7120 . 7121) (nil fontified nil 7119 . 7120) (nil fontified nil 7118 . 7119) (nil fontified nil 7117 . 7118) (nil fontified nil 7116 . 7117) (nil fontified nil 7115 . 7116) (nil fontified nil 7114 . 7115) (nil fontified nil 7113 . 7114) (nil fontified nil 7112 . 7113) (nil fontified nil 7111 . 7112) (nil fontified nil 7110 . 7111) (nil fontified nil 7109 . 7110) (nil fontified nil 7108 . 7109) (nil fontified nil 7107 . 7108) (nil fontified nil 7106 . 7107) (nil fontified nil 7105 . 7106) (nil fontified nil 7104 . 7105) (nil fontified nil 7103 . 7104) (nil fontified nil 7102 . 7103) (nil fontified nil 7101 . 7102) (nil fontified nil 7100 . 7101) (nil fontified nil 7099 . 7100) (7099 . 7136)) ((#("number |> to_charlist |> length == 10" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil) 9 10 (fontified nil) 10 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil) 13 14 (fontified nil) 14 15 (fontified nil) 15 16 (fontified nil) 16 17 (fontified nil) 17 18 (fontified nil) 18 19 (fontified nil) 19 20 (fontified nil) 20 21 (fontified nil) 21 22 (fontified nil) 22 23 (fontified nil) 23 24 (fontified nil) 24 25 (fontified nil) 25 26 (fontified nil) 26 27 (fontified nil) 27 28 (fontified nil) 28 29 (fontified nil) 29 30 (fontified nil) 30 31 (fontified nil) 31 32 (fontified nil) 32 33 (fontified nil) 33 34 (fontified nil) 34 35 (fontified nil) 35 36 (fontified nil) 36 37 (fontified nil rear-nonsticky nil)) . 7099) (undo-tree-id4177 . -37) (undo-tree-id4178 . -37) (undo-tree-id4179 . -37) (undo-tree-id4180 . -37) (undo-tree-id4181 . -37) (nil rear-nonsticky t 7135 . 7136)) (25258 11231 842318 865000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((7136 . 7140)) nil (25258 11456 518203 38000) 0 nil])
([nil nil ((7136 . 7146)) ((#(" -> number" 0 3 (fontified t) 3 4 (fontified t) 4 10 (fontified t)) . 7136) (undo-tree-id4172 . -4) (undo-tree-id4173 . -4) (undo-tree-id4174 . -4) (undo-tree-id4175 . -4) (undo-tree-id4176 . -4)) (25258 11231 666583 416000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((7142 . 7146) (#(" " 0 1 (fontified nil)) . 7139) (undo-tree-id4304 . -1) (7140 . 7141)) nil (25258 11456 518199 151000) 0 nil])
([nil nil ((7138 . 7143) (#(" " 0 1 (fontified nil)) . 7137) (undo-tree-id4115 . -1) (undo-tree-id4116 . -1) (#("  " 0 2 (fontified t)) . -7097) (undo-tree-id4117 . -2) (7140 . 7141)) ((#("
" 0 1 (fontified nil)) . 7140) (undo-tree-id4170 . -1) (undo-tree-id4171 . -1) (7097 . 7099) (7137 . 7138) (#("	    " 0 5 (fontified t)) . 7138)) (25258 11231 139459 114000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((7146 . 7149)) nil (25258 11456 518181 708000) 0 nil])
nil
([nil nil ((#("n" 0 1 (fontified t)) . -7146) (undo-tree-id4308 . -1) (#("i" 0 1 (fontified t)) . -7147) (undo-tree-id4309 . -1) (#("l" 0 1 (fontified t face elixir-atom-face)) . -7148) (undo-tree-id4310 . -1) 7149 (t 25258 11456 569883 636000)) nil (25258 11464 438809 255000) 0 nil])
([nil nil ((7146 . 7151)) nil (25258 11464 438791 692000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -7124) (undo-tree-id4311 . -1) (#("u" 0 1 (fontified t)) . -7125) (undo-tree-id4312 . -1) (#("m" 0 1 (fontified t)) . -7126) (undo-tree-id4313 . -1) (#("b" 0 1 (fontified t)) . -7127) (undo-tree-id4314 . -1) (#("e" 0 1 (fontified t)) . -7128) (undo-tree-id4315 . -1) (#("r" 0 1 (fontified t)) . -7129) (undo-tree-id4316 . -1) 7130 (t 25258 11464 454013 420000)) nil (25258 11515 432365 125000) 0 nil])
([nil nil ((7124 . 7128)) nil (25258 11515 432332 593000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t face font-lock-function-name-face)) . -7037) (undo-tree-id4325 . -1) (#("_" 0 1 (fontified t face font-lock-function-name-face)) . -7038) (undo-tree-id4326 . -1) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -7039) (undo-tree-id4327 . -1) (#("u" 0 1 (fontified t face font-lock-function-name-face)) . -7040) (undo-tree-id4328 . -1) (#("m" 0 1 (fontified t face font-lock-function-name-face)) . -7041) (undo-tree-id4329 . -1) (#("b" 0 1 (fontified t face font-lock-function-name-face)) . -7042) (undo-tree-id4330 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -7043) (undo-tree-id4331 . -1) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -7044) (undo-tree-id4332 . -1) (#("_" 0 1 (fontified t face font-lock-function-name-face)) . -7045) (undo-tree-id4333 . -1) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -7046) (undo-tree-id4334 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -7047) (undo-tree-id4335 . -1) (#("q" 0 1 (fontified t face font-lock-function-name-face)) . -7048) (undo-tree-id4336 . -1) (#("u" 0 1 (fontified t face font-lock-function-name-face)) . -7049) (undo-tree-id4337 . -1) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -7050) (undo-tree-id4338 . -1) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -7051) (undo-tree-id4339 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -7052) (undo-tree-id4340 . -1) (#("m" 0 1 (fontified t face font-lock-function-name-face)) . -7053) (undo-tree-id4341 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -7054) (undo-tree-id4342 . -1) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -7055) (undo-tree-id4343 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -7056) (undo-tree-id4344 . -1) (#("s" 0 1 (fontified t face font-lock-function-name-face)) . -7057) (undo-tree-id4345 . -1) 7058 (t 25258 11515 458842 389000)) nil (25258 11897 555688 360000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-function-name-face)) . -7033) (undo-tree-id4321 . -1) (#("h" 0 1 (fontified t face font-lock-function-name-face)) . -7034) (undo-tree-id4322 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -7035) (undo-tree-id4323 . -1) (#("c" 0 1 (fontified t face font-lock-function-name-face)) . -7036) (undo-tree-id4324 . -1) 7037) nil (25258 11897 555643 460000) 0 nil])
([nil nil ((7033 . 7036)) nil (25258 11897 555630 697000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t face font-lock-function-name-face)) . -7033) (undo-tree-id4318 . -1) (#("s" 0 1 (fontified t face font-lock-function-name-face)) . -7034) (undo-tree-id4319 . -1) (#("_" 0 1 (fontified t face font-lock-function-name-face)) . -7035) (undo-tree-id4320 . -1) 7036) nil (25258 11897 555627 361000) 0 nil])
([nil nil ((7033 . 7046)) nil (25258 11897 555618 686000) 0 nil])
([nil nil ((7046 . 7047)) nil (25258 11897 555616 462000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t face font-lock-function-name-face)) . -7046) (undo-tree-id4317 . -1) 7047) nil (25258 11897 555612 104000) 0 nil])
([nil nil ((7046 . 7053)) nil (25258 11897 555589 403000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -7128) (undo-tree-id4351 . -1) (#("l" 0 1 (fontified t)) . -7129) (undo-tree-id4352 . -1) (#("s" 0 1 (fontified t)) . -7130) (undo-tree-id4353 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -7131) (undo-tree-id4354 . -1) 7132 (t 25258 11897 571605 847000)) nil (25258 12045 968301 792000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 7128) (undo-tree-id4347 . -1) (undo-tree-id4348 . -1) (undo-tree-id4349 . -1) (undo-tree-id4350 . -1)) nil (25258 12045 968297 43000) 0 nil])
([nil nil ((#("      false" 0 6 (fontified t) 6 11 (fontified t face elixir-atom-face)) . 7128) (undo-tree-id4346 . -11)) nil (25258 12045 968290 70000) 0 nil])
([nil nil ((#("k" 0 1 (fontified t)) . -2647) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (#("_" 0 1 (fontified t)) . -2648) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (#("n" 0 1 (fontified t)) . -2649) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (#("u" 0 1 (fontified t)) . -2650) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1) (#("m" 0 1 (fontified t)) . -2651) (undo-tree-id4371 . -1) (undo-tree-id4372 . -1) (#("b" 0 1 (fontified t)) . -2652) (undo-tree-id4373 . -1) (undo-tree-id4374 . -1) (#("e" 0 1 (fontified t)) . -2653) (undo-tree-id4375 . -1) (undo-tree-id4376 . -1) (#("r" 0 1 (fontified t)) . -2654) (undo-tree-id4377 . -1) (undo-tree-id4378 . -1) (#("_" 0 1 (fontified t)) . -2655) (undo-tree-id4379 . -1) (undo-tree-id4380 . -1) (#("r" 0 1 (fontified t)) . -2656) (undo-tree-id4381 . -1) (undo-tree-id4382 . -1) (#("e" 0 1 (fontified t)) . -2657) (undo-tree-id4383 . -1) (undo-tree-id4384 . -1) (#("q" 0 1 (fontified t)) . -2658) (undo-tree-id4385 . -1) (undo-tree-id4386 . -1) (#("u" 0 1 (fontified t)) . -2659) (undo-tree-id4387 . -1) (undo-tree-id4388 . -1) (#("i" 0 1 (fontified t)) . -2660) (undo-tree-id4389 . -1) (undo-tree-id4390 . -1) (#("r" 0 1 (fontified t)) . -2661) (undo-tree-id4391 . -1) (undo-tree-id4392 . -1) (#("e" 0 1 (fontified t)) . -2662) (undo-tree-id4393 . -1) (undo-tree-id4394 . -1) (#("m" 0 1 (fontified t)) . -2663) (undo-tree-id4395 . -1) (undo-tree-id4396 . -1) (#("e" 0 1 (fontified t)) . -2664) (undo-tree-id4397 . -1) (undo-tree-id4398 . -1) (#("n" 0 1 (fontified t)) . -2665) (undo-tree-id4399 . -1) (undo-tree-id4400 . -1) (#("t" 0 1 (fontified t)) . -2666) (undo-tree-id4401 . -1) (undo-tree-id4402 . -1) (#("s" 0 1 (fontified t)) . -2667) (undo-tree-id4403 . -1) (undo-tree-id4404 . -1) 2668 (t 25258 12045 984195 489000)) nil (25258 12085 533475 390000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -2643) (undo-tree-id4355 . -1) (undo-tree-id4356 . -1) (#("h" 0 1 (fontified t)) . -2644) (undo-tree-id4357 . -1) (undo-tree-id4358 . -1) (#("e" 0 1 (fontified t)) . -2645) (undo-tree-id4359 . -1) (undo-tree-id4360 . -1) (#("c" 0 1 (fontified t)) . -2646) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) 2647) nil (25258 12085 533377 41000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2661 . 2662) (nil fontified nil 2648 . 2662) (nil fontified nil 2643 . 2648) (2643 . 2662)) nil (25258 12085 533346 215000) 0 nil])
([nil nil ((2662 . 2663)) nil (25258 12085 533337 720000) 0 nil])
([nil nil ((7118 . 7125) (t 25258 12085 557680 431000)) nil (25258 12110 412936 73000) 0 nil])
([nil nil ((7123 . 7133)) nil (25258 12110 412934 851000) 0 nil])
([nil nil ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 7136) (undo-tree-id4405 . -5) (undo-tree-id4406 . -5) (undo-tree-id4407 . -5) (undo-tree-id4408 . -5) (undo-tree-id4409 . -5)) nil (25258 12110 412930 553000) 0 nil])
([nil nil ((#("IO.inspect(status_code)" 0 2 (face font-lock-type-face fontified t) 2 10 (fontified t) 10 22 (fontified t) 22 23 (fontified t)) . 5381) (undo-tree-id4414 . -10) (undo-tree-id4415 . -23) (t 25258 12110 428198 436000)) nil (25258 12308 976153 92000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5381) (undo-tree-id4410 . -1) (undo-tree-id4411 . -1) (undo-tree-id4412 . -1) (undo-tree-id4413 . -1)) nil (25258 12308 976145 47000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 5381) (#(" " 0 1 (fontified t)) . 5381) (#(" " 0 1 (fontified t)) . 5381) (#(" " 0 1 (fontified t)) . 5381)) nil (25258 12308 976115 273000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -5596) (undo-tree-id4416 . -1) (undo-tree-id4417 . -1) (undo-tree-id4418 . -1) (undo-tree-id4419 . -1) (undo-tree-id4420 . -1) (undo-tree-id4421 . -1) (undo-tree-id4422 . -1) (undo-tree-id4423 . -1) (undo-tree-id4424 . -1) (undo-tree-id4425 . -1) (undo-tree-id4426 . -1) (undo-tree-id4427 . -1) (undo-tree-id4428 . -1) (undo-tree-id4429 . -1) (undo-tree-id4430 . -1) (undo-tree-id4431 . -1) (undo-tree-id4432 . -1) (undo-tree-id4433 . -1) (undo-tree-id4434 . -1) (undo-tree-id4435 . -1) (undo-tree-id4436 . -1) (undo-tree-id4437 . -1) (undo-tree-id4438 . -1) (undo-tree-id4439 . -1) (undo-tree-id4440 . -1) (undo-tree-id4441 . -1) (undo-tree-id4442 . -1) (undo-tree-id4443 . -1) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (#("#" 0 1 (elixir-interpolation (t #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-variable-name-face)) . -5597) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (#("{" 0 1 (fontified t face font-lock-variable-name-face)) . -5598) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) (undo-tree-id4455 . -1) (undo-tree-id4456 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -5599) (undo-tree-id4457 . -1) (undo-tree-id4458 . -1) (undo-tree-id4459 . -1) (undo-tree-id4460 . -1) (undo-tree-id4461 . -1) (undo-tree-id4462 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5600) (undo-tree-id4463 . -1) (undo-tree-id4464 . -1) (undo-tree-id4465 . -1) (undo-tree-id4466 . -1) (undo-tree-id4467 . -1) (undo-tree-id4468 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -5601) (undo-tree-id4469 . -1) (undo-tree-id4470 . -1) (undo-tree-id4471 . -1) (undo-tree-id4472 . -1) (undo-tree-id4473 . -1) (undo-tree-id4474 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -5602) (undo-tree-id4475 . -1) (undo-tree-id4476 . -1) (undo-tree-id4477 . -1) (undo-tree-id4478 . -1) (undo-tree-id4479 . -1) (undo-tree-id4480 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -5603) (undo-tree-id4481 . -1) (undo-tree-id4482 . -1) (undo-tree-id4483 . -1) (undo-tree-id4484 . -1) (undo-tree-id4485 . -1) (undo-tree-id4486 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -5604) (undo-tree-id4487 . -1) (undo-tree-id4488 . -1) (undo-tree-id4489 . -1) (undo-tree-id4490 . -1) (undo-tree-id4491 . -1) (undo-tree-id4492 . -1) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -5605) (undo-tree-id4493 . -1) (undo-tree-id4494 . -1) (undo-tree-id4495 . -1) (undo-tree-id4496 . -1) (undo-tree-id4497 . -1) (undo-tree-id4498 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -5606) (undo-tree-id4499 . -1) (undo-tree-id4500 . -1) (undo-tree-id4501 . -1) (undo-tree-id4502 . -1) (undo-tree-id4503 . -1) (undo-tree-id4504 . -1) (#("(" 0 1 (fontified t face font-lock-variable-name-face)) . -5607) (undo-tree-id4505 . -1) (undo-tree-id4506 . -1) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (#(")" 0 1 (fontified t face font-lock-variable-name-face)) . -5608) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1) (#("}" 0 1 (fontified t face font-lock-variable-name-face)) . -5609) (undo-tree-id4517 . -1) (undo-tree-id4518 . -1) (undo-tree-id4519 . -1) (undo-tree-id4520 . -1) (undo-tree-id4521 . -1) (undo-tree-id4522 . 1) (undo-tree-id4523 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -5610) (undo-tree-id4524 . -1) 5611 (t 25258 12308 994676 465000)) nil (25258 12321 779092 386000) 0 nil])
([nil nil ((5596 . 5597) (#("\"" 0 1 (fontified nil syntax-table (15))) . -5596) (5596 . 5597)) nil (25258 12321 778890 144000) 0 nil])
([nil nil ((#("." 0 1 (fontified t face font-lock-variable-name-face)) . -5625) (undo-tree-id4525 . -1) (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . -5626) (undo-tree-id4526 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -5627) (undo-tree-id4527 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -5628) (undo-tree-id4528 . -1) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -5629) (undo-tree-id4529 . -1) 5630 (t 25258 12321 798183 294000)) nil (25258 12387 686767 321000) 0 nil])
([nil nil ((#("R" 0 1 (fontified t face font-lock-string-face)) . -5605) (undo-tree-id4530 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5606) (undo-tree-id4531 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5607) (undo-tree-id4532 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -5608) (undo-tree-id4533 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -5609) (undo-tree-id4534 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -5610) (undo-tree-id4535 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -5611) (undo-tree-id4536 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -5612) (undo-tree-id4537 . -1) 5613 (t 25258 12387 703837 179000)) nil (25258 12394 507043 113000) 0 nil])
([nil nil ((5605 . 5610)) nil (25258 12394 507005 313000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5642 . 5643) (nil fontified nil 5630 . 5643) (nil fontified nil 5629 . 5630) (nil fontified nil 5612 . 5629) (5612 . 5643) (t 25258 12394 535611 419000)) nil (25258 12434 272255 745000) 0 nil])
([nil nil ((5643 . 5645)) nil (25258 12434 272251 898000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5731 . 5732) (nil fontified nil 5719 . 5732) (nil fontified nil 5718 . 5719) (nil fontified nil 5701 . 5718) (5701 . 5732)) nil (25258 12434 272249 644000) 0 nil])
([nil nil ((5732 . 5734)) nil (25258 12434 272246 207000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5825 . 5826) (nil fontified nil 5813 . 5826) (nil fontified nil 5812 . 5813) (nil fontified nil 5795 . 5812) (5795 . 5826)) nil (25258 12434 272243 823000) 0 nil])
([nil nil ((5826 . 5828)) nil (25258 12434 272240 56000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5934 . 5935) (nil fontified nil 5922 . 5935) (nil fontified nil 5921 . 5922) (nil fontified nil 5904 . 5921) (5904 . 5935)) nil (25258 12434 272236 449000) 0 nil])
([nil nil ((5935 . 5937)) nil (25258 12434 272227 463000) 0 nil])
([nil nil ((5937 . 5940) (t 25258 12434 302357 720000)) nil (25258 12444 281816 228000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t face font-lock-string-face)) . -5938) (undo-tree-id4541 . -1) (undo-tree-id4542 . -1) (undo-tree-id4543 . -1) (undo-tree-id4544 . -1) (undo-tree-id4545 . -1) (undo-tree-id4546 . -1) (undo-tree-id4547 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -5939) (undo-tree-id4548 . -1) (undo-tree-id4549 . -1) (undo-tree-id4550 . -1) 5940) nil (25258 12444 281812 30000) 0 nil])
([nil nil ((5938 . 5951)) nil (25258 12444 281792 43000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -5950) (undo-tree-id4538 . -1) (undo-tree-id4539 . -1) (undo-tree-id4540 . -1) 5951) nil (25258 12444 281787 375000) 0 nil])
([nil nil ((5950 . 5952)) nil (25258 12444 281760 756000) 0 nil])
([nil nil ((5752 . 5759) (t 25258 12444 302058 105000)) nil (25258 12663 50717 36000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5836 . 5837) (nil fontified nil 5804 . 5837) (nil fontified nil 5798 . 5804) (nil fontified nil 5795 . 5798) (nil fontified nil 5775 . 5795) (nil fontified nil 5774 . 5775) (nil fontified nil 5772 . 5774) (nil fontified nil 5764 . 5772) (nil fontified nil 5759 . 5764) (5759 . 5837)) nil (25258 12663 50713 710000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -5815) (undo-tree-id4619 . -1) (#("r" 0 1 (fontified t)) . -5816) (undo-tree-id4620 . -1) (#("_" 0 1 (fontified t)) . -5817) (undo-tree-id4621 . -1) (#("r" 0 1 (fontified t)) . -5818) (undo-tree-id4622 . -1) (#("e" 0 1 (fontified t)) . -5819) (undo-tree-id4623 . -1) (#("s" 0 1 (fontified t)) . -5820) (undo-tree-id4624 . -1) (#("p" 0 1 (fontified t)) . -5821) (undo-tree-id4625 . -1) (#("." 0 1 (fontified t)) . -5822) (undo-tree-id4626 . -1) (#("b" 0 1 (fontified t)) . -5823) (undo-tree-id4627 . -1) (#("o" 0 1 (fontified t)) . -5824) (undo-tree-id4628 . -1) (#("d" 0 1 (fontified t)) . -5825) (undo-tree-id4629 . -1) (#("y" 0 1 (fontified t)) . -5826) (undo-tree-id4630 . -1) (#("," 0 1 (fontified t)) . -5827) (undo-tree-id4631 . -1) (#(" " 0 1 (fontified t)) . -5828) (undo-tree-id4632 . -1) (#("5" 0 1 (fontified t)) . -5829) (undo-tree-id4633 . -1) (#("5" 0 1 (fontified t)) . -5830) (undo-tree-id4634 . -1) (#("." 0 1 (fontified t)) . -5831) (undo-tree-id4635 . -1) (#("." 0 1 (fontified t)) . -5832) (undo-tree-id4636 . -1) (#("5" 0 1 (fontified t)) . -5833) (undo-tree-id4637 . -1) (#("7" 0 1 (fontified t)) . -5834) (undo-tree-id4638 . -1) (#(")" 0 1 (fontified t)) . -5835) (undo-tree-id4639 . -1) (undo-tree-id4640 . 1) (undo-tree-id4641 . -1) 5836) nil (25258 12663 50700 706000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -5811) (undo-tree-id4615 . -1) (#("e" 0 1 (fontified t)) . -5812) (undo-tree-id4616 . -1) (#("r" 0 1 (fontified t)) . -5813) (undo-tree-id4617 . -1) (#("v" 0 1 (fontified t)) . -5814) (undo-tree-id4618 . -1) 5815) nil (25258 12663 50652 386000) 0 nil])
([nil nil ((#("(" 0 1 (fontified nil)) . -5810) (undo-tree-id4610 . -1) (undo-tree-id4611 . -1) (undo-tree-id4612 . -1) (#(")" 0 1 (fontified t rear-nonsticky t)) . 5811) (undo-tree-id4613 . -1) (undo-tree-id4614 . -1)) nil (25258 12663 50640 595000) 0 nil])
([nil nil ((#("S" 0 1 (fontified t face font-lock-type-face)) . -5798) (undo-tree-id4574 . -1) (undo-tree-id4575 . -1) (undo-tree-id4576 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -5799) (undo-tree-id4577 . -1) (undo-tree-id4578 . -1) (undo-tree-id4579 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -5800) (undo-tree-id4580 . -1) (undo-tree-id4581 . -1) (undo-tree-id4582 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -5801) (undo-tree-id4583 . -1) (undo-tree-id4584 . -1) (undo-tree-id4585 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -5802) (undo-tree-id4586 . -1) (undo-tree-id4587 . -1) (undo-tree-id4588 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -5803) (undo-tree-id4589 . -1) (undo-tree-id4590 . -1) (undo-tree-id4591 . -1) (#("." 0 1 (fontified t)) . -5804) (undo-tree-id4592 . -1) (undo-tree-id4593 . -1) (undo-tree-id4594 . -1) (#("s" 0 1 (fontified t)) . -5805) (undo-tree-id4595 . -1) (undo-tree-id4596 . -1) (undo-tree-id4597 . -1) (#("l" 0 1 (fontified t)) . -5806) (undo-tree-id4598 . -1) (undo-tree-id4599 . -1) (undo-tree-id4600 . -1) (#("i" 0 1 (fontified t)) . -5807) (undo-tree-id4601 . -1) (undo-tree-id4602 . -1) (undo-tree-id4603 . -1) (#("c" 0 1 (fontified t)) . -5808) (undo-tree-id4604 . -1) (undo-tree-id4605 . -1) (undo-tree-id4606 . -1) (#("e" 0 1 (fontified t)) . -5809) (undo-tree-id4607 . -1) (undo-tree-id4608 . -1) (undo-tree-id4609 . -1) 5810) nil (25258 12663 50623 292000) 0 nil])
([nil nil ((5798 . 5809)) nil (25258 12663 50556 118000) 0 nil])
([nil nil ((#("4" 0 1 (fontified t face font-lock-string-face)) . -5777) (undo-tree-id4573 . -1) 5778) nil (25258 12663 50553 703000) 0 nil])
([nil nil ((5777 . 5778)) nil (25258 12663 50549 576000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t face font-lock-string-face)) . -5779) (undo-tree-id4568 . -1) (#("|" 0 1 (fontified t face font-lock-string-face)) . -5780) (undo-tree-id4569 . -1) (#("3" 0 1 (fontified t face font-lock-string-face)) . -5781) (undo-tree-id4570 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -5782) (undo-tree-id4571 . -1) (#("6" 0 1 (fontified t face font-lock-string-face)) . -5783) (undo-tree-id4572 . -1) 5784) nil (25258 12663 50545 819000) 0 nil])
([nil nil ((5778 . 5779)) nil (25258 12663 50534 417000) 0 nil])
([nil nil ((5779 . 5780)) nil (25258 12663 50532 544000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t face font-lock-string-face)) . -5780) (undo-tree-id4557 . -1) (#("]" 0 1 (fontified t face font-lock-string-face)) . -5781) (undo-tree-id4558 . -1) (undo-tree-id4559 . 1) (undo-tree-id4560 . -1) (#("[" 0 1 (fontified t face font-lock-string-face)) . -5782) (undo-tree-id4561 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -5783) (undo-tree-id4562 . -1) (#("-" 0 1 (fontified t face font-lock-string-face)) . -5784) (undo-tree-id4563 . -1) (#("1" 0 1 (fontified t face font-lock-string-face)) . -5785) (undo-tree-id4564 . -1) (#("]" 0 1 (fontified t face font-lock-string-face)) . -5786) (undo-tree-id4565 . -1) (undo-tree-id4566 . 1) (undo-tree-id4567 . -1) 5787) nil (25258 12663 50527 595000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t face font-lock-string-face)) . -5783) (undo-tree-id4556 . -1) 5784) nil (25258 12663 50505 403000) 0 nil])
([nil nil ((5783 . 5784)) nil (25258 12663 50500 795000) 0 nil])
([nil nil ((#("0" 0 1 (fontified t face font-lock-string-face)) . -5779) (undo-tree-id4555 . -1) 5780) nil (25258 12663 50497 148000) 0 nil])
([nil nil ((#("|" 0 1 (fontified t face font-lock-string-face)) . -5779) (undo-tree-id4551 . -1) (#("5" 0 1 (fontified t face font-lock-string-face)) . -5780) (undo-tree-id4552 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -5781) (undo-tree-id4553 . -1) (#("2" 0 1 (fontified t face font-lock-string-face)) . -5782) (undo-tree-id4554 . -1) 5783) nil (25258 12663 50482 922000) 0 nil])
([nil nil ((5794 . 5797) (t 25258 12663 68830 73000)) nil (25258 12683 359860 713000) 0 nil])
([nil nil ((5797 . 5798)) nil (25258 12683 359858 439000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5892 . 5893) (nil fontified nil 5892 . 5893) (nil fontified nil 5891 . 5892) (nil fontified nil 5876 . 5891) (nil fontified nil 5875 . 5876) (nil fontified nil 5860 . 5875) (nil fontified nil 5858 . 5860) (nil fontified nil 5857 . 5858) (nil fontified nil 5845 . 5857) (nil fontified nil 5844 . 5845) (nil fontified nil 5827 . 5844) (nil fontified nil 5812 . 5827) (nil fontified nil 5811 . 5812) (nil fontified nil 5804 . 5811) (nil fontified nil 5798 . 5804) (5798 . 5893)) nil (25258 12683 359854 572000) 0 nil])
([nil nil ((5894 . 5895)) nil (25258 12683 359845 545000) 0 nil])
([nil nil ((6004 . 6005)) nil (25258 12683 359838 612000) 0 nil])
([nil nil ((5780 . 5781) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -5780) (5780 . 5781) (t 25258 12683 388454 27000)) nil (25258 12724 958431 613000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t face font-lock-string-face)) . -5780) (undo-tree-id4642 . -1) (undo-tree-id4643 . 1) (undo-tree-id4644 . -1) 5781 (t 25258 12724 975732 470000)) nil (25258 12742 246792 581000) 0 nil])
([nil nil ((5794 . 5795) (#(")" 0 1 (fontified nil)) . -5794) (5794 . 5795)) nil (25258 12742 246766 392000) 0 nil])
([nil nil ((5753 . 5754) (t 25258 12742 271450 456000)) nil (25258 12882 913179 802000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -5896) (undo-tree-id4646 . -1) 5897) nil (25258 12882 913175 775000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6005) (undo-tree-id4645 . -1) 6006) nil (25258 12882 913165 486000) 0 nil])
([nil nil ((7129 . 7131) (#("  " 0 2 (fontified nil)) . 7128) (7128 . 7130) (7128 . 7129) (t 25258 12882 941503 523000)) nil (25258 13281 951288 697000) 0 nil])
([nil nil ((7129 . 7131) (#("  " 0 2 (fontified nil)) . 7128) (7128 . 7130) (7128 . 7129)) nil (25258 13281 951287 214000) 0 nil])
([nil nil ((7131 . 7152)) nil (25258 13281 951286 132000) 0 nil])
([nil nil ((7152 . 7153)) nil (25258 13281 951285 551000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7154) (7154 . 7155) (#(")" 0 1 (fontified nil)) . -7154) (7154 . 7155) (7153 . 7155)) nil (25258 13281 951284 629000) 0 nil])
([nil nil ((7154 . 7160)) nil (25258 13281 951283 477000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -7155) (undo-tree-id5391 . -1) (#("a" 0 1 (fontified t)) . -7156) (undo-tree-id5392 . -1) (#("t" 0 1 (fontified t)) . -7157) (undo-tree-id5393 . -1) (#("i" 0 1 (fontified t)) . -7158) (undo-tree-id5394 . -1) (#("s" 0 1 (fontified t)) . -7159) (undo-tree-id5395 . -1) 7160) nil (25258 13281 951281 914000) 0 nil])
([nil nil ((7155 . 7159)) nil (25258 13281 951277 576000) 0 nil])
([nil nil ((7160 . 7161)) nil (25258 13281 951276 945000) 0 nil])
([nil nil ((7161 . 7163)) nil (25258 13281 951276 384000) 0 nil])
([nil nil ((7163 . 7168)) nil (25258 13281 951275 753000) 0 nil])
([nil nil ((7168 . 7171)) nil (25258 13281 951275 182000) 0 nil])
([nil nil ((7163 . 7168)) nil (25258 13281 951274 611000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t face font-lock-function-name-face)) . -7136) (undo-tree-id5374 . -1) (#("h" 0 1 (fontified t face font-lock-function-name-face)) . -7137) (undo-tree-id5375 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -7138) (undo-tree-id5376 . -1) (#("c" 0 1 (fontified t face font-lock-function-name-face)) . -7139) (undo-tree-id5377 . -1) (#("k" 0 1 (fontified t face font-lock-function-name-face)) . -7140) (undo-tree-id5378 . -1) (#("_" 0 1 (fontified t face font-lock-function-name-face)) . -7141) (undo-tree-id5379 . -1) (#("s" 0 1 (fontified t face font-lock-function-name-face)) . -7142) (undo-tree-id5380 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -7143) (undo-tree-id5381 . -1) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -7144) (undo-tree-id5382 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -7145) (undo-tree-id5383 . -1) (#("u" 0 1 (fontified t face font-lock-function-name-face)) . -7146) (undo-tree-id5384 . -1) (#("s" 0 1 (fontified t face font-lock-function-name-face)) . -7147) (undo-tree-id5385 . -1) (#("_" 0 1 (fontified t face font-lock-function-name-face)) . -7148) (undo-tree-id5386 . -1) (#("c" 0 1 (fontified t face font-lock-function-name-face)) . -7149) (undo-tree-id5387 . -1) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -7150) (undo-tree-id5388 . -1) (#("d" 0 1 (fontified t face font-lock-function-name-face)) . -7151) (undo-tree-id5389 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -7152) (undo-tree-id5390 . -1) 7153) nil (25258 13281 951271 675000) 0 nil])
([nil nil ((7136 . 7137)) nil (25258 13281 951259 743000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t face font-lock-function-name-face)) . -7136) (undo-tree-id5373 . -1) 7137) nil (25258 13281 951258 951000) 0 nil])
([nil nil ((7141 . 7142) (#(")" 0 1 (fontified nil face font-lock-function-name-face)) . -7141) (7136 . 7142)) nil (25258 13281 951257 388000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . -7141) (undo-tree-id5370 . -1) (undo-tree-id5371 . 1) (undo-tree-id5372 . -1) 7142) nil (25258 13281 951256 116000) 0 nil])
([nil nil ((7141 . 7152)) nil (25258 13281 951253 712000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-function-name-face)) . -7142) (undo-tree-id5365 . -1) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -7143) (undo-tree-id5366 . -1) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -7144) (undo-tree-id5367 . -1) (#("o" 0 1 (fontified t face font-lock-function-name-face)) . -7145) (undo-tree-id5368 . -1) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -7146) (undo-tree-id5369 . -1) 7147) nil (25258 13281 951252 219000) 0 nil])
([nil nil ((7142 . 7148)) nil (25258 13281 951248 211000) 0 nil])
([nil nil ((7067 . 7068)) nil (25258 13281 951247 640000) 0 nil])
([nil nil ((5454 . 5455)) nil (25258 13281 951247 89000) 0 nil])
([nil nil ((5479 . 5480)) nil (25258 13281 951246 528000) 0 nil])
([nil nil ((5572 . 5573)) nil (25258 13281 951245 967000) 0 nil])
([nil nil ((5662 . 5663)) nil (25258 13281 951245 346000) 0 nil])
([nil nil ((5900 . 5901)) nil (25258 13281 951244 715000) 0 nil])
([nil nil ((6010 . 6011)) nil (25258 13281 951244 144000) 0 nil])
([nil nil ((6120 . 6121)) nil (25258 13281 951243 503000) 0 nil])
([nil nil ((6141 . 6142)) nil (25258 13281 951242 921000) 0 nil])
([nil nil ((6155 . 6159) (#("    " 0 4 (fontified nil)) . 6154) (undo-tree-id5364 . -4) (6154 . 6159) (6141 . 6145) (6149 . 6150)) nil (25258 13281 951242 80000) 0 nil])
([nil nil ((6155 . 6159) (#("    " 0 4 (fontified nil face font-lock-comment-face)) . 6154) (6154 . 6158) (6154 . 6155)) nil (25258 13281 951240 176000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6853 . 6854) (nil fontified nil 6851 . 6854) (nil fontified nil 6847 . 6851) (nil fontified nil 6846 . 6847) (nil fontified nil 6845 . 6846) (nil fontified nil 6843 . 6845) (nil fontified nil 6833 . 6843) (nil fontified nil 6832 . 6833) (nil fontified nil 6826 . 6832) (nil fontified nil 6825 . 6826) (nil fontified nil 6824 . 6825) (nil fontified nil 6823 . 6824) (nil fontified nil 6822 . 6823) (nil fontified nil 6807 . 6822) (nil fontified nil 6806 . 6807) (nil fontified nil 6789 . 6806) (nil fontified nil 6788 . 6789) (nil fontified nil 6776 . 6788) (nil fontified nil 6775 . 6776) (nil fontified nil 6758 . 6775) (nil fontified nil 6743 . 6758) (nil fontified nil 6742 . 6743) (nil fontified nil 6735 . 6742) (nil fontified nil 6729 . 6735) (nil fontified nil 6722 . 6729) (nil fontified nil 6716 . 6722) (nil fontified nil 6715 . 6716) (nil fontified nil 6714 . 6715) (nil fontified nil 6713 . 6714) (nil fontified nil 6712 . 6713) (nil fontified nil 6697 . 6712) (nil fontified nil 6696 . 6697) (nil fontified nil 6681 . 6696) (nil fontified nil 6679 . 6681) (nil fontified nil 6678 . 6679) (nil fontified nil 6666 . 6678) (nil fontified nil 6665 . 6666) (nil fontified nil 6648 . 6665) (nil fontified nil 6633 . 6648) (nil fontified nil 6632 . 6633) (nil fontified nil 6625 . 6632) (nil fontified nil 6619 . 6625) (nil fontified nil 6612 . 6619) (nil fontified nil 6606 . 6612) (nil fontified nil 6605 . 6606) (nil fontified nil 6604 . 6605) (nil fontified nil 6603 . 6604) (nil fontified nil 6602 . 6603) (nil fontified nil 6587 . 6602) (nil fontified nil 6586 . 6587) (nil fontified nil 6571 . 6586) (nil fontified nil 6569 . 6571) (nil fontified nil 6568 . 6569) (nil fontified nil 6556 . 6568) (nil fontified nil 6555 . 6556) (nil fontified nil 6538 . 6555) (nil fontified nil 6523 . 6538) (nil fontified nil 6522 . 6523) (nil fontified nil 6515 . 6522) (nil fontified nil 6509 . 6515) (nil fontified nil 6505 . 6509) (nil fontified nil 6504 . 6505) (nil fontified nil 6490 . 6504) (nil fontified nil 6485 . 6490) (nil fontified nil 6484 . 6485) (nil fontified nil 6482 . 6484) (nil fontified nil 6474 . 6482) (nil fontified nil 6469 . 6474) (nil fontified nil 6463 . 6469) (nil fontified nil 6462 . 6463) (nil fontified nil 6461 . 6462) (nil fontified nil 6460 . 6461) (nil fontified nil 6459 . 6460) (nil fontified nil 6443 . 6459) (nil fontified nil 6441 . 6443) (nil fontified nil 6440 . 6441) (nil fontified nil 6428 . 6440) (nil fontified nil 6427 . 6428) (nil fontified nil 6410 . 6427) (nil fontified nil 6395 . 6410) (nil fontified nil 6394 . 6395) (nil fontified nil 6387 . 6394) (nil fontified nil 6381 . 6387) (nil fontified nil 6374 . 6381) (nil fontified nil 6368 . 6374) (nil fontified nil 6367 . 6368) (nil fontified nil 6366 . 6367) (nil fontified nil 6365 . 6366) (nil fontified nil 6364 . 6365) (nil fontified nil 6354 . 6364) (nil fontified nil 6353 . 6354) (nil fontified nil 6351 . 6353) (nil fontified nil 6350 . 6351) (nil fontified nil 6338 . 6350) (nil fontified nil 6337 . 6338) (nil fontified nil 6320 . 6337) (nil fontified nil 6319 . 6320) (nil fontified nil 6318 . 6319) (nil fontified nil 6312 . 6318) (nil fontified nil 6305 . 6312) (nil fontified nil 6304 . 6305) (nil fontified nil 6300 . 6304) (nil fontified nil 6297 . 6300) (nil fontified nil 6291 . 6297) (nil fontified nil 6284 . 6291) (nil fontified nil 6278 . 6284) (nil fontified nil 6277 . 6278) (nil fontified nil 6276 . 6277) (nil fontified nil 6275 . 6276) (nil fontified nil 6274 . 6275) (nil fontified nil 6272 . 6274) (nil fontified nil 6265 . 6272) (nil fontified nil 6264 . 6265) (nil fontified nil 6261 . 6264) (nil fontified nil 6248 . 6261) (nil fontified nil 6247 . 6248) (nil fontified nil 6212 . 6247) (nil fontified nil 6211 . 6212) (nil fontified nil 6204 . 6211) (nil fontified nil 6198 . 6204) (nil fontified nil 6191 . 6198) (nil fontified nil 6185 . 6191) (nil fontified nil 6184 . 6185) (nil fontified nil 6183 . 6184) (nil fontified nil 6181 . 6183) (nil fontified nil 6168 . 6181) (nil fontified nil 6164 . 6168) (nil fontified nil 6160 . 6164) (nil fontified nil 6159 . 6160) (6159 . 6854)) nil (25258 13281 951233 524000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6159) (undo-tree-id5363 . -1) 6160) nil (25258 13281 951214 188000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6183) (undo-tree-id5362 . -1) 6184) nil (25258 13281 951212 765000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6275) (undo-tree-id5361 . -1) 6276) nil (25258 13281 951211 282000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6364) (undo-tree-id5360 . -1) 6365) nil (25258 13281 951209 729000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6601) (undo-tree-id5359 . -1) 6602) nil (25258 13281 951208 186000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6710) (undo-tree-id5358 . -1) 6711) nil (25258 13281 951206 473000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6458) (undo-tree-id5357 . -1) 6459) nil (25258 13281 951204 830000) 0 nil])
([nil nil ((6458 . 6459)) nil (25258 13281 951203 428000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6819) (undo-tree-id5356 . -1) 6820) nil (25258 13281 951202 536000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -6168) (undo-tree-id5344 . -1) (#("t" 0 1 (fontified t)) . -6169) (undo-tree-id5345 . -1) (#("a" 0 1 (fontified t)) . -6170) (undo-tree-id5346 . -1) (#("t" 0 1 (fontified t)) . -6171) (undo-tree-id5347 . -1) (#("u" 0 1 (fontified t)) . -6172) (undo-tree-id5348 . -1) (#("s" 0 1 (fontified t)) . -6173) (undo-tree-id5349 . -1) (#("_" 0 1 (fontified t)) . -6174) (undo-tree-id5350 . -1) (#("c" 0 1 (fontified t)) . -6175) (undo-tree-id5351 . -1) (#("o" 0 1 (fontified t)) . -6176) (undo-tree-id5352 . -1) (#("d" 0 1 (fontified t)) . -6177) (undo-tree-id5353 . -1) (#("e" 0 1 (fontified t)) . -6178) (undo-tree-id5354 . -1) (#(" " 0 1 (fontified t)) . -6179) (undo-tree-id5355 . -1) 6180) nil (25258 13281 951198 929000) 0 nil])
([nil nil ((6168 . 6174)) nil (25258 13281 951189 862000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6186) (6186 . 6187) (#(")" 0 1 (fontified nil)) . -6186) (6186 . 6187) (6174 . 6187)) nil (25258 13281 951188 850000) 0 nil])
([nil nil ((6186 . 6197)) nil (25258 13281 951187 638000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -6163) (undo-tree-id5339 . -1) (#("a" 0 1 (fontified t)) . -6164) (undo-tree-id5340 . -1) (#("s" 0 1 (fontified t)) . -6165) (undo-tree-id5341 . -1) (#("e" 0 1 (fontified t)) . -6166) (undo-tree-id5342 . -1) (#(" " 0 1 (fontified t)) . -6167) (undo-tree-id5343 . -1) 6168) nil (25258 13281 951185 965000) 0 nil])
([nil nil ((6163 . 6167)) nil (25258 13281 951182 98000) 0 nil])
([nil nil ((#("f" 0 1 (fontified t)) . -6166) (undo-tree-id5338 . -1) 6167) nil (25258 13281 951181 246000) 0 nil])
([nil nil ((6166 . 6168)) nil (25258 13281 951179 934000) 0 nil])
([nil nil ((#("(" 0 1 (fontified t)) . 6168) (undo-tree-id5336 . 1) (undo-tree-id5337 . -1) (#("e" 0 1 (fontified t)) . 6168) (#("d" 0 1 (fontified t)) . 6168) (#("o" 0 1 (fontified t)) . 6168) (#("c" 0 1 (fontified t)) . 6168) (#("_" 0 1 (fontified t face font-lock-comment-face)) . 6168) (#("s" 0 1 (fontified t)) . 6168) (#("u" 0 1 (fontified t)) . 6168) (#("t" 0 1 (fontified t)) . 6168) (#("a" 0 1 (fontified t)) . 6168) (#("t" 0 1 (fontified t)) . 6168) (#("s" 0 1 (fontified t)) . 6168) (#("_" 0 1 (fontified t face font-lock-comment-face)) . 6168) (#("e" 0 1 (fontified t)) . 6168) (#("s" 0 1 (fontified t)) . 6168) (#("r" 0 1 (fontified t)) . 6168) (#("a" 0 1 (fontified t)) . 6168) (#("p" 0 1 (fontified t)) . 6168)) nil (25258 13281 951176 778000) 0 nil])
([nil nil ((#(")" 0 1 (fontified t)) . 6179)) nil (25258 13281 951172 610000) 0 nil])
([nil nil ((6179 . 6180)) nil (25258 13281 951171 949000) 0 nil])
([nil nil ((6189 . 6203)) nil (25258 13281 951171 217000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -6201) (undo-tree-id5334 . -1) (#("-" 0 1 (fontified t)) . -6202) (undo-tree-id5335 . -1) 6203) nil (25258 13281 951170 185000) 0 nil])
([nil nil ((6201 . 6203)) nil (25258 13281 951168 202000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -6201) (undo-tree-id5332 . -1) (#("-" 0 1 (fontified t)) . -6202) (undo-tree-id5333 . -1) 6203) nil (25258 13281 951167 90000) 0 nil])
([nil nil ((6201 . 6204)) nil (25258 13281 951164 976000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t)) . -6168) (undo-tree-id5320 . -1) (#("t" 0 1 (fontified t)) . -6169) (undo-tree-id5321 . -1) (#("a" 0 1 (fontified t)) . -6170) (undo-tree-id5322 . -1) (#("t" 0 1 (fontified t)) . -6171) (undo-tree-id5323 . -1) (#("u" 0 1 (fontified t)) . -6172) (undo-tree-id5324 . -1) (#("s" 0 1 (fontified t)) . -6173) (undo-tree-id5325 . -1) (#("_" 0 1 (fontified t)) . -6174) (undo-tree-id5326 . -1) (#("c" 0 1 (fontified t)) . -6175) (undo-tree-id5327 . -1) (#("o" 0 1 (fontified t)) . -6176) (undo-tree-id5328 . -1) (#("d" 0 1 (fontified t)) . -6177) (undo-tree-id5329 . -1) (#("e" 0 1 (fontified t)) . -6178) (undo-tree-id5330 . -1) (#(" " 0 1 (fontified t)) . -6179) (undo-tree-id5331 . -1) 6180) nil (25258 13281 951162 170000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6298 . 6299) (nil fontified nil 6284 . 6299) (6284 . 6299)) nil (25258 13281 951153 63000) 0 nil])
([nil nil ((6299 . 6300)) nil (25258 13281 951152 142000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6403 . 6404) (nil fontified nil 6389 . 6404) (6389 . 6404)) nil (25258 13281 951151 440000) 0 nil])
([nil nil ((6404 . 6405)) nil (25258 13281 951150 559000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6499) (undo-tree-id5319 . -1) 6500) nil (25258 13281 951149 797000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6513 . 6514) (nil fontified nil 6499 . 6514) (6499 . 6514)) nil (25258 13281 951148 425000) 0 nil])
([nil nil ((6514 . 6515)) nil (25258 13281 951147 433000) 0 nil])
([nil nil ((#("s" 0 1 (fontified t face font-lock-comment-face)) . -6499) (undo-tree-id5303 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -6500) (undo-tree-id5304 . -1) (#("a" 0 1 (fontified t face font-lock-comment-face)) . -6501) (undo-tree-id5305 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -6502) (undo-tree-id5306 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -6503) (undo-tree-id5307 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -6504) (undo-tree-id5308 . -1) (#("_" 0 1 (fontified t face font-lock-comment-face)) . -6505) (undo-tree-id5309 . -1) (#("c" 0 1 (fontified t face font-lock-comment-face)) . -6506) (undo-tree-id5310 . -1) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -6507) (undo-tree-id5311 . -1) (#("d" 0 1 (fontified t face font-lock-comment-face)) . -6508) (undo-tree-id5312 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -6509) (undo-tree-id5313 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -6510) (undo-tree-id5314 . -1) (#("=" 0 1 (fontified t face font-lock-comment-face)) . -6511) (undo-tree-id5315 . -1) (#("=" 0 1 (fontified t face font-lock-comment-face)) . -6512) (undo-tree-id5316 . -1) (#(" " 0 1 (fontified t rear-nonsticky t face font-lock-comment-face)) . -6513) (undo-tree-id5317 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -6514) (undo-tree-id5318 . -1) 6515) nil (25258 13281 951144 798000) 0 nil])
([nil nil ((#("500 -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, Tipo de error: #{error_message}\")
      502 -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, Tipo de Error: #{error_message}\")" 0 7 (fontified t) 7 13 (fontified t face font-lock-type-face) 13 20 (fontified t) 20 21 (syntax-table (15) fontified t face font-lock-string-face) 21 36 (fontified t face font-lock-string-face) 36 43 (fontified t face font-lock-string-face) 43 53 (fontified t face font-lock-string-face) 53 54 (elixir-interpolation (t #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 54 61 (fontified t face font-lock-variable-name-face) 61 66 (fontified t face font-lock-variable-name-face) 66 67 (rear-nonsticky t fontified t face font-lock-variable-name-face) 67 69 (fontified t face font-lock-string-face) 69 76 (fontified t face font-lock-string-face) 76 84 (fontified t face font-lock-string-face) 84 85 (elixir-interpolation (t #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 85 100 (fontified t face font-lock-variable-name-face) 100 101 (syntax-table (15) fontified t face font-lock-string-face) 101 102 (fontified t) 102 103 (fontified t) 103 109 (fontified t) 109 116 (fontified t) 116 122 (fontified t face font-lock-type-face) 122 129 (fontified t) 129 130 (syntax-table (15) fontified t face font-lock-string-face) 130 145 (fontified t face font-lock-string-face) 145 162 (fontified t face font-lock-string-face) 162 163 (elixir-interpolation (t #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 163 168 (fontified t face font-lock-variable-name-face) 168 175 (fontified t face font-lock-variable-name-face) 175 176 (rear-nonsticky t fontified t face font-lock-variable-name-face) 176 193 (fontified t face font-lock-string-face) 193 194 (elixir-interpolation (t #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 194 209 (fontified t face font-lock-variable-name-face) 209 210 (syntax-table (15) fontified t face font-lock-string-face) 210 211 (fontified t)) . -6641) (undo-tree-id4973 . -103) (undo-tree-id4974 . -103) (undo-tree-id4975 . -211) (undo-tree-id4976 . -103) (undo-tree-id4977 . -53) (undo-tree-id4978 . -67) (undo-tree-id4979 . -53) (undo-tree-id4980 . -67) (undo-tree-id4981 . -84) (undo-tree-id4982 . -100) (undo-tree-id4983 . -84) (undo-tree-id4984 . -100) (undo-tree-id4985 . -162) (undo-tree-id4986 . -176) (undo-tree-id4987 . -162) (undo-tree-id4988 . -176) (undo-tree-id4989 . -193) (undo-tree-id4990 . -209) (undo-tree-id4991 . -193) (undo-tree-id4992 . -209) (undo-tree-id4993 . -53) (undo-tree-id4994 . -67) (undo-tree-id4995 . -53) (undo-tree-id4996 . -67) (undo-tree-id4997 . -84) (undo-tree-id4998 . -100) (undo-tree-id4999 . -84) (undo-tree-id5000 . -100) (undo-tree-id5001 . -162) (undo-tree-id5002 . -176) (undo-tree-id5003 . -162) (undo-tree-id5004 . -176) (undo-tree-id5005 . -193) (undo-tree-id5006 . -209) (undo-tree-id5007 . -193) (undo-tree-id5008 . -209) (undo-tree-id5009 . -53) (undo-tree-id5010 . -67) (undo-tree-id5011 . -53) (undo-tree-id5012 . -67) (undo-tree-id5013 . -84) (undo-tree-id5014 . -100) (undo-tree-id5015 . -84) (undo-tree-id5016 . -100) (undo-tree-id5017 . -162) (undo-tree-id5018 . -176) (undo-tree-id5019 . -162) (undo-tree-id5020 . -176) (undo-tree-id5021 . -193) (undo-tree-id5022 . -209) (undo-tree-id5023 . -193) (undo-tree-id5024 . -209) (undo-tree-id5025 . -53) (undo-tree-id5026 . -67) (undo-tree-id5027 . -53) (undo-tree-id5028 . -67) (undo-tree-id5029 . -84) (undo-tree-id5030 . -100) (undo-tree-id5031 . -84) (undo-tree-id5032 . -100) (undo-tree-id5033 . -162) (undo-tree-id5034 . -176) (undo-tree-id5035 . -162) (undo-tree-id5036 . -176) (undo-tree-id5037 . -193) (undo-tree-id5038 . -209) (undo-tree-id5039 . -193) (undo-tree-id5040 . -209) (undo-tree-id5041 . -53) (undo-tree-id5042 . -67) (undo-tree-id5043 . -53) (undo-tree-id5044 . -67) (undo-tree-id5045 . -84) (undo-tree-id5046 . -100) (undo-tree-id5047 . -84) (undo-tree-id5048 . -100) (undo-tree-id5049 . -162) (undo-tree-id5050 . -176) (undo-tree-id5051 . -162) (undo-tree-id5052 . -176) (undo-tree-id5053 . -193) (undo-tree-id5054 . -209) (undo-tree-id5055 . -193) (undo-tree-id5056 . -209) (undo-tree-id5057 . -53) (undo-tree-id5058 . -67) (undo-tree-id5059 . -53) (undo-tree-id5060 . -67) (undo-tree-id5061 . -84) (undo-tree-id5062 . -100) (undo-tree-id5063 . -84) (undo-tree-id5064 . -100) (undo-tree-id5065 . -162) (undo-tree-id5066 . -176) (undo-tree-id5067 . -162) (undo-tree-id5068 . -176) (undo-tree-id5069 . -193) (undo-tree-id5070 . -209) (undo-tree-id5071 . -193) (undo-tree-id5072 . -209) (undo-tree-id5073 . -53) (undo-tree-id5074 . -67) (undo-tree-id5075 . -53) (undo-tree-id5076 . -67) (undo-tree-id5077 . -84) (undo-tree-id5078 . -100) (undo-tree-id5079 . -84) (undo-tree-id5080 . -100) (undo-tree-id5081 . -162) (undo-tree-id5082 . -176) (undo-tree-id5083 . -162) (undo-tree-id5084 . -176) (undo-tree-id5085 . -193) (undo-tree-id5086 . -209) (undo-tree-id5087 . -193) (undo-tree-id5088 . -209) (undo-tree-id5089 . -53) (undo-tree-id5090 . -67) (undo-tree-id5091 . -53) (undo-tree-id5092 . -67) (undo-tree-id5093 . -84) (undo-tree-id5094 . -100) (undo-tree-id5095 . -84) (undo-tree-id5096 . -100) (undo-tree-id5097 . -162) (undo-tree-id5098 . -176) (undo-tree-id5099 . -162) (undo-tree-id5100 . -176) (undo-tree-id5101 . -193) (undo-tree-id5102 . -209) (undo-tree-id5103 . -193) (undo-tree-id5104 . -209) (undo-tree-id5105 . -53) (undo-tree-id5106 . -67) (undo-tree-id5107 . -53) (undo-tree-id5108 . -67) (undo-tree-id5109 . -84) (undo-tree-id5110 . -100) (undo-tree-id5111 . -84) (undo-tree-id5112 . -100) (undo-tree-id5113 . -162) (undo-tree-id5114 . -176) (undo-tree-id5115 . -162) (undo-tree-id5116 . -176) (undo-tree-id5117 . -193) (undo-tree-id5118 . -209) (undo-tree-id5119 . -193) (undo-tree-id5120 . -209) (undo-tree-id5121 . -53) (undo-tree-id5122 . -67) (undo-tree-id5123 . -53) (undo-tree-id5124 . -67) (undo-tree-id5125 . -84) (undo-tree-id5126 . -100) (undo-tree-id5127 . -84) (undo-tree-id5128 . -100) (undo-tree-id5129 . -162) (undo-tree-id5130 . -176) (undo-tree-id5131 . -162) (undo-tree-id5132 . -176) (undo-tree-id5133 . -193) (undo-tree-id5134 . -209) (undo-tree-id5135 . -193) (undo-tree-id5136 . -209) (undo-tree-id5137 . -53) (undo-tree-id5138 . -67) (undo-tree-id5139 . -53) (undo-tree-id5140 . -67) (undo-tree-id5141 . -84) (undo-tree-id5142 . -100) (undo-tree-id5143 . -84) (undo-tree-id5144 . -100) (undo-tree-id5145 . -162) (undo-tree-id5146 . -176) (undo-tree-id5147 . -162) (undo-tree-id5148 . -176) (undo-tree-id5149 . -193) (undo-tree-id5150 . -209) (undo-tree-id5151 . -193) (undo-tree-id5152 . -209) (undo-tree-id5153 . -53) (undo-tree-id5154 . -67) (undo-tree-id5155 . -53) (undo-tree-id5156 . -67) (undo-tree-id5157 . -84) (undo-tree-id5158 . -100) (undo-tree-id5159 . -84) (undo-tree-id5160 . -100) (undo-tree-id5161 . -162) (undo-tree-id5162 . -176) (undo-tree-id5163 . -162) (undo-tree-id5164 . -176) (undo-tree-id5165 . -193) (undo-tree-id5166 . -209) (undo-tree-id5167 . -193) (undo-tree-id5168 . -209) (undo-tree-id5169 . -53) (undo-tree-id5170 . -67) (undo-tree-id5171 . -53) (undo-tree-id5172 . -67) (undo-tree-id5173 . -84) (undo-tree-id5174 . -100) (undo-tree-id5175 . -84) (undo-tree-id5176 . -100) (undo-tree-id5177 . -162) (undo-tree-id5178 . -176) (undo-tree-id5179 . -162) (undo-tree-id5180 . -176) (undo-tree-id5181 . -193) (undo-tree-id5182 . -209) (undo-tree-id5183 . -193) (undo-tree-id5184 . -209) (undo-tree-id5185 . -53) (undo-tree-id5186 . -67) (undo-tree-id5187 . -53) (undo-tree-id5188 . -67) (undo-tree-id5189 . -84) (undo-tree-id5190 . -100) (undo-tree-id5191 . -84) (undo-tree-id5192 . -100) (undo-tree-id5193 . -162) (undo-tree-id5194 . -176) (undo-tree-id5195 . -162) (undo-tree-id5196 . -176) (undo-tree-id5197 . -193) (undo-tree-id5198 . -209) (undo-tree-id5199 . -193) (undo-tree-id5200 . -209) (undo-tree-id5201 . -53) (undo-tree-id5202 . -67) (undo-tree-id5203 . -53) (undo-tree-id5204 . -67) (undo-tree-id5205 . -84) (undo-tree-id5206 . -100) (undo-tree-id5207 . -84) (undo-tree-id5208 . -100) (undo-tree-id5209 . -162) (undo-tree-id5210 . -176) (undo-tree-id5211 . -162) (undo-tree-id5212 . -176) (undo-tree-id5213 . -193) (undo-tree-id5214 . -209) (undo-tree-id5215 . -193) (undo-tree-id5216 . -209) (undo-tree-id5217 . -53) (undo-tree-id5218 . -67) (undo-tree-id5219 . -53) (undo-tree-id5220 . -67) (undo-tree-id5221 . -84) (undo-tree-id5222 . -100) (undo-tree-id5223 . -84) (undo-tree-id5224 . -100) (undo-tree-id5225 . -162) (undo-tree-id5226 . -176) (undo-tree-id5227 . -162) (undo-tree-id5228 . -176) (undo-tree-id5229 . -193) (undo-tree-id5230 . -209) (undo-tree-id5231 . -193) (undo-tree-id5232 . -209) (undo-tree-id5233 . -53) (undo-tree-id5234 . -67) (undo-tree-id5235 . -53) (undo-tree-id5236 . -67) (undo-tree-id5237 . -84) (undo-tree-id5238 . -100) (undo-tree-id5239 . -84) (undo-tree-id5240 . -100) (undo-tree-id5241 . -162) (undo-tree-id5242 . -176) (undo-tree-id5243 . -162) (undo-tree-id5244 . -176) (undo-tree-id5245 . -193) (undo-tree-id5246 . -209) (undo-tree-id5247 . -193) (undo-tree-id5248 . -209) (undo-tree-id5249 . -53) (undo-tree-id5250 . -67) (undo-tree-id5251 . -53) (undo-tree-id5252 . -67) (undo-tree-id5253 . -84) (undo-tree-id5254 . -100) (undo-tree-id5255 . -84) (undo-tree-id5256 . -100) (undo-tree-id5257 . -162) (undo-tree-id5258 . -176) (undo-tree-id5259 . -162) (undo-tree-id5260 . -176) (undo-tree-id5261 . -193) (undo-tree-id5262 . -209) (undo-tree-id5263 . -193) (undo-tree-id5264 . -209) (undo-tree-id5265 . -53) (undo-tree-id5266 . -67) (undo-tree-id5267 . -53) (undo-tree-id5268 . -67) (undo-tree-id5269 . -84) (undo-tree-id5270 . -100) (undo-tree-id5271 . -84) (undo-tree-id5272 . -100) (undo-tree-id5273 . -162) (undo-tree-id5274 . -176) (undo-tree-id5275 . -162) (undo-tree-id5276 . -176) (undo-tree-id5277 . -193) (undo-tree-id5278 . -209) (undo-tree-id5279 . -193) (undo-tree-id5280 . -209) (undo-tree-id5281 . -53) (undo-tree-id5282 . -67) (undo-tree-id5283 . -53) (undo-tree-id5284 . -67) (undo-tree-id5285 . -84) (undo-tree-id5286 . -100) (undo-tree-id5287 . -84) (undo-tree-id5288 . -100) (undo-tree-id5289 . -162) (undo-tree-id5290 . -176) (undo-tree-id5291 . -162) (undo-tree-id5292 . -176) (undo-tree-id5293 . -193) (undo-tree-id5294 . -209) (undo-tree-id5295 . -193) (undo-tree-id5296 . -209) (undo-tree-id5297 . -211) (undo-tree-id5298 . -103) (undo-tree-id5299 . 1) (undo-tree-id5300 . -211) (undo-tree-id5301 . 83) (undo-tree-id5302 . -129) 6852) nil (25258 13281 951119 921000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6493) (undo-tree-id4972 . -1) 6494) nil (25258 13281 950941 167000) 0 nil])
([nil nil ((6493 . 6494)) nil (25258 13281 950939 534000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6636) (#(" " 0 1 (fontified t)) . 6636)) nil (25258 13281 950938 392000) 0 nil])
([nil nil ((#("   
" 0 3 (fontified t) 3 4 (fontified t)) . 6636) (undo-tree-id4647 . -3) (undo-tree-id4648 . -4) (undo-tree-id4649 . -3) (undo-tree-id4650 . -3) (undo-tree-id4651 . -3) (undo-tree-id4652 . -3) (undo-tree-id4653 . -3) (undo-tree-id4654 . -3) (undo-tree-id4655 . -3) (undo-tree-id4656 . -3) (undo-tree-id4657 . -3) (undo-tree-id4658 . -3) (undo-tree-id4659 . -3) (undo-tree-id4660 . -3) (undo-tree-id4661 . -3) (undo-tree-id4662 . -3) (undo-tree-id4663 . -3) (undo-tree-id4664 . -3) (undo-tree-id4665 . -3) (undo-tree-id4666 . -3) (undo-tree-id4667 . -3) (undo-tree-id4668 . -3) (undo-tree-id4669 . -3) (undo-tree-id4670 . -3) (undo-tree-id4671 . -3) (undo-tree-id4672 . -3) (undo-tree-id4673 . -3) (undo-tree-id4674 . -3) (undo-tree-id4675 . -3) (undo-tree-id4676 . -3) (undo-tree-id4677 . -3) (undo-tree-id4678 . -3) (undo-tree-id4679 . -3) (undo-tree-id4680 . -3) (undo-tree-id4681 . -3) (undo-tree-id4682 . -3) (undo-tree-id4683 . -3) (undo-tree-id4684 . -3) (undo-tree-id4685 . -3) (undo-tree-id4686 . -3) (undo-tree-id4687 . -3) (undo-tree-id4688 . -3) (undo-tree-id4689 . -3) (undo-tree-id4690 . -3) (undo-tree-id4691 . -3) (undo-tree-id4692 . -3) (undo-tree-id4693 . -3) (undo-tree-id4694 . -3) (undo-tree-id4695 . -3) (undo-tree-id4696 . -3) (undo-tree-id4697 . -3) (undo-tree-id4698 . -3) (undo-tree-id4699 . -3) (undo-tree-id4700 . -3) (undo-tree-id4701 . -3) (undo-tree-id4702 . -3) (undo-tree-id4703 . -3) (undo-tree-id4704 . -3) (undo-tree-id4705 . -3) (undo-tree-id4706 . -3) (undo-tree-id4707 . -3) (undo-tree-id4708 . -3) (undo-tree-id4709 . -3) (undo-tree-id4710 . -3) (undo-tree-id4711 . -3) (undo-tree-id4712 . -3) (undo-tree-id4713 . -3) (undo-tree-id4714 . -3) (undo-tree-id4715 . -3) (undo-tree-id4716 . -3) (undo-tree-id4717 . -3) (undo-tree-id4718 . -3) (undo-tree-id4719 . -3) (undo-tree-id4720 . -3) (undo-tree-id4721 . -3) (undo-tree-id4722 . -3) (undo-tree-id4723 . -3) (undo-tree-id4724 . -3) (undo-tree-id4725 . -3) (undo-tree-id4726 . -3) (undo-tree-id4727 . -3) (undo-tree-id4728 . -3) (undo-tree-id4729 . -3) (undo-tree-id4730 . -3) (undo-tree-id4731 . -3) (undo-tree-id4732 . -3) (undo-tree-id4733 . -3) (undo-tree-id4734 . -3) (undo-tree-id4735 . -3) (undo-tree-id4736 . -3) (undo-tree-id4737 . -3) (undo-tree-id4738 . -3) (undo-tree-id4739 . -3) (undo-tree-id4740 . -3) (undo-tree-id4741 . -3) (undo-tree-id4742 . -3) (undo-tree-id4743 . -3) (undo-tree-id4744 . -3) (undo-tree-id4745 . -3) (undo-tree-id4746 . -3) (undo-tree-id4747 . -3) (undo-tree-id4748 . -3) (undo-tree-id4749 . -3) (undo-tree-id4750 . -3) (undo-tree-id4751 . -3) (undo-tree-id4752 . -3) (undo-tree-id4753 . -3) (undo-tree-id4754 . -3) (undo-tree-id4755 . -3) (undo-tree-id4756 . -3) (undo-tree-id4757 . -3) (undo-tree-id4758 . -3) (undo-tree-id4759 . -3) (undo-tree-id4760 . -3) (undo-tree-id4761 . -3) (undo-tree-id4762 . -3) (undo-tree-id4763 . -3) (undo-tree-id4764 . -3) (undo-tree-id4765 . -3) (undo-tree-id4766 . -3) (undo-tree-id4767 . -3) (undo-tree-id4768 . -3) (undo-tree-id4769 . -3) (undo-tree-id4770 . -3) (undo-tree-id4771 . -3) (undo-tree-id4772 . -3) (undo-tree-id4773 . -3) (undo-tree-id4774 . -3) (undo-tree-id4775 . -3) (undo-tree-id4776 . -3) (undo-tree-id4777 . -3) (undo-tree-id4778 . -3) (undo-tree-id4779 . -3) (undo-tree-id4780 . -3) (undo-tree-id4781 . -3) (undo-tree-id4782 . -3) (undo-tree-id4783 . -3) (undo-tree-id4784 . -3) (undo-tree-id4785 . -3) (undo-tree-id4786 . -3) (undo-tree-id4787 . -3) (undo-tree-id4788 . -3) (undo-tree-id4789 . -3) (undo-tree-id4790 . -3) (undo-tree-id4791 . -3) (undo-tree-id4792 . -3) (undo-tree-id4793 . -3) (undo-tree-id4794 . -3) (undo-tree-id4795 . -3) (undo-tree-id4796 . -3) (undo-tree-id4797 . -3) (undo-tree-id4798 . -3) (undo-tree-id4799 . -3) (undo-tree-id4800 . -3) (undo-tree-id4801 . -3) (undo-tree-id4802 . -3) (undo-tree-id4803 . -3) (undo-tree-id4804 . -3) (undo-tree-id4805 . -3) (undo-tree-id4806 . -3) (undo-tree-id4807 . -3) (undo-tree-id4808 . -3) (undo-tree-id4809 . -3) (undo-tree-id4810 . -3) (undo-tree-id4811 . -3) (undo-tree-id4812 . -3) (undo-tree-id4813 . -3) (undo-tree-id4814 . -3) (undo-tree-id4815 . -3) (undo-tree-id4816 . -3) (undo-tree-id4817 . -3) (undo-tree-id4818 . -3) (undo-tree-id4819 . -3) (undo-tree-id4820 . -3) (undo-tree-id4821 . -3) (undo-tree-id4822 . -3) (undo-tree-id4823 . -3) (undo-tree-id4824 . -3) (undo-tree-id4825 . -3) (undo-tree-id4826 . -3) (undo-tree-id4827 . -3) (undo-tree-id4828 . -3) (undo-tree-id4829 . -3) (undo-tree-id4830 . -3) (undo-tree-id4831 . -3) (undo-tree-id4832 . -3) (undo-tree-id4833 . -3) (undo-tree-id4834 . -3) (undo-tree-id4835 . -3) (undo-tree-id4836 . -3) (undo-tree-id4837 . -3) (undo-tree-id4838 . -3) (undo-tree-id4839 . -3) (undo-tree-id4840 . -3) (undo-tree-id4841 . -3) (undo-tree-id4842 . -3) (undo-tree-id4843 . -3) (undo-tree-id4844 . -3) (undo-tree-id4845 . -3) (undo-tree-id4846 . -3) (undo-tree-id4847 . -3) (undo-tree-id4848 . -3) (undo-tree-id4849 . -3) (undo-tree-id4850 . -3) (undo-tree-id4851 . -3) (undo-tree-id4852 . -3) (undo-tree-id4853 . -3) (undo-tree-id4854 . -3) (undo-tree-id4855 . -3) (undo-tree-id4856 . -3) (undo-tree-id4857 . -3) (undo-tree-id4858 . -3) (undo-tree-id4859 . -3) (undo-tree-id4860 . -3) (undo-tree-id4861 . -3) (undo-tree-id4862 . -3) (undo-tree-id4863 . -3) (undo-tree-id4864 . -3) (undo-tree-id4865 . -3) (undo-tree-id4866 . -3) (undo-tree-id4867 . -3) (undo-tree-id4868 . -3) (undo-tree-id4869 . -3) (undo-tree-id4870 . -3) (undo-tree-id4871 . -3) (undo-tree-id4872 . -3) (undo-tree-id4873 . -3) (undo-tree-id4874 . -3) (undo-tree-id4875 . -3) (undo-tree-id4876 . -3) (undo-tree-id4877 . -3) (undo-tree-id4878 . -3) (undo-tree-id4879 . -3) (undo-tree-id4880 . -3) (undo-tree-id4881 . -3) (undo-tree-id4882 . -3) (undo-tree-id4883 . -3) (undo-tree-id4884 . -3) (undo-tree-id4885 . -3) (undo-tree-id4886 . -3) (undo-tree-id4887 . -3) (undo-tree-id4888 . -3) (undo-tree-id4889 . -3) (undo-tree-id4890 . -3) (undo-tree-id4891 . -3) (undo-tree-id4892 . -3) (undo-tree-id4893 . -3) (undo-tree-id4894 . -3) (undo-tree-id4895 . -3) (undo-tree-id4896 . -3) (undo-tree-id4897 . -3) (undo-tree-id4898 . -3) (undo-tree-id4899 . -3) (undo-tree-id4900 . -3) (undo-tree-id4901 . -3) (undo-tree-id4902 . -3) (undo-tree-id4903 . -3) (undo-tree-id4904 . -3) (undo-tree-id4905 . -3) (undo-tree-id4906 . -3) (undo-tree-id4907 . -3) (undo-tree-id4908 . -3) (undo-tree-id4909 . -3) (undo-tree-id4910 . -3) (undo-tree-id4911 . -3) (undo-tree-id4912 . -3) (undo-tree-id4913 . -3) (undo-tree-id4914 . -3) (undo-tree-id4915 . -3) (undo-tree-id4916 . -3) (undo-tree-id4917 . -3) (undo-tree-id4918 . -3) (undo-tree-id4919 . -3) (undo-tree-id4920 . -3) (undo-tree-id4921 . -3) (undo-tree-id4922 . -3) (undo-tree-id4923 . -3) (undo-tree-id4924 . -3) (undo-tree-id4925 . -3) (undo-tree-id4926 . -3) (undo-tree-id4927 . -3) (undo-tree-id4928 . -3) (undo-tree-id4929 . -3) (undo-tree-id4930 . -3) (undo-tree-id4931 . -3) (undo-tree-id4932 . -3) (undo-tree-id4933 . -3) (undo-tree-id4934 . -3) (undo-tree-id4935 . -3) (undo-tree-id4936 . -3) (undo-tree-id4937 . -4) (undo-tree-id4938 . -4) (undo-tree-id4939 . -3) (undo-tree-id4940 . -3) (undo-tree-id4941 . -3) (undo-tree-id4942 . -3) (undo-tree-id4943 . -3) (undo-tree-id4944 . -3) (undo-tree-id4945 . -3) (undo-tree-id4946 . -3) (undo-tree-id4947 . -3) (undo-tree-id4948 . -3) (undo-tree-id4949 . -3) (undo-tree-id4950 . -3) (undo-tree-id4951 . -3) (undo-tree-id4952 . -3) (undo-tree-id4953 . -3) (undo-tree-id4954 . -3) (undo-tree-id4955 . -3) (undo-tree-id4956 . -3) (undo-tree-id4957 . -3) (undo-tree-id4958 . -3) (undo-tree-id4959 . -3) (undo-tree-id4960 . -3) (undo-tree-id4961 . -3) (undo-tree-id4962 . -3) (undo-tree-id4963 . -3) (undo-tree-id4964 . -3) (undo-tree-id4965 . -3) (undo-tree-id4966 . -3) (undo-tree-id4967 . -3) (undo-tree-id4968 . -3) (undo-tree-id4969 . -3) (undo-tree-id4970 . -3) (undo-tree-id4971 . -4)) nil (25258 13281 950921 460000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6656) (undo-tree-id5396 . -1) 6657 (t 25258 13281 970370 293000)) nil (25258 13299 666321 730000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6641) (undo-tree-id5397 . -1) (#("_" 0 1 (fontified t face font-lock-constant-face)) . -6642) (undo-tree-id5398 . -1) 6643 (t 25258 13299 686287 822000)) nil (25258 13313 947384 515000) 0 nil])
([nil nil ((6641 . 6646)) nil (25258 13313 947357 354000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -6641) (undo-tree-id5401 . -1) (#("r" 0 1 (fontified t)) . -6642) (undo-tree-id5402 . -1) (#("u" 0 1 (fontified t)) . -6643) (undo-tree-id5403 . -1) (#("e" 0 1 (fontified t face elixir-atom-face)) . -6644) (undo-tree-id5404 . -1) 6645 (t 25258 13314 6223 765000)) nil (25258 13347 521497 836000) 0 nil])
([nil nil ((6641 . 6642)) nil (25258 13347 521487 196000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . -6641) (undo-tree-id5400 . -1) 6642) nil (25258 13347 521484 511000) 0 nil])
([nil nil ((6641 . 6645)) nil (25258 13347 521478 550000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -6644) (undo-tree-id5399 . -1) 6645) nil (25258 13347 521470 745000) 0 nil])
([nil nil ((6641 . 6647) (t 25258 13347 542082 502000)) nil (25258 13388 883043 654000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t)) . -6646) (undo-tree-id5410 . -1) 6647) nil (25258 13388 883041 550000) 0 nil])
([nil nil ((6646 . 6656)) nil (25258 13388 883038 505000) 0 nil])
([nil nil ((#("status_code == 200  -> response" 0 18 (fontified t) 18 19 (fontified t) 19 29 (fontified t) 29 31 (fontified t)) . 6641) (undo-tree-id5407 . -31) (undo-tree-id5408 . -31) (undo-tree-id5409 . -31) 6672) nil (25258 13388 883036 401000) 0 nil])
([nil nil ((6172 . 6178) (#("	" 0 1 (fontified nil)) . 6171) (6171 . 6172) (#("      " 0 6 (fontified nil)) . 6171) (undo-tree-id5405 . -6) (undo-tree-id5406 . -6) (6177 . 6178)) nil (25258 13388 883028 806000) 0 nil])
([nil nil ((6171 . 6172)) nil (25258 13388 883013 237000) 0 nil])
([nil nil ((6172 . 6177)) nil (25258 13388 883011 143000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6207 . 6208) (nil fontified nil 6206 . 6208) (nil fontified nil 6196 . 6206) (nil fontified nil 6195 . 6196) (nil fontified nil 6177 . 6195) (6177 . 6208)) nil (25258 13388 883005 72000) 0 nil])
([nil nil ((5376 . 5397) (t 25258 13388 901924 216000)) nil (25258 13467 698471 224000) 0 nil])
([nil nil ((5397 . 5399)) nil (25258 13467 698464 721000) 0 nil])
([nil nil ((6695 . 6702) (t 25258 13467 717666 692000)) nil (25258 13519 778883 728000) 0 nil])
([nil nil ((6702 . 6703)) nil (25258 13519 778881 63000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -6701) (undo-tree-id5412 . -1) (#("r" 0 1 (fontified t)) . -6702) (undo-tree-id5413 . -1) 6703) nil (25258 13519 778878 67000) 0 nil])
([nil nil ((6701 . 6702)) nil (25258 13519 778871 375000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -6701) (undo-tree-id5411 . -1) 6702) nil (25258 13519 778867 137000) 0 nil])
([nil nil ((6701 . 6718)) nil (25258 13519 778846 378000) 0 nil])
([nil nil ((6199 . 6200) (t 25258 13519 809524 874000)) nil (25258 13542 665354 749000) 0 nil])
([nil nil ((#("#" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6199) (undo-tree-id5420 . -1) (undo-tree-id5421 . -1) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -6200) (undo-tree-id5422 . -1) (undo-tree-id5423 . -1) 6201 (t 25258 13542 697469 22000)) nil (25258 13613 904747 154000) 0 nil])
([nil nil ((6199 . 6200)) nil (25258 13613 904737 706000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 6702) (#("s" 0 1 (fontified t)) . 6702) (#("n" 0 1 (fontified t)) . 6702) (#("o" 0 1 (fontified t)) . 6702) (#("p" 0 1 (fontified t)) . 6702) (#("s" 0 1 (fontified t)) . 6702) (#("e" 0 1 (fontified t)) . 6702) (#("r" 0 1 (fontified t)) . 6702) (#(" " 0 1 (fontified t)) . 6702) (#(">" 0 1 (fontified t)) . 6702) (#("-" 0 1 (fontified t)) . 6702) (#(" " 0 1 (fontified t)) . 6702) (#("e" 0 1 (fontified t)) . 6702) (#("u" 0 1 (fontified t)) . 6702) (#("r" 0 1 (fontified t)) . 6702) (#("t" 0 1 (fontified t face elixir-atom-face)) . 6702)) nil (25258 13613 904731 484000) 0 nil])
([nil nil ((6215 . 6217) (#("\"" 0 1 (fontified nil syntax-table (15))) . -6215) (6215 . 6216)) nil (25258 13613 904722 948000) 0 nil])
([nil nil ((6255 . 6257) (#("\"" 0 1 (fontified nil syntax-table (15))) . -6255) (6255 . 6256)) nil (25258 13613 904719 572000) 0 nil])
([nil nil ((6365 . 6367) (#("\"" 0 1 (fontified nil syntax-table (15))) . -6365) (6365 . 6366)) nil (25258 13613 904716 546000) 0 nil])
([nil nil ((6472 . 6474) (#("\"" 0 1 (fontified nil syntax-table (15))) . -6472) (6472 . 6473)) nil (25258 13613 904713 450000) 0 nil])
([nil nil ((#("200" 0 3 (fontified t)) . 6217) (undo-tree-id5418 . -3) (undo-tree-id5419 . -3) 6220) nil (25258 13613 904710 54000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6218 . 6219) (nil fontified nil 6216 . 6219) (6216 . 6219)) nil (25258 13613 904703 752000) 0 nil])
([nil nil ((6256 . 6259)) nil (25258 13613 904701 97000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6260) (#("0" 0 1 (fontified t)) . 6260) (#("0" 0 1 (fontified t)) . 6260) (#("4" 0 1 (fontified t)) . 6260)) nil (25258 13613 904698 302000) 0 nil])
([nil nil ((6260 . 6261)) nil (25258 13613 904695 226000) 0 nil])
([nil nil ((6261 . 6262)) nil (25258 13613 904693 503000) 0 nil])
([nil nil ((6367 . 6370)) nil (25258 13613 904691 790000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . 6371) (#("0" 0 1 (fontified t)) . 6371) (#("4" 0 1 (fontified t)) . 6371)) nil (25258 13613 904689 145000) 0 nil])
([nil nil ((6474 . 6477)) nil (25258 13613 904686 370000) 0 nil])
([nil nil ((#("3" 0 1 (fontified t)) . 6478) (#("0" 0 1 (fontified t)) . 6478) (#("4" 0 1 (fontified t)) . 6478)) nil (25258 13613 904683 334000) 0 nil])
([nil nil ((6711 . 6715)) nil (25258 13613 904679 627000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . -6711) (undo-tree-id5414 . -1) (#("r" 0 1 (fontified t)) . -6712) (undo-tree-id5415 . -1) (#("u" 0 1 (fontified t)) . -6713) (undo-tree-id5416 . -1) (#("e" 0 1 (fontified t face elixir-atom-face)) . -6714) (undo-tree-id5417 . -1) 6715) nil (25258 13613 904670 891000) 0 nil])
([nil nil ((6711 . 6714) (t 25258 13613 937318 122000)) nil (25258 13652 480599 729000) 0 nil])
([nil nil ((#("r" 0 1 (fontified t)) . -6711) (undo-tree-id5424 . -1) (#("u" 0 1 (fontified t)) . -6712) (undo-tree-id5425 . -1) (#("e" 0 1 (fontified t)) . -6713) (undo-tree-id5426 . -1) 6714) nil (25258 13652 480597 384000) 0 nil])
([nil nil ((6711 . 6727)) nil (25258 13652 480581 705000) 0 nil])
([nil nil ((8094 . 8115) (#("    else false  
" 4 8 (face font-lock-keyword-face) 9 14 (face elixir-atom-face)) . -8094) (7857 . 7864) (#("    
    end
  
" 9 12 (face font-lock-keyword-face)) . -7857) (#("    
" 0 4 (fontified t) 4 5 (fontified t)) . -6834) (undo-tree-id5427 . -5) (undo-tree-id5428 . -5) (6211 . 6826) (#("        cond do
      status_code == \"200\"  -> response
      status_code == \"400\"  -> Logger.error(\"Drissly Response: Codigo de error: #{status_code} , #{message}\")
      status_code ==  \"401\" -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, #{response}\")
      status_code ==  \"403\" -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, Access Forbidden\")
      Regex.match?(~r/^(50)/, status_code) -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, Tipo de error: #{error_message}\")
      true -> response
      
" 0 4 (fontified t) 4 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 22 (fontified t) 22 37 (fontified t) 37 38 (fontified t syntax-table (15) face font-lock-string-face) 38 40 (fontified t face font-lock-string-face) 40 41 (fontified t rear-nonsticky t face font-lock-string-face) 41 42 (fontified t syntax-table (15) face font-lock-string-face) 42 43 (fontified t) 43 53 (fontified t) 53 54 (fontified t) 54 55 (rear-nonsticky t fontified t) 55 56 (fontified t) 56 62 (fontified t) 62 77 (fontified t) 77 78 (fontified t syntax-table (15) face font-lock-string-face) 78 81 (fontified t face font-lock-string-face) 81 82 (fontified t syntax-table (15) face font-lock-string-face) 82 84 (fontified t) 84 87 (fontified t) 87 93 (fontified t face font-lock-type-face) 93 100 (fontified t) 100 101 (fontified t syntax-table (15) face font-lock-string-face) 101 136 (fontified t face font-lock-string-face) 136 137 (elixir-interpolation (t #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex>) fontified t syntax-table (2) face font-lock-variable-name-face) 137 150 (fontified t face font-lock-variable-name-face) 150 153 (fontified t face font-lock-string-face) 153 154 (elixir-interpolation (t #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex>) fontified t syntax-table (2) face font-lock-variable-name-face) 154 161 (fontified t face font-lock-variable-name-face) 161 163 (fontified t face font-lock-variable-name-face) 163 164 (fontified t syntax-table (15) face font-lock-string-face) 164 165 (fontified t) 165 166 (fontified t) 166 172 (fontified t) 172 186 (fontified t) 186 187 (rear-nonsticky t fontified t) 187 188 (fontified t) 188 189 (fontified t syntax-table (15) face font-lock-string-face) 189 192 (fontified t face font-lock-string-face) 192 193 (fontified t syntax-table (15) face font-lock-string-face) 193 197 (fontified t) 197 203 (fontified t face font-lock-type-face) 203 206 (fontified t) 206 210 (fontified t) 210 211 (fontified t syntax-table (15) face font-lock-string-face) 211 218 (fontified t face font-lock-string-face) 218 224 (fontified t face font-lock-string-face) 224 225 (fontified t face font-lock-string-face) 225 226 (fontified t face font-lock-string-face) 226 243 (fontified t face font-lock-string-face) 243 244 (elixir-interpolation (t #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex>) fontified t syntax-table (2) face font-lock-variable-name-face) 244 252 (fontified t face font-lock-variable-name-face) 252 256 (fontified t face font-lock-variable-name-face) 256 257 (rear-nonsticky t fontified t face font-lock-variable-name-face) 257 259 (fontified t face font-lock-string-face) 259 260 (elixir-interpolation (t #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex>) fontified t syntax-table (2) face font-lock-variable-name-face) 260 270 (fontified t face font-lock-variable-name-face) 270 271 (fontified t syntax-table (15) face font-lock-string-face) 271 272 (fontified t) 272 273 (fontified t) 273 279 (fontified t) 279 293 (fontified t) 293 294 (rear-nonsticky t fontified t) 294 295 (fontified t) 295 296 (fontified t syntax-table (15) face font-lock-string-face) 296 299 (fontified t face font-lock-string-face) 299 300 (fontified t syntax-table (15) face font-lock-string-face) 300 304 (fontified t) 304 310 (fontified t face font-lock-type-face) 310 317 (fontified t) 317 318 (fontified t syntax-table (15) face font-lock-string-face) 318 333 (fontified t face font-lock-string-face) 333 350 (fontified t face font-lock-string-face) 350 351 (elixir-interpolation (t #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex>) fontified t syntax-table (2) face font-lock-variable-name-face) 351 363 (fontified t face font-lock-variable-name-face) 363 364 (rear-nonsticky t fontified t face font-lock-variable-name-face) 364 366 (fontified t face font-lock-string-face) 366 382 (fontified t face font-lock-string-face) 382 383 (fontified t syntax-table (15) face font-lock-string-face) 383 384 (fontified t) 384 385 (fontified t) 385 386 (fontified t) 386 391 (fontified t) 391 396 (fontified t face font-lock-type-face) 396 404 (fontified t) 404 406 (fontified t face font-lock-builtin-face) 406 407 (fontified t) 407 412 (fontified t face font-lock-string-face) 412 426 (fontified t) 426 427 (fontified t) 427 431 (fontified t) 431 437 (fontified t face font-lock-type-face) 437 444 (fontified t) 444 445 (syntax-table (15) fontified t face font-lock-string-face) 445 460 (fontified t face font-lock-string-face) 460 477 (fontified t face font-lock-string-face) 477 478 (elixir-interpolation (t #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 478 490 (fontified t face font-lock-variable-name-face) 490 491 (rear-nonsticky t fontified t face font-lock-variable-name-face) 491 493 (fontified t face font-lock-string-face) 493 508 (fontified t face font-lock-string-face) 508 509 (elixir-interpolation (t #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex> #<marker at 5478 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 509 524 (fontified t face font-lock-variable-name-face) 524 525 (syntax-table (15) fontified t face font-lock-string-face) 525 526 (rear-nonsticky t fontified t) 526 527 (fontified t) 527 533 (fontified t) 533 537 (fontified t face elixir-atom-face) 537 549 (fontified t) 549 550 (fontified t) 550 551 (fontified t) 551 556 (fontified t) 556 557 (fontified t)) . -6211) (undo-tree-id5429 . -38) (undo-tree-id5430 . -16) (undo-tree-id5431 . -16) (undo-tree-id5432 . -527) (undo-tree-id5433 . -527) (undo-tree-id5434 . -550) (undo-tree-id5435 . -550) (undo-tree-id5436 . -557) (undo-tree-id5437 . -557) (undo-tree-id5438 . -385) (undo-tree-id5439 . -385) (undo-tree-id5440 . -273) (undo-tree-id5441 . -273) (undo-tree-id5442 . -166) (undo-tree-id5443 . -166) (undo-tree-id5444 . -527) (undo-tree-id5445 . -550) (undo-tree-id5446 . -4) (undo-tree-id5447 . -16) (undo-tree-id5448 . -172) (undo-tree-id5449 . -279) (undo-tree-id5450 . -56) (undo-tree-id5451 . -56) (undo-tree-id5452 . -551) (undo-tree-id5453 . -551) (undo-tree-id5454 . -551) (undo-tree-id5455 . -551) (undo-tree-id5456 . -551) (undo-tree-id5457 . -551) (undo-tree-id5458 . -551) (undo-tree-id5459 . -551) (undo-tree-id5460 . -551) (undo-tree-id5461 . -551) (undo-tree-id5462 . -551) (undo-tree-id5463 . -551) (undo-tree-id5464 . -551) (undo-tree-id5465 . -551) (undo-tree-id5466 . -551) (undo-tree-id5467 . -551) (undo-tree-id5468 . -391) (undo-tree-id5469 . -551) (undo-tree-id5470 . -556) (undo-tree-id5471 . -21) (undo-tree-id5472 . -42) (undo-tree-id5473 . -136) (undo-tree-id5474 . -150) (undo-tree-id5475 . -136) (undo-tree-id5476 . -150) (undo-tree-id5477 . -153) (undo-tree-id5478 . -163) (undo-tree-id5479 . -153) (undo-tree-id5480 . -163) (undo-tree-id5481 . -243) (undo-tree-id5482 . -257) (undo-tree-id5483 . -243) (undo-tree-id5484 . -257) (undo-tree-id5485 . -259) (undo-tree-id5486 . -270) (undo-tree-id5487 . -259) (undo-tree-id5488 . -270) (undo-tree-id5489 . -350) (undo-tree-id5490 . -364) (undo-tree-id5491 . -350) (undo-tree-id5492 . -364) (undo-tree-id5493 . -477) (undo-tree-id5494 . -491) (undo-tree-id5495 . -477) (undo-tree-id5496 . -491) (undo-tree-id5497 . -508) (undo-tree-id5498 . -524) (undo-tree-id5499 . -508) (undo-tree-id5500 . -524) (undo-tree-id5501 . -527) (undo-tree-id5502 . -549) (undo-tree-id5503 . -549) (undo-tree-id5504 . -549) (undo-tree-id5505 . -549) (undo-tree-id5506 . -549) (5478 . 6197) (#("#    case status_code do
#      400 -> Logger.error(\"Drissly Response: Codigo de error: #{status_code} , #{message}\")
#      401 -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, #{response}\")
#      403 -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, Access Forbidden\")
#      Regex.match?(~r/^(50)/, status_code) -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, Tipo de error: #{error_message}\")
#      500 -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, Tipo de error: #{error_message}\")
#      502 -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, Tipo de Error: #{error_message}\")
#      _ -> response
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 5 (fontified t face font-lock-comment-delimiter-face) 5 9 (fontified t face font-lock-comment-face) 9 22 (fontified t face font-lock-comment-face) 22 24 (fontified t face font-lock-comment-face) 24 25 (fontified t face font-lock-comment-face) 25 26 (fontified t face font-lock-comment-delimiter-face) 26 32 (fontified t face font-lock-comment-delimiter-face) 32 39 (fontified t face font-lock-comment-face) 39 45 (fontified t face font-lock-comment-face) 45 52 (fontified t face font-lock-comment-face) 52 53 (syntax-table (15) fontified t face font-lock-comment-face) 53 88 (fontified t face font-lock-comment-face) 88 89 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 89 102 (fontified t face font-lock-comment-face) 102 105 (fontified t face font-lock-comment-face) 105 106 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 106 113 (fontified t face font-lock-comment-face) 113 115 (fontified t face font-lock-comment-face) 115 116 (syntax-table (15) fontified t face font-lock-comment-face) 116 117 (fontified t face font-lock-comment-face) 117 118 (fontified t face font-lock-comment-face) 118 119 (fontified t face font-lock-comment-delimiter-face) 119 125 (fontified t face font-lock-comment-delimiter-face) 125 132 (fontified t face font-lock-comment-face) 132 138 (fontified t face font-lock-comment-face) 138 141 (fontified t face font-lock-comment-face) 141 145 (fontified t face font-lock-comment-face) 145 146 (syntax-table (15) fontified t face font-lock-comment-face) 146 153 (fontified t face font-lock-comment-face) 153 159 (fontified t face font-lock-comment-face) 159 160 (fontified t face font-lock-comment-face) 160 161 (fontified t face font-lock-comment-face) 161 178 (fontified t face font-lock-comment-face) 178 179 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 179 191 (fontified t face font-lock-comment-face) 191 192 (rear-nonsticky t fontified t face font-lock-comment-face) 192 194 (fontified t face font-lock-comment-face) 194 195 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 195 205 (fontified t face font-lock-comment-face) 205 206 (syntax-table (15) fontified t face font-lock-comment-face) 206 207 (fontified t face font-lock-comment-face) 207 208 (fontified t face font-lock-comment-face) 208 209 (fontified t face font-lock-comment-delimiter-face) 209 215 (fontified t face font-lock-comment-delimiter-face) 215 222 (fontified t face font-lock-comment-face) 222 228 (fontified t face font-lock-comment-face) 228 235 (fontified t face font-lock-comment-face) 235 236 (syntax-table (15) fontified t face font-lock-comment-face) 236 251 (fontified t face font-lock-comment-face) 251 268 (fontified t face font-lock-comment-face) 268 269 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 269 281 (fontified t face font-lock-comment-face) 281 282 (rear-nonsticky t fontified t face font-lock-comment-face) 282 284 (fontified t face font-lock-comment-face) 284 300 (fontified t face font-lock-comment-face) 300 301 (syntax-table (15) fontified t face font-lock-comment-face) 301 302 (fontified t face font-lock-comment-face) 302 303 (fontified t face font-lock-comment-face) 303 304 (fontified t face font-lock-comment-delimiter-face) 304 310 (fontified t face font-lock-comment-delimiter-face) 310 315 (fontified t face font-lock-comment-face) 315 323 (fontified t face font-lock-comment-face) 323 325 (fontified t face font-lock-comment-face) 325 326 (fontified t face font-lock-comment-face) 326 331 (fontified t face font-lock-comment-face) 331 345 (fontified t face font-lock-comment-face) 345 346 (fontified t face font-lock-comment-face) 346 350 (fontified t face font-lock-comment-face) 350 356 (fontified t face font-lock-comment-face) 356 363 (fontified t face font-lock-comment-face) 363 364 (syntax-table (15) fontified t face font-lock-comment-face) 364 379 (fontified t face font-lock-comment-face) 379 396 (fontified t face font-lock-comment-face) 396 397 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 397 409 (fontified t face font-lock-comment-face) 409 410 (rear-nonsticky t fontified t face font-lock-comment-face) 410 412 (fontified t face font-lock-comment-face) 412 423 (fontified t face font-lock-comment-face) 423 427 (face font-lock-comment-face fontified t) 427 428 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) face font-lock-comment-face fontified t) 428 443 (face font-lock-comment-face fontified t) 443 444 (syntax-table (15) face font-lock-comment-face fontified t) 444 445 (rear-nonsticky t face font-lock-comment-face fontified t) 445 446 (face font-lock-comment-face fontified t) 446 447 (fontified t face font-lock-comment-delimiter-face) 447 453 (fontified t face font-lock-comment-delimiter-face) 453 460 (fontified t face font-lock-comment-face) 460 466 (fontified t face font-lock-comment-face) 466 473 (fontified t face font-lock-comment-face) 473 474 (syntax-table (15) fontified t face font-lock-comment-face) 474 489 (fontified t face font-lock-comment-face) 489 506 (fontified t face font-lock-comment-face) 506 507 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 507 519 (fontified t face font-lock-comment-face) 519 520 (rear-nonsticky t fontified t face font-lock-comment-face) 520 522 (fontified t face font-lock-comment-face) 522 537 (fontified t face font-lock-comment-face) 537 538 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 538 553 (fontified t face font-lock-comment-face) 553 554 (syntax-table (15) fontified t face font-lock-comment-face) 554 555 (fontified t face font-lock-comment-face) 555 556 (fontified t face font-lock-comment-face) 556 557 (fontified t face font-lock-comment-delimiter-face) 557 563 (fontified t face font-lock-comment-delimiter-face) 563 570 (fontified t face font-lock-comment-face) 570 576 (fontified t face font-lock-comment-face) 576 583 (fontified t face font-lock-comment-face) 583 584 (syntax-table (15) fontified t face font-lock-comment-face) 584 599 (fontified t face font-lock-comment-face) 599 616 (fontified t face font-lock-comment-face) 616 617 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 617 629 (fontified t face font-lock-comment-face) 629 630 (rear-nonsticky t fontified t face font-lock-comment-face) 630 647 (fontified t face font-lock-comment-face) 647 648 (elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 648 663 (fontified t face font-lock-comment-face) 663 664 (syntax-table (15) fontified t face font-lock-comment-face) 664 665 (fontified t face font-lock-comment-face) 665 666 (fontified t face font-lock-comment-face) 666 667 (fontified t face font-lock-comment-delimiter-face) 667 673 (fontified t face font-lock-comment-delimiter-face) 673 674 (fontified t face font-lock-comment-face) 674 684 (fontified t face font-lock-comment-face) 684 686 (fontified t face font-lock-comment-face) 686 687 (fontified t face font-lock-comment-face)) . -5478) (undo-tree-id5507 . -687) (undo-tree-id5508 . -687) (undo-tree-id5509 . -556) (undo-tree-id5510 . -556) (undo-tree-id5511 . -666) (undo-tree-id5512 . -666) (undo-tree-id5513 . -303) (undo-tree-id5514 . -303) (undo-tree-id5515 . -208) (undo-tree-id5516 . -208) (undo-tree-id5517 . -118) (undo-tree-id5518 . -118) (undo-tree-id5519 . -25) (undo-tree-id5520 . -25) (undo-tree-id5521 . -446) (undo-tree-id5522 . -446) (undo-tree-id5523 . -88) (undo-tree-id5524 . -102) (undo-tree-id5525 . -88) (undo-tree-id5526 . -102) (undo-tree-id5527 . -145) (undo-tree-id5528 . -205) (undo-tree-id5529 . -145) (undo-tree-id5530 . -205) (undo-tree-id5531 . -251) (undo-tree-id5532 . -489) (undo-tree-id5533 . -332) (undo-tree-id5534 . -599) (undo-tree-id5535 . -310) (undo-tree-id5536 . -506) (undo-tree-id5537 . -520) (undo-tree-id5538 . -506) (undo-tree-id5539 . -520) (undo-tree-id5540 . -537) (undo-tree-id5541 . -553) (undo-tree-id5542 . -537) (undo-tree-id5543 . -553) (undo-tree-id5544 . -310) (undo-tree-id5545 . -460) (undo-tree-id5546 . -88) (undo-tree-id5547 . -102) (undo-tree-id5548 . -88) (undo-tree-id5549 . -102) (undo-tree-id5550 . -105) (undo-tree-id5551 . -115) (undo-tree-id5552 . -105) (undo-tree-id5553 . -115) (undo-tree-id5554 . -178) (undo-tree-id5555 . -192) (undo-tree-id5556 . -178) (undo-tree-id5557 . -192) (undo-tree-id5558 . -194) (undo-tree-id5559 . -205) (undo-tree-id5560 . -194) (undo-tree-id5561 . -205) (undo-tree-id5562 . -268) (undo-tree-id5563 . -282) (undo-tree-id5564 . -268) (undo-tree-id5565 . -282) (undo-tree-id5566 . -396) (undo-tree-id5567 . -410) (undo-tree-id5568 . -396) (undo-tree-id5569 . -410) (undo-tree-id5570 . -427) (undo-tree-id5571 . -443) (undo-tree-id5572 . -427) (undo-tree-id5573 . -443) (undo-tree-id5574 . -506) (undo-tree-id5575 . -520) (undo-tree-id5576 . -506) (undo-tree-id5577 . -520) (undo-tree-id5578 . -537) (undo-tree-id5579 . -553) (undo-tree-id5580 . -537) (undo-tree-id5581 . -553) (undo-tree-id5582 . -616) (undo-tree-id5583 . -630) (undo-tree-id5584 . -616) (undo-tree-id5585 . -630) (undo-tree-id5586 . -647) (undo-tree-id5587 . -663) (undo-tree-id5588 . -647) (undo-tree-id5589 . -663) (undo-tree-id5590 . -350) (undo-tree-id5591 . -88) (undo-tree-id5592 . -102) (undo-tree-id5593 . -88) (undo-tree-id5594 . -102) (undo-tree-id5595 . -105) (undo-tree-id5596 . -115) (undo-tree-id5597 . -105) (undo-tree-id5598 . -115) (undo-tree-id5599 . -178) (undo-tree-id5600 . -192) (undo-tree-id5601 . -178) (undo-tree-id5602 . -192) (undo-tree-id5603 . -194) (undo-tree-id5604 . -205) (undo-tree-id5605 . -194) (undo-tree-id5606 . -205) (undo-tree-id5607 . -268) (undo-tree-id5608 . -282) (undo-tree-id5609 . -268) (undo-tree-id5610 . -282) (undo-tree-id5611 . -396) (undo-tree-id5612 . -410) (undo-tree-id5613 . -396) (undo-tree-id5614 . -410) (undo-tree-id5615 . -427) (undo-tree-id5616 . -443) (undo-tree-id5617 . -427) (undo-tree-id5618 . -443) (undo-tree-id5619 . -506) (undo-tree-id5620 . -520) (undo-tree-id5621 . -506) (undo-tree-id5622 . -520) (undo-tree-id5623 . -537) (undo-tree-id5624 . -553) (undo-tree-id5625 . -537) (undo-tree-id5626 . -553) (undo-tree-id5627 . -616) (undo-tree-id5628 . -630) (undo-tree-id5629 . -616) (undo-tree-id5630 . -630) (undo-tree-id5631 . -647) (undo-tree-id5632 . -663) (undo-tree-id5633 . -647) (undo-tree-id5634 . -663) (2447 . 2479) (#("    phone_num =options[:phone]
" 0 4 (fontified t) 4 13 (fontified t face font-lock-variable-name-face) 13 23 (fontified t) 23 29 (fontified t face elixir-atom-face) 29 31 (fontified t)) . -2447) (t 25258 13652 525249 688000)) nil (25258 13709 952924 790000) 0 nil])
([nil nil ((#("    #    case status_code do
    #      400 -> Logger.error(\"Drissly Response: Codigo de error: #{status_code} , #{message}\")
    #      401 -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, #{response}\")
    #      403 -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, Access Forbidden\")
    #      Regex.match?(~r/^(50)/, status_code) -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, Tipo de error: #{error_message}\")
    #      500 -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, Tipo de error: #{error_message}\")
    #      502 -> Logger.error(\"Drissly Error: Codigo de error: #{status_code}, Tipo de Error: #{error_message}\")
    #      _ -> response
    #    end
" 0 4 (fontified t) 4 9 (fontified t face font-lock-comment-delimiter-face) 9 29 (fontified t face font-lock-comment-face) 29 33 (fontified t) 33 40 (fontified t face font-lock-comment-delimiter-face) 40 60 (fontified t face font-lock-comment-face) 60 61 (syntax-table (15) fontified t face font-lock-comment-face) 61 96 (fontified t face font-lock-comment-face) 96 97 (syntax-table (2) elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-comment-face) 97 113 (fontified t face font-lock-comment-face) 113 114 (syntax-table (2) elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-comment-face) 114 123 (fontified t face font-lock-comment-face) 123 124 (syntax-table (15) fontified t face font-lock-comment-face) 124 126 (fontified t face font-lock-comment-face) 126 130 (fontified t) 130 137 (fontified t face font-lock-comment-delimiter-face) 137 157 (fontified t face font-lock-comment-face) 157 158 (syntax-table (15) fontified t face font-lock-comment-face) 158 190 (fontified t face font-lock-comment-face) 190 191 (syntax-table (2) elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-comment-face) 191 206 (fontified t face font-lock-comment-face) 206 207 (syntax-table (2) elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-comment-face) 207 217 (fontified t face font-lock-comment-face) 217 218 (syntax-table (15) fontified t face font-lock-comment-face) 218 220 (fontified t face font-lock-comment-face) 220 224 (fontified t) 224 231 (fontified t face font-lock-comment-delimiter-face) 231 249 (fontified t face font-lock-comment-face) 249 251 (face font-lock-comment-face fontified t) 251 252 (syntax-table (15) face font-lock-comment-face fontified t) 252 284 (face font-lock-comment-face fontified t) 284 285 (syntax-table (2) elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) face font-lock-comment-face fontified t) 285 316 (face font-lock-comment-face fontified t) 316 317 (syntax-table (15) face font-lock-comment-face fontified t) 317 319 (face font-lock-comment-face fontified t) 319 323 (fontified t) 323 330 (fontified t face font-lock-comment-delimiter-face) 330 383 (fontified t face font-lock-comment-face) 383 384 (syntax-table (15) fontified t face font-lock-comment-face) 384 416 (fontified t face font-lock-comment-face) 416 417 (syntax-table (2) elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-comment-face) 417 447 (fontified t face font-lock-comment-face) 447 448 (syntax-table (2) elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-comment-face) 448 463 (fontified t face font-lock-comment-face) 463 464 (syntax-table (15) fontified t face font-lock-comment-face) 464 466 (fontified t face font-lock-comment-face) 466 470 (fontified t) 470 477 (fontified t face font-lock-comment-delimiter-face) 477 497 (fontified t face font-lock-comment-face) 497 498 (syntax-table (15) fontified t face font-lock-comment-face) 498 500 (fontified t face font-lock-comment-face) 500 530 (fontified t face font-lock-comment-face) 530 531 (syntax-table (2) elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-comment-face) 531 561 (fontified t face font-lock-comment-face) 561 562 (syntax-table (2) elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-comment-face) 562 577 (fontified t face font-lock-comment-face) 577 578 (syntax-table (15) fontified t face font-lock-comment-face) 578 580 (fontified t face font-lock-comment-face) 580 584 (fontified t) 584 591 (fontified t face font-lock-comment-delimiter-face) 591 611 (fontified t face font-lock-comment-face) 611 612 (syntax-table (15) fontified t face font-lock-comment-face) 612 644 (fontified t face font-lock-comment-face) 644 645 (syntax-table (2) elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-comment-face) 645 675 (fontified t face font-lock-comment-face) 675 676 (syntax-table (2) elixir-interpolation (nil #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex> #<marker at 5477 in medusa_drissly_adapter.ex>) fontified t face font-lock-comment-face) 676 691 (fontified t face font-lock-comment-face) 691 692 (syntax-table (15) fontified t face font-lock-comment-face) 692 694 (fontified t face font-lock-comment-face) 694 698 (fontified t) 698 705 (fontified t face font-lock-comment-delimiter-face) 705 719 (fontified t face font-lock-comment-face) 719 723 (fontified t) 723 724 (fontified t face font-lock-comment-delimiter-face) 724 728 (fontified t face font-lock-comment-delimiter-face) 728 732 (fontified t face font-lock-comment-face)) . -5478) (undo-tree-id5635 . -319) (undo-tree-id5636 . -319) (undo-tree-id5637 . -580) (undo-tree-id5638 . -580) (undo-tree-id5639 . -719) (undo-tree-id5640 . -719) (undo-tree-id5641 . -694) (undo-tree-id5642 . -694) (undo-tree-id5643 . -220) (undo-tree-id5644 . -220) (undo-tree-id5645 . -126) (undo-tree-id5646 . -126) (undo-tree-id5647 . -29) (undo-tree-id5648 . -29) (undo-tree-id5649 . -732) (undo-tree-id5650 . -732) (undo-tree-id5651 . -466) (undo-tree-id5652 . -466) (undo-tree-id5653 . -732) (undo-tree-id5654 . -96) (undo-tree-id5655 . -110) (undo-tree-id5656 . -96) (undo-tree-id5657 . -110) (undo-tree-id5658 . -113) (undo-tree-id5659 . -123) (undo-tree-id5660 . -113) (undo-tree-id5661 . -123) (undo-tree-id5662 . -190) (undo-tree-id5663 . -204) (undo-tree-id5664 . -190) (undo-tree-id5665 . -204) (undo-tree-id5666 . -206) (undo-tree-id5667 . -217) (undo-tree-id5668 . -206) (undo-tree-id5669 . -217) (undo-tree-id5670 . -284) (undo-tree-id5671 . -298) (undo-tree-id5672 . -284) (undo-tree-id5673 . -298) (undo-tree-id5674 . -416) (undo-tree-id5675 . -430) (undo-tree-id5676 . -416) (undo-tree-id5677 . -430) (undo-tree-id5678 . -447) (undo-tree-id5679 . -463) (undo-tree-id5680 . -447) (undo-tree-id5681 . -463) (undo-tree-id5682 . -530) (undo-tree-id5683 . -544) (undo-tree-id5684 . -530) (undo-tree-id5685 . -544) (undo-tree-id5686 . -561) (undo-tree-id5687 . -577) (undo-tree-id5688 . -561) (undo-tree-id5689 . -577) (undo-tree-id5690 . -644) (undo-tree-id5691 . -658) (undo-tree-id5692 . -644) (undo-tree-id5693 . -658) (undo-tree-id5694 . -675) (undo-tree-id5695 . -691) (undo-tree-id5696 . -675) (undo-tree-id5697 . -691) (undo-tree-id5698 . -732) (undo-tree-id5699 . -732) (undo-tree-id5700 . -732) 6210 (t 25258 13709 961163 349000)) nil (25258 13728 735218 685000) 0 nil])
([nil nil ((5539 . 5540) (#("	" 0 1 (fontified nil)) . 5538) (5538 . 5539) (5538 . 5539) (t 25258 13728 765138 825000)) nil (25258 13805 938569 494000) 0 nil])
([nil nil ((5659 . 5660) (#("	" 0 1 (fontified nil)) . 5658) (5658 . 5659) (5658 . 5659)) nil (25258 13805 938565 536000) 0 nil])
([nil nil ((5659 . 5665)) nil (25258 13805 938562 511000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5703 . 5704) (nil fontified nil 5686 . 5704) (nil fontified nil 5681 . 5686) (nil fontified nil 5680 . 5681) (nil fontified nil 5678 . 5680) (nil fontified nil 5670 . 5678) (nil fontified nil 5665 . 5670) (5665 . 5704)) nil (25258 13805 938559 745000) 0 nil])
([nil nil ((#("5" 0 1 (fontified t face font-lock-string-face)) . -5683) (undo-tree-id5705 . -1) (#("0" 0 1 (fontified t face font-lock-string-face)) . -5684) (undo-tree-id5706 . -1) 5685) nil (25258 13805 938553 975000) 0 nil])
([nil nil ((5683 . 5685)) nil (25258 13805 938547 492000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -5686) (5686 . 5687) (#("]" 0 1 (fontified nil face font-lock-string-face)) . -5686) (5686 . 5687) (5685 . 5687)) nil (25258 13805 938544 737000) 0 nil])
([nil nil ((5686 . 5687)) nil (25258 13805 938541 221000) 0 nil])
([nil nil ((5687 . 5689)) nil (25258 13805 938539 487000) 0 nil])
([nil nil ((5709 . 5710)) nil (25258 13805 938537 784000) 0 nil])
([nil nil ((nil rear-nonsticky nil 5784 . 5785) (nil fontified nil 5784 . 5785) (nil fontified nil 5783 . 5784) (nil fontified nil 5773 . 5783) (nil fontified nil 5772 . 5773) (nil fontified nil 5770 . 5772) (nil fontified nil 5757 . 5770) (nil fontified nil 5756 . 5757) (nil fontified nil 5724 . 5756) (nil fontified nil 5723 . 5724) (nil fontified nil 5716 . 5723) (nil fontified nil 5710 . 5716) (5710 . 5785)) nil (25258 13805 938534 508000) 0 nil])
([nil nil ((5787 . 5788)) nil (25258 13805 938527 705000) 0 nil])
([nil nil ((5818 . 5819)) nil (25258 13805 938525 882000) 0 nil])
([nil nil ((5904 . 5905)) nil (25258 13805 938523 898000) 0 nil])
([nil nil ((5935 . 5936)) nil (25258 13805 938521 53000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 5538) (undo-tree-id5701 . -1) (undo-tree-id5702 . -1) (undo-tree-id5703 . -1) (undo-tree-id5704 . -1)) nil (25258 13805 938513 358000) 0 nil])
([nil current ((#("s" 0 1 (fontified t face font-lock-string-face)) . -2720) (undo-tree-id5707 . -1) 2721 (t 25258 13805 957055 661000)) nil (25258 13894 173217 609000) 0 nil])
nil
