(undo-tree-save-format-version . 1)
"cf1aff59ba4c2108fb7e661a60b47bcdedfbbd96"
[nil nil nil nil (25280 15092 238739 606000) 0 nil]
([nil nil ((5953 . 5960) (t 25279 56528 908913 996000)) nil (25280 15092 238732 533000) 0 nil])
([nil nil ((6609 . 6613) (t 25280 15092 239355 617000)) nil (25280 15173 142797 794000) 0 nil])
([nil nil ((6617 . 6622)) nil (25280 15173 142795 530000) 0 nil])
([nil nil ((6622 . 6633)) nil (25280 15173 142793 446000) 0 nil])
([nil nil ((6633 . 6640)) nil (25280 15173 142791 412000) 0 nil])
([nil nil ((6734 . 6740) (6645 . 6647) (6731 . 6732)) nil (25280 15173 142788 867000) 0 nil])
([nil nil ((6740 . 6744)) nil (25280 15173 142785 852000) 0 nil])
([nil nil ((6640 . 6642) (#("\"" 0 1 (fontified nil syntax-table (15))) . -6640) (6640 . 6641)) nil (25280 15173 142783 357000) 0 nil])
([nil nil ((6641 . 6648)) nil (25280 15173 142780 81000) 0 nil])
([nil nil ((6649 . 6653)) nil (25280 15173 142777 676000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -6627) (undo-tree-id11 . -1) (#("p" 0 1 (fontified t)) . -6628) (undo-tree-id12 . -1) (#("s" 0 1 (fontified t)) . -6629) (undo-tree-id13 . -1) (#(" " 0 1 (fontified t)) . -6630) (undo-tree-id14 . -1) 6631) nil (25280 15173 142773 148000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -6609) (undo-tree-id7 . -1) (#("o" 0 1 (fontified t)) . -6610) (undo-tree-id8 . -1) (#("p" 0 1 (fontified t)) . -6611) (undo-tree-id9 . -1) (#("s" 0 1 (fontified t)) . -6612) (undo-tree-id10 . -1) 6613) nil (25280 15173 142759 412000) 0 nil])
([nil nil ((#("," 0 1 (fontified t)) . -5953) (undo-tree-id0 . -1) (#("a" 0 1 (fontified t)) . -5954) (undo-tree-id1 . -1) (#("c" 0 1 (fontified t)) . -5955) (undo-tree-id2 . -1) (#("t" 0 1 (fontified t)) . -5956) (undo-tree-id3 . -1) (#("i" 0 1 (fontified t)) . -5957) (undo-tree-id4 . -1) (#("o" 0 1 (fontified t)) . -5958) (undo-tree-id5 . -1) (#("n" 0 1 (fontified t)) . -5959) (undo-tree-id6 . -1) 5960) nil (25280 15173 142739 264000) 0 nil])
([nil nil ((#("defp persist_logs(msg, ops_id, request_log) do
    case do
      \"recarga\" or 
      IO.binwrite(Application.get_env(:medusa, :\"#{ops_id}\"), \"#{request_log}\\n\\n #{msg}\\n\")
      end 
  end
" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 7 (fontified t face font-lock-function-name-face) 7 17 (fontified t face font-lock-function-name-face) 17 44 (fontified t) 44 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t) 47 51 (fontified t) 51 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t) 56 58 (fontified t face font-lock-keyword-face) 58 59 (fontified t) 59 65 (fontified t) 65 66 (syntax-table (15) fontified t face font-lock-string-face) 66 73 (fontified t face font-lock-string-face) 73 74 (syntax-table (15) fontified t face font-lock-string-face) 74 75 (fontified t) 75 77 (fontified t face font-lock-keyword-face) 77 78 (fontified t) 78 79 (fontified t) 79 85 (fontified t) 85 87 (fontified t face font-lock-type-face) 87 91 (fontified t) 91 97 (fontified t) 97 108 (fontified t face font-lock-type-face) 108 117 (fontified t) 117 124 (fontified t face elixir-atom-face) 124 127 (fontified t) 127 128 (syntax-table (15) fontified t face font-lock-string-face) 128 129 (elixir-interpolation (t #<marker at 6431 in medusa_drissly_adapter.ex> #<marker at 6431 in medusa_drissly_adapter.ex> #<marker at 6431 in medusa_drissly_adapter.ex> #<marker at 6431 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 129 137 (fontified t face font-lock-variable-name-face) 137 138 (syntax-table (15) fontified t face font-lock-string-face) 138 141 (fontified t) 141 142 (syntax-table (15) fontified t face font-lock-string-face) 142 143 (elixir-interpolation (t #<marker at 6431 in medusa_drissly_adapter.ex> #<marker at 6431 in medusa_drissly_adapter.ex> #<marker at 6431 in medusa_drissly_adapter.ex> #<marker at 6431 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 143 156 (fontified t face font-lock-variable-name-face) 156 161 (fontified t face font-lock-string-face) 161 162 (elixir-interpolation (t #<marker at 6431 in medusa_drissly_adapter.ex> #<marker at 6431 in medusa_drissly_adapter.ex> #<marker at 6431 in medusa_drissly_adapter.ex> #<marker at 6431 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 162 167 (fontified t face font-lock-variable-name-face) 167 169 (fontified t face font-lock-string-face) 169 170 (syntax-table (15) fontified t face font-lock-string-face) 170 171 (fontified t) 171 172 (fontified t) 172 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 183 (fontified t) 183 185 (fontified t) 185 188 (fontified t face font-lock-keyword-face) 188 189 (fontified t)) . 6560) (undo-tree-id50 . -189) (undo-tree-id51 . -47) (undo-tree-id52 . -47) (undo-tree-id53 . -59) (undo-tree-id54 . -59) (undo-tree-id55 . -79) (undo-tree-id56 . -79) (undo-tree-id57 . -172) (undo-tree-id58 . -172) (undo-tree-id59 . -183) (undo-tree-id60 . -183) (undo-tree-id61 . -189) (undo-tree-id62 . -189) (undo-tree-id63 . -189) (undo-tree-id64 . -21) (undo-tree-id65 . -128) (undo-tree-id66 . -137) (undo-tree-id67 . -128) (undo-tree-id68 . -137) (undo-tree-id69 . -142) (undo-tree-id70 . -156) (undo-tree-id71 . -142) (undo-tree-id72 . -156) (undo-tree-id73 . -161) (undo-tree-id74 . -167) (undo-tree-id75 . -161) (undo-tree-id76 . -167) (undo-tree-id77 . -189) 6749 (t 25280 15173 155355 608000)) nil (25280 15276 104556 954000) 0 nil])
([nil nil ((7837 . 7839) (#("  " 0 2 (fontified nil)) . 7836) (7836 . 7838) (7836 . 7837)) nil (25280 15276 104537 248000) 0 nil])
([nil nil ((7837 . 7839) (#("  " 0 2 (fontified nil)) . 7836) (7836 . 7838) (7836 . 7837)) nil (25280 15276 104535 865000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8027 . 8028) (nil fontified nil 8027 . 8028) (nil fontified nil 8024 . 8027) (nil fontified nil 8022 . 8024) (nil fontified nil 8021 . 8022) (nil fontified nil 8020 . 8021) (nil fontified nil 8017 . 8020) (nil fontified nil 8011 . 8017) (nil fontified nil 8010 . 8011) (nil fontified nil 8009 . 8010) (nil fontified nil 8008 . 8009) (nil fontified nil 8006 . 8008) (nil fontified nil 8001 . 8006) (nil fontified nil 8000 . 8001) (nil fontified nil 7995 . 8000) (nil fontified nil 7982 . 7995) (nil fontified nil 7981 . 7982) (nil fontified nil 7980 . 7981) (nil fontified nil 7977 . 7980) (nil fontified nil 7976 . 7977) (nil fontified nil 7968 . 7976) (nil fontified nil 7967 . 7968) (nil fontified nil 7966 . 7967) (nil fontified nil 7963 . 7966) (nil fontified nil 7956 . 7963) (nil fontified nil 7947 . 7956) (nil fontified nil 7936 . 7947) (nil fontified nil 7930 . 7936) (nil fontified nil 7926 . 7930) (nil fontified nil 7924 . 7926) (nil fontified nil 7918 . 7924) (nil fontified nil 7917 . 7918) (nil fontified nil 7916 . 7917) (nil fontified nil 7914 . 7916) (nil fontified nil 7913 . 7914) (nil fontified nil 7912 . 7913) (nil fontified nil 7905 . 7912) (nil fontified nil 7904 . 7905) (nil fontified nil 7898 . 7904) (nil fontified nil 7897 . 7898) (nil fontified nil 7895 . 7897) (nil fontified nil 7894 . 7895) (nil fontified nil 7890 . 7894) (nil fontified nil 7886 . 7890) (nil fontified nil 7885 . 7886) (nil fontified nil 7883 . 7885) (nil fontified nil 7856 . 7883) (nil fontified nil 7846 . 7856) (nil fontified nil 7844 . 7846) (nil fontified nil 7843 . 7844) (nil fontified nil 7839 . 7843) (7839 . 8028)) nil (25280 15276 104532 639000) 0 nil])
([nil nil ((7881 . 7882)) nil (25280 15276 104524 674000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -7881) (undo-tree-id49 . -1) 7882) nil (25280 15276 104523 662000) 0 nil])
([nil nil ((7881 . 7885)) nil (25280 15276 104522 309000) 0 nil])
([nil nil ((7899 . 7903)) nil (25280 15276 104521 578000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7921) (undo-tree-id46 . -1) (#("o" 0 1 (fontified t)) . -7922) (undo-tree-id47 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -7923) (undo-tree-id48 . -1) 7924) nil (25280 15276 104520 206000) 0 nil])
([nil nil ((7921 . 7925)) nil (25280 15276 104515 968000) 0 nil])
([nil nil ((8015 . 8021) (7927 . 7928) (#("      " 0 6 (fontified nil)) . 7927) (8019 . 8020)) nil (25280 15276 104514 926000) 0 nil])
([nil nil ((8022 . 8035) (8021 . 8023) (#("\"" 0 1 (fontified nil syntax-table (15))) . -8021) (8021 . 8022)) nil (25280 15276 104513 172000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -8021) (undo-tree-id31 . -1) (#("p" 0 1 (fontified t face font-lock-string-face)) . -8022) (undo-tree-id32 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -8023) (undo-tree-id33 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -8024) (undo-tree-id34 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -8025) (undo-tree-id35 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -8026) (undo-tree-id36 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -8027) (undo-tree-id37 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -8028) (undo-tree-id38 . -1) (#("r" 0 1 (fontified t face font-lock-string-face)) . -8029) (undo-tree-id39 . -1) (#("v" 0 1 (fontified t face font-lock-string-face)) . -8030) (undo-tree-id40 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -8031) (undo-tree-id41 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -8032) (undo-tree-id42 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -8033) (undo-tree-id43 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -8034) (undo-tree-id44 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -8035) (undo-tree-id45 . -1) 8036) nil (25280 15276 104508 83000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face font-lock-keyword-face)) . -7897) (undo-tree-id30 . -1) 7898) nil (25280 15276 104496 551000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . -7895) (undo-tree-id28 . -1) (#("s" 0 1 (fontified t)) . -7896) (undo-tree-id29 . -1) 7897) nil (25280 15276 104494 507000) 0 nil])
([nil nil ((7895 . 7898)) nil (25280 15276 104492 233000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7898) (undo-tree-id23 . -1) (#("o" 0 1 (fontified t)) . -7899) (undo-tree-id24 . -1) (#("p" 0 1 (fontified t)) . -7900) (undo-tree-id25 . -1) (#("s" 0 1 (fontified t)) . -7901) (undo-tree-id26 . -1) (#(" " 0 1 (fontified t)) . -7902) (undo-tree-id27 . -1) 7903) nil (25280 15276 104490 410000) 0 nil])
([nil nil ((7898 . 7899)) nil (25280 15276 104483 487000) 0 nil])
([nil nil ((7901 . 7908)) nil (25280 15276 104482 916000) 0 nil])
([nil nil ((7915 . 7921)) nil (25280 15276 104482 264000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7920) (undo-tree-id22 . -1) 7921) nil (25280 15276 104481 373000) 0 nil])
([nil nil ((7920 . 7922)) nil (25280 15276 104479 950000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -7920) (undo-tree-id20 . -1) (#(" " 0 1 (fontified t)) . -7921) (undo-tree-id21 . -1) 7922) nil (25280 15276 104478 768000) 0 nil])
([nil nil ((7920 . 7921)) nil (25280 15276 104476 754000) 0 nil])
([nil nil ((7921 . 7922)) nil (25280 15276 104476 143000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-constant-face)) . -7932) (undo-tree-id18 . -1) (#(">" 0 1 (fontified t)) . -7933) (undo-tree-id19 . -1) 7934) nil (25280 15276 104474 991000) 0 nil])
([nil nil ((7932 . 7938)) nil (25280 15276 104472 546000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -7935) (undo-tree-id15 . -1) (#("p" 0 1 (fontified t)) . -7936) (undo-tree-id16 . -1) (#("s" 0 1 (fontified t)) . -7937) (undo-tree-id17 . -1) 7938) nil (25280 15276 104470 502000) 0 nil])
([nil nil ((7936 . 7938) (7935 . 7937) (#("\"" 0 1 (fontified nil syntax-table (15))) . -7935) (7935 . 7936)) nil (25280 15276 104458 961000) 0 nil])
([nil nil ((7938 . 7949)) nil (25280 15276 104454 122000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7908) (#(" " 0 1 (fontified t)) . 7908) (#(" " 0 1 (fontified t)) . 7908) (#(" " 0 1 (fontified t)) . 7908) (#(" " 0 1 (fontified t)) . 7908) (#(" " 0 1 (fontified t)) . 7908) (#("
" 0 1 (fontified t)) . 7908) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (t 25280 15276 143355 595000)) nil (25280 15356 963221 267000) 0 nil])
([nil nil ((7944 . 7945)) nil (25280 15356 963216 959000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-constant-face)) . -7944) (undo-tree-id83 . -1) 7945) nil (25280 15356 963215 897000) 0 nil])
([nil nil ((7944 . 7946)) nil (25280 15356 963214 534000) 0 nil])
([nil nil ((8035 . 8037)) nil (25280 15356 963213 873000) 0 nil])
([nil nil ((8036 . 8042)) nil (25280 15356 963213 312000) 0 nil])
([nil nil ((8042 . 8046)) nil (25280 15356 963212 661000) 0 nil])
([nil nil ((8046 . 8048)) nil (25280 15356 963211 729000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-constant-face)) . -8047) (undo-tree-id82 . -1) 8048) nil (25280 15356 963210 577000) 0 nil])
([nil nil ((8047 . 8049)) nil (25280 15356 963208 453000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -8047) (undo-tree-id80 . -1) (#(">" 0 1 (fontified t)) . -8048) (undo-tree-id81 . -1) 8049) nil (25280 15356 963206 629000) 0 nil])
([nil nil ((8047 . 8049)) nil (25280 15356 963204 104000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-constant-face)) . -8047) (undo-tree-id78 . -1) (#(">" 0 1 (fontified t)) . -8048) (undo-tree-id79 . -1) 8049) nil (25280 15356 963202 371000) 0 nil])
([nil nil ((8047 . 8048)) nil (25280 15356 963192 62000) 0 nil])
([nil nil ((8048 . 8050)) nil (25280 15356 963190 789000) 0 nil])
([nil nil ((8050 . 8053)) nil (25280 15356 963185 690000) 0 nil])
([nil nil ((5953 . 5960) (t 25280 15356 975355 586000)) nil (25280 15389 894206 472000) 0 nil])
([nil nil ((#("# import UUID" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 13 (fontified t face font-lock-comment-face)) . 2417) (undo-tree-id91 . -13) (t 25280 15389 935355 582000)) nil (25280 16346 633571 822000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2417) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1)) nil (25280 16346 633569 148000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 2417) (#(" " 0 1 (fontified t)) . 2417)) nil (25280 16346 633552 622000) 0 nil])
([nil nil ((#("use Timex" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-type-face)) . 2388) (undo-tree-id100 . -9) (t 25280 16346 668161 593000)) nil (25280 16354 52663 211000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2385) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1)) nil (25280 16354 52657 131000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 2385) (undo-tree-id92 . -3) (undo-tree-id93 . -3) (undo-tree-id94 . -3) (undo-tree-id95 . -3)) nil (25280 16354 52642 378000) 0 nil])
([nil nil ((7648 . 7653) (t 25280 16354 61981 342000)) nil (25280 16600 297124 744000) 0 nil])
([nil nil ((7653 . 7666)) nil (25280 16600 297123 852000) 0 nil])
([nil nil ((7666 . 7673)) nil (25280 16600 297123 81000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -7658) (undo-tree-id125 . -1) (#("l" 0 1 (fontified t)) . -7659) (undo-tree-id126 . -1) (#("a" 0 1 (fontified t)) . -7660) (undo-tree-id127 . -1) (#("s" 0 1 (fontified t)) . -7661) (undo-tree-id128 . -1) (#("s" 0 1 (fontified t)) . -7662) (undo-tree-id129 . -1) (#(" " 0 1 (fontified t)) . -7663) (undo-tree-id130 . -1) 7664) nil (25280 16600 297121 97000) 0 nil])
([nil nil ((7665 . 7681)) nil (25280 16600 297116 28000) 0 nil])
([nil nil ((7674 . 7676) (#("\"" 0 1 (fontified nil syntax-table (15))) . -7674) (7674 . 7675)) nil (25280 16600 297115 236000) 0 nil])
([nil nil ((#("recarga  " 0 9 (fontified t)) . 7676) (undo-tree-id123 . -9) (undo-tree-id124 . -9) 7685) nil (25280 16600 297114 134000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7683 . 7684) (nil fontified nil 7675 . 7684) (7675 . 7684)) nil (25280 16600 297112 201000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-string-face)) . -7682) (undo-tree-id121 . -1) (#(" " 0 1 (fontified t rear-nonsticky t face font-lock-string-face)) . -7683) (undo-tree-id122 . -1) 7684) nil (25280 16600 297110 848000) 0 nil])
([nil nil ((7687 . 7689) (#("\"" 0 1 (fontified nil syntax-table (15))) . -7687) (7683 . 7688)) nil (25280 16600 297108 744000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -7688) (7688 . 7689) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -7688) (7688 . 7689)) nil (25280 16600 297107 552000) 0 nil])
([nil nil ((7688 . 7702)) nil (25280 16600 297106 450000) 0 nil])
([nil nil ((7703 . 7706)) nil (25280 16600 297105 889000) 0 nil])
([nil nil ((7863 . 7864) (7791 . 7792) (#("    " 0 4 (fontified t)) . 7791) (7865 . 7866)) nil (25280 16600 297104 968000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . 7863) (7863 . 7864) (7863 . 7864)) nil (25280 16600 297103 715000) 0 nil])
([nil nil ((7863 . 7868)) nil (25280 16600 297102 834000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -7653) (undo-tree-id114 . -1) (#("o" 0 1 (fontified t)) . -7654) (undo-tree-id115 . -1) (#("n" 0 1 (fontified t)) . -7655) (undo-tree-id116 . -1) (#("d" 0 1 (fontified t face font-lock-keyword-face)) . -7656) (undo-tree-id117 . -1) (#(" " 0 1 (fontified t)) . -7657) (undo-tree-id118 . -1) (#("d" 0 1 (fontified t)) . -7658) (undo-tree-id119 . -1) (#("o" 0 1 (fontified t face font-lock-keyword-face)) . -7659) (undo-tree-id120 . -1) 7660) nil (25280 16600 297100 650000) 0 nil])
([nil nil ((7653 . 7656)) nil (25280 16600 297095 260000) 0 nil])
([nil nil ((7656 . 7661)) nil (25280 16600 297094 619000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -7656) (undo-tree-id109 . -1) (#("l" 0 1 (fontified t)) . -7657) (undo-tree-id110 . -1) (#("a" 0 1 (fontified t)) . -7658) (undo-tree-id111 . -1) (#("s" 0 1 (fontified t)) . -7659) (undo-tree-id112 . -1) (#("s" 0 1 (fontified t)) . -7660) (undo-tree-id113 . -1) 7661) nil (25280 16600 297092 655000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7656) (#(" " 0 1 (fontified t)) . 7656) (#(" " 0 1 (fontified t)) . 7656) (#(" " 0 1 (fontified t)) . 7656) (#("
" 0 1 (fontified t)) . 7656) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1)) nil (25280 16600 297087 716000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7694) (undo-tree-id103 . -1) (#("-" 0 1 (fontified t)) . -7695) (undo-tree-id104 . -1) (#(">" 0 1 (fontified t)) . -7696) (undo-tree-id105 . -1) 7697) nil (25280 16600 297054 105000) 0 nil])
([nil nil ((7694 . 7697)) nil (25280 16600 297051 260000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face font-lock-type-face)) . 7782) (#("	" 0 1 (fontified t)) . 7782)) nil (25280 16600 297050 178000) 0 nil])
([nil nil ((7782 . 7783)) nil (25280 16600 297048 946000) 0 nil])
([nil nil ((7782 . 7783)) nil (25280 16600 297048 114000) 0 nil])
([nil nil ((7783 . 7784)) nil (25280 16600 297047 393000) 0 nil])
([nil nil ((7782 . 7785)) nil (25280 16600 297046 732000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7786) (#(" " 0 1 (fontified t)) . 7786)) nil (25280 16600 297045 750000) 0 nil])
([nil nil ((7785 . 7786)) nil (25280 16600 297044 858000) 0 nil])
([nil nil ((7859 . 7862) (#("    " 0 4 (fontified t)) . 7857) (undo-tree-id101 . -4) (undo-tree-id102 . -4) (7861 . 7862)) nil (25280 16600 297043 335000) 0 nil])
([nil nil ((7857 . 7869)) nil (25280 16600 297031 303000) 0 nil])
([nil nil ((7874 . 7878)) nil (25280 16600 297026 525000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face font-lock-keyword-face)) . -7948) (undo-tree-id159 . -1) (#(" " 0 1 (fontified t)) . -7949) (undo-tree-id160 . -1) (#("d" 0 1 (fontified t)) . -7950) (undo-tree-id161 . -1) (#("o" 0 1 (fontified t face font-lock-keyword-face)) . -7951) (undo-tree-id162 . -1) 7952 (t 25280 16600 296559 591000)) nil (25280 16627 350241 328000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -7945) (undo-tree-id156 . -1) (#("o" 0 1 (fontified t)) . -7946) (undo-tree-id157 . -1) (#("n" 0 1 (fontified t)) . -7947) (undo-tree-id158 . -1) 7948) nil (25280 16627 350230 187000) 0 nil])
([nil nil ((7945 . 7948)) nil (25280 16627 350221 932000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7948) (#(" " 0 1 (fontified t)) . 7948) (#(" " 0 1 (fontified t)) . 7948) (#(" " 0 1 (fontified t)) . 7948) (#(" " 0 1 (fontified t)) . 7948) (#(" " 0 1 (fontified t)) . 7948) (#("
" 0 1 (fontified t)) . 7948) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1)) nil (25280 16627 350217 794000) 0 nil])
([nil nil ((#("-" 0 1 (fontified t)) . -7984) (undo-tree-id150 . -1) (#(">" 0 1 (fontified t)) . -7985) (undo-tree-id151 . -1) (#(" " 0 1 (fontified t)) . -7986) (undo-tree-id152 . -1) 7987) nil (25280 16627 350119 385000) 0 nil])
([nil nil ((7984 . 7986)) nil (25280 16627 350111 731000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -8088) (undo-tree-id149 . -1) 8089) nil (25280 16627 350109 567000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -8079) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#(" " 0 1 (fontified t)) . -8080) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (#("t" 0 1 (fontified t)) . -8081) (undo-tree-id142 . -1) (#("r" 0 1 (fontified t)) . -8082) (undo-tree-id143 . -1) (#("u" 0 1 (fontified t)) . -8083) (undo-tree-id144 . -1) (#("e" 0 1 (fontified t)) . -8084) (undo-tree-id145 . -1) (#(" " 0 1 (fontified t)) . -8085) (undo-tree-id146 . -1) (#("-" 0 1 (fontified t)) . -8086) (undo-tree-id147 . -1) (#(">" 0 1 (fontified t)) . -8087) (undo-tree-id148 . -1) 8088) nil (25280 16627 350101 692000) 0 nil])
([nil nil ((8079 . 8084)) nil (25280 16627 350076 927000) 0 nil])
([nil nil ((#("	" 0 1 (fontified nil)) . -8094) (8094 . 8095) (#("	" 0 1 (fontified nil)) . 8094) (8087 . 8094)) nil (25280 16627 350074 382000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 8092) (#(" " 0 1 (fontified t)) . 8092) (#(" " 0 1 (fontified t)) . 8092) (#(" " 0 1 (fontified t)) . 8092) (#("
" 0 1 (fontified t)) . 8092) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (#(" " 0 1 (fontified t)) . 8092) (#(" " 0 1 (fontified t)) . 8092)) nil (25280 16627 350068 802000) 0 nil])
([nil nil ((#("  
" 0 2 (fontified t) 2 3 (fontified t)) . 8092) (undo-tree-id131 . -3) (undo-tree-id132 . -3) (undo-tree-id133 . -3) (undo-tree-id134 . -3)) nil (25280 16627 350057 732000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 8092) (#(" " 0 1 (fontified t)) . 8092) (#(" " 0 1 (fontified t)) . 8092) (#(" " 0 1 (fontified t)) . 8092) (#(" " 0 1 (fontified t)) . 8092) (#(" " 0 1 (fontified t)) . 8092)) nil (25280 16627 350030 963000) 0 nil])
([nil nil ((#("  
" 0 3 (fontified t)) . -8091) (undo-tree-id163 . -3) (undo-tree-id164 . -3) (7964 . 8084) (#("	IO.binwrite(Application.get_env(:medusa, :\"#{ops_id}\"), \"#{request_log}\\n\\n #{msg}\\n\")
    else nil
    end 
" 0 1 (fontified t) 1 3 (fontified t face font-lock-type-face) 3 7 (fontified t) 7 13 (fontified t) 13 24 (fontified t face font-lock-type-face) 24 33 (fontified t) 33 40 (fontified t face elixir-atom-face) 40 43 (fontified t) 43 44 (syntax-table (15) fontified t face font-lock-string-face) 44 45 (elixir-interpolation (t #<marker at 7902 in medusa_drissly_adapter.ex> #<marker at 7902 in medusa_drissly_adapter.ex> #<marker at 7902 in medusa_drissly_adapter.ex> #<marker at 7902 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 45 53 (fontified t face font-lock-variable-name-face) 53 54 (syntax-table (15) fontified t face font-lock-string-face) 54 57 (fontified t) 57 58 (syntax-table (15) fontified t face font-lock-string-face) 58 59 (elixir-interpolation (t #<marker at 7902 in medusa_drissly_adapter.ex> #<marker at 7902 in medusa_drissly_adapter.ex> #<marker at 7902 in medusa_drissly_adapter.ex> #<marker at 7902 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 59 72 (fontified t face font-lock-variable-name-face) 72 77 (fontified t face font-lock-string-face) 77 78 (elixir-interpolation (t #<marker at 7902 in medusa_drissly_adapter.ex> #<marker at 7902 in medusa_drissly_adapter.ex> #<marker at 7902 in medusa_drissly_adapter.ex> #<marker at 7902 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 78 83 (fontified t face font-lock-variable-name-face) 83 85 (fontified t face font-lock-string-face) 85 86 (syntax-table (15) fontified t face font-lock-string-face) 86 87 (fontified t) 87 88 (fontified t) 88 92 (fontified t) 92 96 (fontified t face font-lock-keyword-face) 96 97 (fontified t) 97 100 (fontified t face elixir-atom-face) 100 101 (fontified t) 101 105 (fontified t) 105 108 (fontified t face font-lock-keyword-face) 108 109 (fontified t) 109 110 (fontified t)) . -7964) (undo-tree-id165 . -88) (undo-tree-id166 . -88) (undo-tree-id167 . -101) (undo-tree-id168 . -101) (undo-tree-id169 . -110) (undo-tree-id170 . -110) (undo-tree-id171 . -92) (undo-tree-id172 . -101) (undo-tree-id173 . -110) (undo-tree-id174 . -105) (undo-tree-id175 . -105) (7864 . 7918) (#("  defp persist_logs(msg, ops_id, request_log,ops) do
" 0 2 (fontified t) 2 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 9 (fontified t face font-lock-function-name-face) 9 18 (fontified t face font-lock-function-name-face) 18 19 (fontified t face font-lock-function-name-face) 19 50 (fontified t) 50 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t)) . -7864) (undo-tree-id176 . -53) (undo-tree-id177 . -53) (undo-tree-id178 . -2) (undo-tree-id179 . -14) (7667 . 7857) (#("    {:ok, file} = File.open(\"logs/#{get_path(class)}/#{payment_id}.log\", [:append])
    Application.put_env(:medusa, :\"#{payment_id}\", file, persistent: true)
    else nil
    end 
	
" 0 5 (fontified t) 5 8 (fontified t face elixir-atom-face) 8 18 (fontified t) 18 22 (fontified t face font-lock-type-face) 22 28 (fontified t) 28 29 (syntax-table (15) fontified t face font-lock-string-face) 29 34 (fontified t face font-lock-string-face) 34 35 (elixir-interpolation (t #<marker at 7598 in medusa_drissly_adapter.ex> #<marker at 7598 in medusa_drissly_adapter.ex> #<marker at 7598 in medusa_drissly_adapter.ex> #<marker at 7598 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 35 52 (fontified t face font-lock-variable-name-face) 52 53 (fontified t face font-lock-string-face) 53 54 (elixir-interpolation (t #<marker at 7598 in medusa_drissly_adapter.ex> #<marker at 7598 in medusa_drissly_adapter.ex> #<marker at 7598 in medusa_drissly_adapter.ex> #<marker at 7598 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-variable-name-face) 54 66 (fontified t face font-lock-variable-name-face) 66 70 (fontified t face font-lock-string-face) 70 71 (syntax-table (15) fontified t face font-lock-string-face) 71 74 (fontified t) 74 81 (fontified t face elixir-atom-face) 81 84 (fontified t) 84 88 (fontified t) 88 89 (fontified t face font-lock-type-face) 89 99 (fontified t face font-lock-type-face) 99 108 (fontified t) 108 115 (fontified t face elixir-atom-face) 115 118 (fontified t) 118 119 (fontified t syntax-table (15) face font-lock-string-face) 119 120 (elixir-interpolation (t #<marker at 7598 in medusa_drissly_adapter.ex> #<marker at 7598 in medusa_drissly_adapter.ex> #<marker at 7598 in medusa_drissly_adapter.ex> #<marker at 7598 in medusa_drissly_adapter.ex>) fontified t syntax-table (2) face font-lock-variable-name-face) 120 132 (fontified t face font-lock-variable-name-face) 132 133 (fontified t syntax-table (15) face font-lock-string-face) 133 141 (fontified t) 141 152 (fontified t face elixir-atom-face) 152 153 (fontified t) 153 157 (fontified t face elixir-atom-face) 157 158 (fontified t) 158 159 (fontified t) 159 163 (fontified t) 163 167 (fontified t face font-lock-keyword-face) 167 168 (fontified t) 168 171 (fontified t face elixir-atom-face) 171 172 (fontified t) 172 176 (fontified t) 176 179 (fontified t face font-lock-keyword-face) 179 180 (fontified t) 180 181 (fontified t) 181 182 (fontified t) 182 183 (fontified t)) . -7667) (undo-tree-id180 . -84) (undo-tree-id181 . -84) (undo-tree-id182 . -183) (undo-tree-id183 . -183) (undo-tree-id184 . -181) (undo-tree-id185 . -181) (undo-tree-id186 . -172) (undo-tree-id187 . -172) (undo-tree-id188 . -159) (undo-tree-id189 . -159) ("  
" . -6508) (undo-tree-id190 . -2) (undo-tree-id191 . -2) (undo-tree-id192 . -2) (undo-tree-id193 . -2) (undo-tree-id194 . -2) (undo-tree-id195 . -2) (undo-tree-id196 . -2) (undo-tree-id197 . -2) (undo-tree-id198 . -2) (undo-tree-id199 . -2) (undo-tree-id200 . -2) (undo-tree-id201 . -2) (undo-tree-id202 . -2) (undo-tree-id203 . -2) (6366 . 6465) (#("        Logger.error(
            \"Drissly Error: Codigo de error: #{status_cod}, Tipo de error: #{err_messg}\"
          )
" 0 8 (fontified t) 8 14 (fontified t face font-lock-type-face) 14 17 (fontified t) 17 22 (fontified t) 34 35 (face font-lock-string-face syntax-table (15)) 35 63 (face font-lock-string-face) 63 67 (face font-lock-string-face) 67 68 (elixir-interpolation (t #<marker at 6289 in medusa_drissly_adapter.ex> #<marker at 6289 in medusa_drissly_adapter.ex> #<marker at 6289 in medusa_drissly_adapter.ex> #<marker at 6289 in medusa_drissly_adapter.ex>) face font-lock-variable-name-face syntax-table (2)) 68 80 (face font-lock-variable-name-face) 80 97 (face font-lock-string-face) 97 98 (elixir-interpolation (t #<marker at 6289 in medusa_drissly_adapter.ex> #<marker at 6289 in medusa_drissly_adapter.ex> #<marker at 6289 in medusa_drissly_adapter.ex> #<marker at 6289 in medusa_drissly_adapter.ex>) face font-lock-variable-name-face syntax-table (2)) 98 109 (face font-lock-variable-name-face) 109 110 (face font-lock-string-face syntax-table (15))) . -6366) (5871 . 5929) (#("    |> persist_logs(payment_id, log_de_operacion,action)
" 0 11 (fontified t) 11 17 (fontified t) 17 57 (fontified t)) . -5871) (undo-tree-id204 . -55) (#("    
" 0 5 (fontified t)) . -5572) (t 25280 16627 363176 8000)) nil (25280 16696 840908 753000) 0 nil])
([nil nil ((7945 . 7952)) nil (25280 16696 840821 232000) 0 nil])
([nil nil ((7647 . 7654)) nil (25280 16696 840813 818000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -7647) (undo-tree-id205 . -1) (#("p" 0 1 (fontified t)) . -7648) (undo-tree-id206 . -1) (#("s" 0 1 (fontified t)) . -7649) (undo-tree-id207 . -1) 7650 (t 25280 16696 880380 709000)) nil (25280 16706 632290 58000) 0 nil])
([nil nil ((7647 . 7652)) nil (25280 16706 632275 240000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -7854) (undo-tree-id211 . -1) (#("i" 0 1 (fontified t)) . -7855) (undo-tree-id212 . -1) (#("l" 0 1 (fontified t face elixir-atom-face)) . -7856) (undo-tree-id213 . -1) 7857 (t 25280 16706 640054 270000)) nil (25280 16741 255764 979000) 0 nil])
([nil nil ((7847 . 7851)) nil (25280 16741 255753 969000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -8089) (undo-tree-id208 . -1) (#("i" 0 1 (fontified t)) . -8090) (undo-tree-id209 . -1) (#("l" 0 1 (fontified t face elixir-atom-face)) . -8091) (undo-tree-id210 . -1) 8092) nil (25280 16741 255748 599000) 0 nil])
([nil nil ((8089 . 8092)) nil (25280 16741 255722 460000) 0 nil])
([nil nil ((7980 . 7987) (t 25280 16741 270992 561000)) nil (25280 16775 802547 748000) 0 nil])
([nil nil ((7998 . 8001) (7987 . 7999)) nil (25280 16775 802542 999000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t face font-lock-type-face)) . -7987) (undo-tree-id214 . -1) (#("O" 0 1 (fontified t face font-lock-type-face)) . -7988) (undo-tree-id215 . -1) (#("." 0 1 (fontified t)) . -7989) (undo-tree-id216 . -1) (#("i" 0 1 (fontified t)) . -7990) (undo-tree-id217 . -1) (#("n" 0 1 (fontified t)) . -7991) (undo-tree-id218 . -1) (#("s" 0 1 (fontified t)) . -7992) (undo-tree-id219 . -1) (#("p" 0 1 (fontified t)) . -7993) (undo-tree-id220 . -1) (#("e" 0 1 (fontified t)) . -7994) (undo-tree-id221 . -1) (#("c" 0 1 (fontified t)) . -7995) (undo-tree-id222 . -1) (#("t" 0 1 (fontified t)) . -7996) (undo-tree-id223 . -1) 7997 (t 25280 16775 814056 201000)) nil (25280 16904 235294 884000) 0 nil])
([nil nil ((7987 . 7999)) nil (25280 16904 235261 740000) 0 nil])
([nil nil ((8004 . 8012)) nil (25280 16904 235259 756000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -8013) (8013 . 8014) (#(")" 0 1 (fontified nil)) . -8013) (8013 . 8014) (8012 . 8014)) nil (25280 16904 235255 17000) 0 nil])
([nil nil ((8013 . 8014)) nil (25280 16904 235246 260000) 0 nil])
([nil nil ((7987 . 7999) (t 25280 16904 248719 817000)) nil (25280 17066 730805 484000) 0 nil])
([nil nil ((#("Jason.decode(msg) |> elem(1)" 0 5 (fontified t face font-lock-type-face) 5 12 (fontified t) 12 25 (fontified t) 25 27 (fontified t) 27 28 (fontified t)) . 7999) (undo-tree-id224 . -28) (undo-tree-id225 . 1) (undo-tree-id226 . -28) (undo-tree-id227 . 3) (undo-tree-id228 . -26) (undo-tree-id229 . -28) (undo-tree-id230 . -28) 8027) nil (25280 17066 730803 180000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8025 . 8026) (nil fontified nil 8025 . 8026) (nil fontified nil 8023 . 8025) (nil fontified nil 8010 . 8023) (nil fontified nil 8003 . 8010) (nil fontified nil 7998 . 8003) (7998 . 8026)) nil (25280 17066 730747 63000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -8136) (undo-tree-id231 . -1) (#("o" 0 1 (fontified t face elixir-atom-face)) . -8137) (undo-tree-id232 . -1) (#("k" 0 1 (fontified t face elixir-atom-face)) . -8138) (undo-tree-id233 . -1) 8139 (t 25280 17066 741231 335000)) nil (25280 17108 182228 833000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8175 . 8176) (nil fontified nil 8175 . 8176) (nil fontified nil 8174 . 8175) (nil fontified nil 8172 . 8174) (nil fontified nil 8159 . 8172) (nil fontified nil 8152 . 8159) (nil fontified nil 8147 . 8152) (nil fontified nil 8146 . 8147) (nil fontified nil 8138 . 8146) (nil fontified nil 8136 . 8138) (8136 . 8176)) nil (25280 17108 182199 999000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -7848) (undo-tree-id237 . -1) (#("o" 0 1 (fontified t face elixir-atom-face)) . -7849) (undo-tree-id238 . -1) (#("k" 0 1 (fontified t face elixir-atom-face)) . -7850) (undo-tree-id239 . -1) 7851 (t 25280 17108 221885 89000)) nil (25280 17181 916453 773000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -7849) (7849 . 7850) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -7849) (7849 . 7850) (7848 . 7850) (#("\"" 0 1 (fontified nil syntax-table (15))) . -7848) (7848 . 7849)) nil (25280 17181 916442 913000) 0 nil])
([nil nil ((7849 . 7853)) nil (25280 17181 916437 663000) 0 nil])
([nil nil ((7848 . 7860)) nil (25280 17181 916435 148000) 0 nil])
([nil nil ((#("\"Hola\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face) 1 5 (fontified t face font-lock-string-face) 5 6 (fontified t syntax-table (15) face font-lock-string-face)) . 7860) (undo-tree-id234 . -6) (undo-tree-id235 . -6) (undo-tree-id236 . -6) 7866) nil (25280 17181 916430 38000) 0 nil])
([nil nil ((nil rear-nonsticky nil 7864 . 7865) (nil fontified nil 7864 . 7865) (nil fontified nil 7860 . 7864) (nil fontified nil 7859 . 7860) (7859 . 7865)) nil (25280 17181 916406 63000) 0 nil])
([nil nil ((#("close_log(payment_id)" 0 21 (fontified t)) . 5934) (undo-tree-id240 . -21) (undo-tree-id241 . -21) (undo-tree-id242 . 1) (undo-tree-id243 . -21) (undo-tree-id244 . 12) (undo-tree-id245 . -10) 5955 (t 25280 17181 918702 614000)) nil (25280 17268 86499 513000) 0 nil])
([nil nil ((8114 . 8121)) nil (25280 17268 86472 543000) 0 nil])
([nil nil ((nil rear-nonsticky nil 8141 . 8142) (nil fontified nil 8121 . 8142) (8121 . 8142)) nil (25280 17268 86464 277000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t)) . -8131) (undo-tree-id246 . -1) (#("a" 0 1 (fontified t)) . -8132) (undo-tree-id247 . -1) (#("y" 0 1 (fontified t)) . -8133) (undo-tree-id248 . -1) (#("m" 0 1 (fontified t)) . -8134) (undo-tree-id249 . -1) (#("e" 0 1 (fontified t)) . -8135) (undo-tree-id250 . -1) (#("n" 0 1 (fontified t)) . -8136) (undo-tree-id251 . -1) (#("t" 0 1 (fontified t)) . -8137) (undo-tree-id252 . -1) 8138 (t 25280 17268 103227 648000)) nil (25280 17273 901439 499000) 0 nil])
([nil nil ((8131 . 8134)) nil (25280 17273 901407 118000) 0 nil])
([nil nil ((#("I" 0 1 (fontified t face font-lock-type-face)) . -7827) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("O" 0 1 (fontified t face font-lock-type-face)) . -7828) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (#("." 0 1 (fontified t)) . -7829) (undo-tree-id259 . -1) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (#("i" 0 1 (fontified t)) . -7830) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (#("n" 0 1 (fontified t)) . -7831) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (#("s" 0 1 (fontified t)) . -7832) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (#("p" 0 1 (fontified t)) . -7833) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (#("e" 0 1 (fontified t)) . -7834) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (#("c" 0 1 (fontified t)) . -7835) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (#("t" 0 1 (fontified t)) . -7836) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (#("(" 0 1 (fontified t)) . -7837) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -7838) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (#("H" 0 1 (fontified t face font-lock-string-face)) . -7839) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -7840) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -7841) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -7842) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (#("\"" 0 1 (rear-nonsticky t fontified t syntax-table (15) face font-lock-string-face)) . -7843) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#(")" 0 1 (fontified t)) . -7844) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . 1) (undo-tree-id301 . -1) 7845 (t 25280 17273 907249 616000)) nil (25280 17436 989958 288000) 0 nil])
([nil nil ((7827 . 7830)) nil (25280 17436 989852 950000) 0 nil])
([nil nil ((#("# Catalogo de productos
# Medusa.DrisslyAdapter.make_request(\"catalogo_productos\",[])

# Catalogo de Servicios
# Medusa.DrisslyAdapter.make_request(\"catalogo_servicios\",[])

# Recarga de tae
# Medusa.DrisslyAdapter.make_request(\"recarga\",[phone: \"5512345678\", id_product: 78,amount: 100])

# Pago de servicio
# Medusa.DrisslyAdapter.make_request(\"pago_servicio\",[phone: \"5512345678\",id_product: 98,amount: 100,aditional: \"TEST\",reference: 010101010101])

# Consulta transaccion
# Medusa.DrisslyAdapter.make_request(\"consulta_transaccion\",[folio: 9064])
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 2 (fontified t face font-lock-comment-delimiter-face) 2 10 (fontified t face font-lock-comment-face) 10 12 (fontified t face font-lock-comment-face) 12 13 (fontified t face font-lock-comment-face) 13 20 (fontified t face font-lock-comment-face) 20 24 (fontified t face font-lock-comment-face) 24 26 (fontified t face font-lock-comment-delimiter-face) 26 31 (fontified t face font-lock-comment-face) 31 33 (fontified t face font-lock-comment-face) 33 61 (fontified t face font-lock-comment-face) 61 62 (syntax-table (15) fontified t face font-lock-comment-face) 62 76 (fontified t face font-lock-comment-face) 76 80 (fontified t face font-lock-comment-face) 80 81 (syntax-table (15) fontified t face font-lock-comment-face) 81 86 (fontified t face font-lock-comment-face) 86 87 (fontified t) 87 89 (fontified t face font-lock-comment-delimiter-face) 89 101 (fontified t face font-lock-comment-face) 101 111 (fontified t face font-lock-comment-face) 111 113 (fontified t face font-lock-comment-delimiter-face) 113 117 (fontified t face font-lock-comment-face) 117 119 (fontified t face font-lock-comment-face) 119 123 (fontified t face font-lock-comment-face) 123 124 (fontified t face font-lock-comment-face) 124 126 (fontified t face font-lock-comment-face) 126 132 (fontified t face font-lock-comment-face) 132 144 (fontified t face font-lock-comment-face) 144 148 (fontified t face font-lock-comment-face) 148 149 (syntax-table (15) fontified t face font-lock-comment-face) 149 167 (fontified t face font-lock-comment-face) 167 168 (syntax-table (15) fontified t face font-lock-comment-face) 168 173 (fontified t face font-lock-comment-face) 173 174 (fontified t) 174 176 (fontified t face font-lock-comment-delimiter-face) 176 191 (fontified t face font-lock-comment-face) 191 193 (fontified t face font-lock-comment-delimiter-face) 193 228 (fontified t face font-lock-comment-face) 228 229 (syntax-table (15) fontified t face font-lock-comment-face) 229 236 (fontified t face font-lock-comment-face) 236 237 (syntax-table (15) fontified t face font-lock-comment-face) 237 242 (fontified t face font-lock-comment-face) 242 246 (fontified t face font-lock-comment-face) 246 247 (syntax-table (15) fontified t face font-lock-comment-face) 247 257 (fontified t face font-lock-comment-face) 257 258 (syntax-table (15) fontified t face font-lock-comment-face) 258 289 (fontified t face font-lock-comment-face) 289 290 (fontified t) 290 292 (fontified t face font-lock-comment-delimiter-face) 292 309 (fontified t face font-lock-comment-face) 309 311 (fontified t face font-lock-comment-delimiter-face) 311 315 (fontified t face font-lock-comment-face) 315 346 (face font-lock-comment-face fontified t) 346 347 (syntax-table (15) face font-lock-comment-face fontified t) 347 360 (face font-lock-comment-face fontified t) 360 361 (syntax-table (15) face font-lock-comment-face fontified t) 361 370 (face font-lock-comment-face fontified t) 370 371 (syntax-table (15) face font-lock-comment-face fontified t) 371 381 (face font-lock-comment-face fontified t) 381 382 (syntax-table (15) face font-lock-comment-face fontified t) 382 421 (face font-lock-comment-face fontified t) 421 422 (syntax-table (15) face font-lock-comment-face fontified t) 422 426 (face font-lock-comment-face fontified t) 426 427 (syntax-table (15) face font-lock-comment-face fontified t) 427 436 (face font-lock-comment-face fontified t) 436 454 (face font-lock-comment-face fontified t) 454 455 (fontified t) 455 457 (fontified t face font-lock-comment-delimiter-face) 457 478 (fontified t face font-lock-comment-face) 478 480 (fontified t face font-lock-comment-delimiter-face) 480 515 (fontified t face font-lock-comment-face) 515 516 (syntax-table (15) fontified t face font-lock-comment-face) 516 536 (fontified t face font-lock-comment-face) 536 537 (syntax-table (15) fontified t face font-lock-comment-face) 537 553 (fontified t face font-lock-comment-face)) . -8548) (undo-tree-id302 . -87) (undo-tree-id303 . -87) (undo-tree-id304 . -454) (undo-tree-id305 . -454) (undo-tree-id306 . -455) (undo-tree-id307 . -455) (undo-tree-id308 . -24) (undo-tree-id309 . -24) (undo-tree-id310 . -86) (undo-tree-id311 . -86) (undo-tree-id312 . -309) (undo-tree-id313 . -309) (undo-tree-id314 . -191) (undo-tree-id315 . -191) (undo-tree-id316 . -289) (undo-tree-id317 . -289) (undo-tree-id318 . -290) (undo-tree-id319 . -290) (undo-tree-id320 . -553) (undo-tree-id321 . -553) (undo-tree-id322 . -553) (undo-tree-id323 . -478) (undo-tree-id324 . -478) (undo-tree-id325 . -111) (undo-tree-id326 . -111) (undo-tree-id327 . -173) (undo-tree-id328 . -173) (undo-tree-id329 . -174) (undo-tree-id330 . -174) (undo-tree-id331 . -553) (undo-tree-id332 . -553) 9101 (t 25280 17437 3367 628000)) nil (25280 17502 738579 434000) 0 nil])
([nil nil ((7965 . 7966) (t 25280 17502 755213 39000)) nil (25280 17712 168541 478000) 0 nil])
([nil nil ((8133 . 8137) (t 25280 17712 182280 355000)) nil (25280 17757 422427 916000) 0 nil])
([nil nil ((8143 . 8144)) nil (25280 17757 422423 497000) 0 nil])
([nil nil ((8187 . 8193) (8143 . 8144) (8185 . 8186) (t 25280 17757 458020 781000)) nil (25280 17781 89082 159000) 0 nil])
([nil nil ((nil fontified nil 8220 . 8221) (nil fontified nil 8218 . 8220) (nil fontified nil 8205 . 8218) (nil fontified nil 8198 . 8205) (nil fontified nil 8193 . 8198) (8193 . 8221)) nil (25280 17781 89077 240000) 0 nil])
([nil nil ((#("# IO.inspect(Jason.decode(msg) |> elem(1))" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 4 (fontified t face font-lock-comment-face) 4 12 (fontified t face font-lock-comment-face) 12 13 (fontified t face font-lock-comment-face) 13 18 (fontified t face font-lock-comment-face) 18 25 (fontified t face font-lock-comment-face) 25 38 (fontified t face font-lock-comment-face) 38 40 (fontified t face font-lock-comment-face) 40 41 (rear-nonsticky t fontified t face font-lock-comment-face) 41 42 (rear-nonsticky t fontified t face font-lock-comment-face)) . 8144) (undo-tree-id383 . -2) (t 25280 17781 125879 516000)) nil (25280 17858 629843 283000) 0 nil])
([nil nil ((#("# IO.inspect(Jason.decode(msg) |> elem(1))" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 4 (fontified t face font-lock-comment-face) 4 12 (fontified t face font-lock-comment-face) 12 13 (fontified t face font-lock-comment-face) 13 18 (fontified t face font-lock-comment-face) 18 25 (fontified t face font-lock-comment-face) 25 38 (fontified t face font-lock-comment-face) 38 40 (fontified t face font-lock-comment-face) 40 41 (rear-nonsticky t fontified t face font-lock-comment-face) 41 42 (fontified t face font-lock-comment-face)) . 7965) (undo-tree-id379 . -42) (undo-tree-id380 . -13) (undo-tree-id381 . -2) (undo-tree-id382 . -13)) nil (25280 17858 629838 784000) 0 nil])
([nil nil (("
" . -8492) (undo-tree-id339 . -1) (8070 . 8090) (#("    else nil
      
" 0 4 (fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 12 (fontified t face elixir-atom-face) 12 13 (fontified t) 13 19 (fontified t) 19 20 (fontified t)) . -8070) (undo-tree-id340 . -13) (undo-tree-id341 . -20) (undo-tree-id342 . -19) (undo-tree-id343 . -13) (undo-tree-id344 . -13) (undo-tree-id345 . -20) (undo-tree-id346 . -20) (undo-tree-id347 . -13) (undo-tree-id348 . -13) (undo-tree-id349 . -13) (undo-tree-id350 . -13) (undo-tree-id351 . -13) (undo-tree-id352 . -13) (#("     
" 0 5 (fontified t) 5 6 (fontified t)) . -7953) (undo-tree-id353 . -6) (undo-tree-id354 . -6) (undo-tree-id355 . -6) (undo-tree-id356 . -6) (undo-tree-id357 . -6) (undo-tree-id358 . -6) (undo-tree-id359 . -6) (undo-tree-id360 . -6) (undo-tree-id361 . -6) (undo-tree-id362 . -6) (undo-tree-id363 . -6) (undo-tree-id364 . -6) (undo-tree-id365 . -5) (undo-tree-id366 . -5) (undo-tree-id367 . -5) (undo-tree-id368 . -6) (undo-tree-id369 . -6) (undo-tree-id370 . -5) (7812 . 7831) (#("    else nil
      
" 0 4 (fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 12 (fontified t face elixir-atom-face) 12 13 (fontified t) 13 19 (fontified t) 19 20 (fontified t)) . -7812) (undo-tree-id371 . -9) (undo-tree-id372 . -9) (undo-tree-id373 . -12) (undo-tree-id374 . -20) (undo-tree-id375 . -20) (undo-tree-id376 . -13) (undo-tree-id377 . -13) (#("
    
" 0 1 (fontified t) 1 6 (fontified t)) . -5929) (undo-tree-id378 . -5)) nil (25280 17858 629824 55000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 8078) (#("
" 0 1 (fontified t)) . 8078) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1)) nil (25280 17858 629755 633000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 8078) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (#("l" 0 1 (fontified t)) . 8078) (#("i" 0 1 (fontified t)) . 8078) (#("n" 0 1 (fontified t)) . 8078) (#(" " 0 1 (fontified t)) . 8078) (#(" " 0 1 (fontified t)) . 8078) (#(" " 0 1 (fontified t)) . 8078) (#(" " 0 1 (fontified t)) . 8078) (#(" " 0 1 (fontified t)) . 8078)) nil (25280 18117 197992 105000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((8045 . 8052)) ((#("
      " 0 1 (fontified t) 1 7 (fontified t)) . 8045) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -7) (undo-tree-id420 . -7) (undo-tree-id421 . -7) (undo-tree-id422 . -1) (undo-tree-id423 . -7)) (25280 18118 661120 887000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((nil fontified nil 8079 . 8080) (8052 . 8080)) ((#("Jason.decode(msg) |> elem(1)" 0 5 (fontified nil face font-lock-type-face) 5 12 (fontified nil) 12 25 (fontified nil) 25 27 (fontified nil) 27 28 (rear-nonsticky t fontified nil)) . 8052) (undo-tree-id416 . -28) (nil fontified t 8079 . 8080)) (25280 18119 28906 7000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("Jason.decode(msg) |> elem(1)" 0 5 (fontified t face font-lock-type-face) 5 12 (fontified t) 12 25 (fontified t) 25 27 (fontified t) 27 28 (rear-nonsticky t fontified t)) . 8052) (undo-tree-id424 . -28) (undo-tree-id425 . -28) (undo-tree-id426 . 1) (undo-tree-id427 . -28) (undo-tree-id428 . 3) (undo-tree-id429 . -26) (undo-tree-id430 . -28) 8080 (t 25280 18129 109745 561000)) nil (25280 18174 727993 348000) 0 nil] [nil nil ((#("Jason.decode(msg) |> elem(1)" 0 5 (fontified t face font-lock-type-face) 5 12 (fontified t) 12 25 (fontified t) 25 27 (fontified t) 27 28 (rear-nonsticky t fontified t)) . 8052) (undo-tree-id415 . -28)) ((8052 . 8080)) (25280 18115 989545 996000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((8076 . 8083)) nil (25280 18174 727978 519000) 0 nil])
([nil nil ((7899 . 7904)) ((#("
    " 0 1 (fontified t) 1 5 (fontified t)) . 7899) (undo-tree-id403 . -5) (undo-tree-id404 . -1) (undo-tree-id405 . -1) (undo-tree-id406 . -5) (undo-tree-id407 . -5) (undo-tree-id408 . -5) (undo-tree-id409 . -5) (undo-tree-id410 . -1) (undo-tree-id411 . -5)) (25280 18111 56878 315000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((8083 . 8095)) nil (25280 18174 727976 926000) 0 nil])
([nil nil ((nil fontified nil 7931 . 7932) (7904 . 7932)) ((#("Jason.decode(msg) |> elem(1)" 0 5 (fontified nil face font-lock-type-face) 5 12 (fontified nil) 12 25 (fontified nil) 25 27 (fontified nil) 27 28 (rear-nonsticky t fontified nil)) . 7904) (nil fontified t 7931 . 7932)) (25280 18109 458974 567000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((nil fontified nil 8121 . 8122) (nil fontified nil 8119 . 8121) (nil fontified nil 8106 . 8119) (nil fontified nil 8099 . 8106) (nil fontified nil 8094 . 8099) (8094 . 8122)) nil (25280 18174 727972 77000) 0 nil])
([nil nil ((7904 . 7916) (t 25280 17987 868394 611000)) ((#("IO.inspect()" 0 2 (fontified t face font-lock-type-face) 2 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t)) . 7904) (undo-tree-id400 . -11) (undo-tree-id401 . -12) (undo-tree-id402 . -11)) (25280 18105 460942 610000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("I" 0 1 (fontified t face font-lock-type-face)) . -8083) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("O" 0 1 (fontified t face font-lock-type-face)) . -8084) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("." 0 1 (fontified t face font-lock-type-face)) . -8085) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("i" 0 1 (fontified t)) . -8086) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("n" 0 1 (fontified t)) . -8087) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("s" 0 1 (fontified t)) . -8088) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#("p" 0 1 (fontified t)) . -8089) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (#("e" 0 1 (fontified t)) . -8090) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (#("c" 0 1 (fontified t)) . -8091) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (#("t" 0 1 (fontified t)) . -8092) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("(" 0 1 (fontified t)) . -8093) (undo-tree-id454 . -1) (undo-tree-id455 . -1) 8094 (t 25280 18174 739178 397000)) nil (25280 18189 468213 994000) 0 nil])
([nil nil ((#("Jason.decode(msg) |> elem(1)" 0 5 (fontified t face font-lock-type-face) 5 12 (fontified t) 12 25 (fontified t) 25 27 (fontified t) 27 28 (rear-nonsticky t fontified t)) . 7916) (undo-tree-id390 . -28) (undo-tree-id391 . 1) (undo-tree-id392 . -28) (undo-tree-id393 . 3) (undo-tree-id394 . -26) (undo-tree-id395 . -28) (undo-tree-id396 . -28) 7944) ((7916 . 7944)) (25280 18104 859157 794000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#(")" 0 1 (fontified t)) . -8111) (undo-tree-id431 . -1) (undo-tree-id432 . 1) (undo-tree-id433 . -1) 8112) nil (25280 18189 468118 663000) 0 nil])
([nil nil ((nil fontified nil 7942 . 7943) (nil fontified nil 7940 . 7942) (nil fontified nil 7927 . 7940) (nil fontified nil 7920 . 7927) (nil fontified nil 7915 . 7920) (7915 . 7943)) ((#("Jason.decode(msg) |> elem(1)" 0 5 (fontified nil face font-lock-type-face) 5 12 (fontified nil) 12 25 (fontified nil) 25 27 (fontified nil) 27 28 (rear-nonsticky t fontified nil)) . 7915) (undo-tree-id397 . -28) (undo-tree-id398 . -28) (undo-tree-id399 . -28) (nil fontified t 7942 . 7943) (t 25280 18055 471142 153000)) (25280 18055 426566 850000) 0 (:visualizer [0 1 0 #<marker in no buffer>])])
([nil nil ((#("s" 0 1 (fontified t face font-lock-string-face)) . -7643) (undo-tree-id456 . -1) 7644 (t 25280 18189 507615 82000)) nil (25280 18538 738900 394000) 0 nil])
nil
([nil nil ((1955 . 1956) (t 25280 18538 742950 397000)) nil (25280 18802 736243 685000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-doc-face)) . -1957) (undo-tree-id464 . -1) 1958) nil (25280 18802 736240 980000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-doc-face)) . 2716) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2716) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2716) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2716) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2716) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2716) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2716) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2716) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2716) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2716) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2716)) nil (25280 18802 736231 492000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-doc-face)) . 2796) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2796) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2796) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2796) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2796) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2796) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2796) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2796) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2796) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2796) (#(" " 0 1 (fontified t face font-lock-doc-face)) . 2796)) nil (25280 18802 736222 716000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t face font-lock-doc-face)) . 2795)) nil (25280 18802 736216 544000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2919) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1)) nil (25280 18802 736213 669000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2982) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1)) nil (25280 18802 736205 2000) 0 nil])
([nil nil ((#("_" 0 1 (fontified t face font-lock-comment-face)) . -4122) (undo-tree-id457 . -1) 4123) nil (25280 18802 736191 978000) 0 nil])
([nil nil ((4122 . 4123) (t 25280 18802 749921 309000)) nil (25280 18815 372228 920000) 0 nil])
([nil nil ((4221 . 4226) (t 25280 18815 386027 363000)) nil (25280 18865 348919 893000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4330 . 4331) (nil fontified nil 4310 . 4331) (nil fontified nil 4297 . 4310) (nil fontified nil 4281 . 4297) (nil fontified nil 4273 . 4281) (nil fontified nil 4256 . 4273) (nil fontified nil 4251 . 4256) (nil fontified nil 4245 . 4251) (nil fontified nil 4241 . 4245) (nil fontified nil 4233 . 4241) (nil fontified nil 4232 . 4233) (nil fontified nil 4230 . 4232) (nil fontified nil 4227 . 4230) (nil fontified nil 4226 . 4227) (4226 . 4331)) nil (25280 18865 348915 976000) 0 nil])
([nil nil ((4223 . 4227) (#("    " 0 4 (fontified t)) . 4222) (undo-tree-id473 . -4) (undo-tree-id474 . -4) (4226 . 4227)) nil (25280 18865 348907 309000) 0 nil])
([nil nil ((4112 . 4113)) nil (25280 18865 348901 8000) 0 nil])
([nil nil ((4136 . 4137)) nil (25280 18865 348898 713000) 0 nil])
([nil nil ((#("{:ok, _response} =" 0 1 (fontified t) 1 4 (fontified t face elixir-atom-face) 4 6 (fontified t) 6 7 (fontified t face font-lock-comment-face) 7 15 (fontified t face font-lock-comment-face) 15 18 (fontified t)) . 4229) (undo-tree-id468 . 18) (undo-tree-id469 . -1) (undo-tree-id470 . 3) (undo-tree-id471 . -16) (undo-tree-id472 . -18)) nil (25280 18865 348894 826000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 4229) (#(" " 0 1 (fontified t)) . 4229) (#(" " 0 1 (fontified t)) . 4229) (#(" " 0 1 (fontified t)) . 4229) (#(" " 0 1 (fontified t)) . 4229) (#(" " 0 1 (fontified t)) . 4229) (#("
" 0 1 (fontified t)) . 4229) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1)) nil (25280 18865 348877 393000) 0 nil])
([nil nil ((#("#    {:ok, _response} =
#      Tesla.post(url, body, headers: get_headers(), recv_timeout: get_timeout(action))
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 5 (fontified t face font-lock-comment-delimiter-face) 5 6 (fontified t face font-lock-comment-face) 6 9 (fontified t face font-lock-comment-face) 9 11 (fontified t face font-lock-comment-face) 11 12 (fontified t face font-lock-comment-face) 12 20 (fontified t face font-lock-comment-face) 20 24 (fontified t face font-lock-comment-face) 24 25 (fontified t face font-lock-comment-delimiter-face) 25 31 (fontified t face font-lock-comment-delimiter-face) 31 36 (fontified t face font-lock-comment-face) 36 53 (fontified t face font-lock-comment-face) 53 61 (fontified t face font-lock-comment-face) 61 77 (fontified t face font-lock-comment-face) 77 90 (fontified t face font-lock-comment-face) 90 111 (fontified t face font-lock-comment-face) 111 112 (fontified t face font-lock-comment-face)) . -4112) (undo-tree-id482 . -112) (undo-tree-id483 . -112) (undo-tree-id484 . -112) (undo-tree-id485 . -24) (undo-tree-id486 . -24) (undo-tree-id487 . -112) (undo-tree-id488 . -5) (undo-tree-id489 . -112) (undo-tree-id490 . -112) (undo-tree-id491 . -112) 4224 (t 25280 18865 362420 848000)) nil (25280 18932 480407 163000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 4111) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1)) nil (25280 18932 480378 709000) 0 nil])
([nil current ((#("      
" 0 6 (fontified t) 6 7 (fontified t)) . 7995) (undo-tree-id492 . -7) (undo-tree-id493 . -7) (undo-tree-id494 . -6) (undo-tree-id495 . -6) (undo-tree-id496 . -7) (undo-tree-id497 . -6) (undo-tree-id498 . -7) (t 25280 18932 522889 622000)) nil (25280 18964 54380 264000) 0 nil])
nil
