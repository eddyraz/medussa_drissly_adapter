(undo-tree-save-format-version . 1)
"f7f2ee5bb19b3320e4820ba188ed99d4b506e793"
[nil nil nil nil (25247 49727 705961 614000) 0 nil]
([nil nil ((#("@moduledoc \"\"\"
  Documentation for `MedusaDrisslyAdapter`.
  \"\"\"

  @doc \"\"\"
  Hello world.

  ## Examples

      iex> MedusaDrisslyAdapter.hello()
      :world

  \"\"\"
  def hello do
    :world
  end
end
" 0 10 (face elixir-attribute-face fontified t) 10 11 (fontified t) 11 12 (face font-lock-doc-face syntax-table (15) fontified t) 12 63 (face font-lock-doc-face fontified t) 63 64 (face font-lock-doc-face syntax-table (15) fontified t) 64 68 (fontified t) 68 72 (face elixir-attribute-face fontified t) 72 73 (fontified t) 73 74 (face font-lock-doc-face syntax-table (15) fontified t) 74 166 (face font-lock-doc-face fontified t) 166 167 (face font-lock-doc-face syntax-table (15) fontified t) 167 170 (fontified t) 170 173 (face font-lock-keyword-face fontified t) 173 174 (fontified t) 174 179 (face font-lock-function-name-face fontified t) 179 180 (fontified t) 180 182 (face font-lock-keyword-face fontified t) 182 187 (fontified t) 187 193 (face elixir-atom-face fontified t) 193 196 (fontified t) 196 199 (face font-lock-keyword-face fontified t) 199 200 (fontified t) 200 203 (face font-lock-keyword-face fontified t) 203 204 (fontified t)) . -37) (undo-tree-id3 . -204) (undo-tree-id4 . -204) (undo-tree-id5 . -204) (undo-tree-id6 . -204) 241 (t 25247 49469 194440 991000)) nil (25247 49727 705958 58000) 0 nil])
([nil nil ((#("defmodule MedusaDrisslyAdapter do" 0 9 (face font-lock-keyword-face fontified t) 9 10 (fontified t) 10 30 (face font-lock-type-face fontified t) 30 31 (fontified t) 31 33 (face font-lock-keyword-face fontified t)) . 1)) nil (25247 49727 705947 659000) 0 nil])
([nil nil ((1 . 7478) (#("
  " 0 1 (fontified t) 1 3 (fontified t)) . 1) (undo-tree-id1 . -3) (undo-tree-id2 . -3)) nil (25247 49727 705944 132000) 0 nil])
([nil nil ((1 . 2) (t 25247 49658 695476 358000)) nil (25247 49727 705935 686000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -1) (undo-tree-id0 . -1) 2) nil (25247 49727 705926 459000) 0 nil])
([nil nil ((#("n" 0 1 (face elixir-atom-face fontified t)) . -2642) (undo-tree-id28 . -1) (#("u" 0 1 (face elixir-atom-face fontified t)) . -2643) (undo-tree-id29 . -1) (#("m" 0 1 (face elixir-atom-face fontified t)) . -2644) (undo-tree-id30 . -1) 2645 (t 25247 49727 742100 157000)) nil (25247 50224 132421 881000) 0 nil])
([nil nil ((2643 . 2648) (2642 . 2644)) nil (25247 50224 132418 334000) 0 nil])
([nil nil ((#("t" 0 1 (face elixir-atom-face fontified t)) . -2670) (undo-tree-id25 . -1) (#("o" 0 1 (face elixir-atom-face fontified t)) . -2671) (undo-tree-id26 . -1) (#("s" 0 1 (face elixir-atom-face fontified t)) . -2672) (undo-tree-id27 . -1) 2673) nil (25247 50224 132414 467000) 0 nil])
([nil nil ((2670 . 2680)) nil (25247 50224 132411 81000) 0 nil])
([nil nil ((#("a" 0 1 (face elixir-atom-face fontified t)) . -2703) (undo-tree-id24 . -1) 2704) nil (25247 50224 132409 408000) 0 nil])
([nil nil ((#("s" 0 1 (face elixir-atom-face fontified t)) . -2701) (undo-tree-id22 . -1) (#("p" 0 1 (face elixir-atom-face fontified t)) . -2702) (undo-tree-id23 . -1) 2703) nil (25247 50224 132406 202000) 0 nil])
([nil nil ((2701 . 2707)) nil (25247 50224 132403 76000) 0 nil])
([nil nil ((#("d" 0 1 (face elixir-atom-face fontified t)) . -2740) (undo-tree-id16 . -1) (#("_" 0 1 (face elixir-atom-face fontified t)) . -2741) (undo-tree-id17 . -1) (#("t" 0 1 (face elixir-atom-face fontified t)) . -2742) (undo-tree-id18 . -1) (#("e" 0 1 (face elixir-atom-face fontified t)) . -2743) (undo-tree-id19 . -1) (#("x" 0 1 (face elixir-atom-face fontified t)) . -2744) (undo-tree-id20 . -1) (#("t" 0 1 (face elixir-atom-face fontified t)) . -2745) (undo-tree-id21 . -1) 2746) nil (25247 50224 132399 439000) 0 nil])
([nil nil ((2740 . 2747)) nil (25247 50224 132387 697000) 0 nil])
([nil nil ((2771 . 2775)) nil (25247 50224 132386 244000) 0 nil])
([nil nil ((#("r" 0 1 (face elixir-atom-face fontified t)) . -2771) (undo-tree-id12 . -1) (#("e" 0 1 (face elixir-atom-face fontified t)) . -2772) (undo-tree-id13 . -1) (#("r" 0 1 (face elixir-atom-face fontified t)) . -2773) (undo-tree-id14 . -1) (#("e" 0 1 (face elixir-atom-face fontified t)) . -2774) (undo-tree-id15 . -1) 2775) nil (25247 50224 132383 850000) 0 nil])
([nil nil ((2771 . 2776)) nil (25247 50224 132379 522000) 0 nil])
([nil nil ((#("c" 0 1 (face elixir-atom-face fontified t)) . -2774) (undo-tree-id10 . -1) (#("n" 0 1 (face elixir-atom-face fontified t)) . -2775) (undo-tree-id11 . -1) 2776) nil (25247 50224 132378 159000) 0 nil])
([nil nil ((2774 . 2777)) nil (25247 50224 132375 534000) 0 nil])
([nil nil ((#("e" 0 1 (face elixir-atom-face fontified t)) . -2776) (undo-tree-id9 . -1) 2777) nil (25247 50224 132374 332000) 0 nil])
([nil nil ((#("m" 0 1 (face elixir-atom-face fontified t)) . -2774) (undo-tree-id7 . -1) (#("c" 0 1 (face elixir-atom-face fontified t)) . -2775) (undo-tree-id8 . -1) 2776) nil (25247 50224 132370 765000) 0 nil])
([nil nil ((2774 . 2777)) nil (25247 50224 132355 86000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . -2648) (undo-tree-id32 . -1) (undo-tree-id33 . 1) (undo-tree-id34 . -1) 2649 (t 25247 50224 141572 951000)) nil (25247 50234 917004 440000) 0 nil])
([nil nil ((#("[" 0 1 (fontified t)) . -2642) (undo-tree-id31 . -1) 2643) nil (25247 50234 916989 152000) 0 nil])
([nil nil ((6552 . 6557) (t 25247 50234 925546 358000)) nil (25248 50186 777921 744000) 0 nil])
([nil nil ((6557 . 6569)) nil (25248 50186 777919 791000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -6569) (6569 . 6570) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -6569) (6569 . 6570) (6568 . 6570) (#("\"" 0 1 (fontified nil syntax-table (15))) . -6568) (6568 . 6569)) nil (25248 50186 777916 975000) 0 nil])
([nil nil ((#("'" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -4351) (undo-tree-id2 . -1) (#("'" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -4352) (undo-tree-id3 . -1) 4353) nil (25248 50186 777911 776000) 0 nil])
([nil nil ((nil rear-nonsticky nil 4422 . 4423) (nil fontified nil 4407 . 4423) (nil fontified nil 4398 . 4407) (nil fontified nil 4370 . 4398) (nil fontified nil 4364 . 4370) (nil fontified nil 4351 . 4364) (4351 . 4423)) nil (25248 50186 777905 835000) 0 nil])
([nil nil ((4423 . 4427)) nil (25248 50186 777901 817000) 0 nil])
([nil nil ((#("," 0 1 (fontified t rear-nonsticky t)) . -4422) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 4423) nil (25248 50186 777898 611000) 0 nil])
([nil nil ((4424 . 4425) (#("}" 0 1 (fontified nil)) . -4424) (4424 . 4425)) nil (25248 50186 777875 759000) 0 nil])
([nil nil ((#("  " 0 2 (fontified t)) . -6585) (#("  " 0 2 (fontified nil)) . 6582) (6582 . 6584) (6582 . 6583) (t 25248 50186 787371 434000)) nil (25248 50230 674307 945000) 0 nil])
([nil nil ((6585 . 6606)) nil (25248 50230 674304 168000) 0 nil])
([nil nil ((6606 . 6609)) nil (25248 50230 674302 305000) 0 nil])
([nil nil ((6609 . 6611)) nil (25248 50230 674300 120000) 0 nil])
([nil nil ((6611 . 6616)) nil (25248 50230 674298 407000) 0 nil])
([nil nil ((6616 . 6619)) nil (25248 50230 674296 464000) 0 nil])
([nil nil ((6611 . 6616)) nil (25248 50230 674294 229000) 0 nil])
([nil nil ((6611 . 6616)) nil (25248 50230 674292 256000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6784 . 6785) (nil fontified nil 6780 . 6785) (nil fontified nil 6778 . 6780) (nil fontified nil 6772 . 6778) (nil fontified nil 6770 . 6772) (nil fontified nil 6765 . 6770) (nil fontified nil 6763 . 6765) (nil fontified nil 6755 . 6763) (nil fontified nil 6754 . 6755) (nil fontified nil 6747 . 6754) (nil fontified nil 6743 . 6747) (nil fontified nil 6742 . 6743) (nil fontified nil 6735 . 6742) (nil fontified nil 6734 . 6735) (nil fontified nil 6733 . 6734) (nil fontified nil 6730 . 6733) (nil fontified nil 6719 . 6730) (nil fontified nil 6710 . 6719) (nil fontified nil 6697 . 6710) (nil fontified nil 6695 . 6697) (nil fontified nil 6690 . 6695) (nil fontified nil 6688 . 6690) (nil fontified nil 6680 . 6688) (nil fontified nil 6679 . 6680) (nil fontified nil 6672 . 6679) (nil fontified nil 6670 . 6672) (nil fontified nil 6669 . 6670) (nil fontified nil 6657 . 6669) (nil fontified nil 6656 . 6657) (nil fontified nil 6648 . 6656) (nil fontified nil 6647 . 6648) (nil fontified nil 6643 . 6647) (nil fontified nil 6642 . 6643) (nil fontified nil 6640 . 6642) (nil fontified nil 6639 . 6640) (nil fontified nil 6629 . 6639) (nil fontified nil 6628 . 6629) (nil fontified nil 6616 . 6628) (6616 . 6785)) nil (25248 50230 674285 483000) 0 nil])
([nil nil ((#(" Authorization: \"Bearer \" <> @config[:headers][:auth][:token]" 0 1 (fontified t) 1 12 (fontified t face elixir-atom-face) 12 15 (fontified t face elixir-atom-face) 15 16 (fontified t) 16 17 (fontified t syntax-table (15) face font-lock-string-face) 17 24 (fontified t face font-lock-string-face) 24 25 (fontified t syntax-table (15) face font-lock-string-face) 25 29 (fontified t) 29 36 (fontified t face elixir-attribute-face) 36 37 (fontified t) 37 45 (fontified t face elixir-atom-face) 45 47 (fontified t) 47 52 (fontified t face elixir-atom-face) 52 54 (fontified t) 54 60 (fontified t face elixir-atom-face) 60 61 (fontified t)) . 6718) (undo-tree-id4 . -61)) nil (25248 50230 674265 446000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6713) (#(" " 0 1 (fontified t)) . 6713) (#(" " 0 1 (fontified t)) . 6713) (#(" " 0 1 (fontified t)) . 6713)) nil (25248 50230 674242 62000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 6713) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#(" " 0 1 (fontified t)) . 6713) (t 25248 50230 682885 270000)) nil (25248 50308 983472 20000) 0 nil])
([nil nil ((6734 . 6736) (#("  " 0 2 (fontified t)) . 6733) (undo-tree-id21 . -2) (6733 . 6736) (#("  " 0 2 (fontified nil)) . 6732) (6732 . 6734) (6732 . 6733) (t 25248 50308 982080 543000)) nil (25248 50454 697821 682000) 0 nil])
([nil nil ((6734 . 6736) (#("  " 0 2 (fontified nil)) . 6733) (6733 . 6735) (6733 . 6734)) nil (25248 50454 697815 200000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6798 . 6799) (nil fontified nil 6784 . 6799) (nil fontified nil 6776 . 6784) (nil fontified nil 6759 . 6776) (nil fontified nil 6754 . 6759) (nil fontified nil 6740 . 6754) (nil fontified nil 6737 . 6740) (nil fontified nil 6736 . 6737) (6736 . 6799)) nil (25248 50454 697811 153000) 0 nil])
([nil nil ((6858 . 6864)) nil (25248 50454 697805 422000) 0 nil])
([nil nil ((6859 . 6864)) nil (25248 50454 697803 649000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -6857) (undo-tree-id8 . -1) (#("/" 0 1 (fontified t face font-lock-string-face)) . -6858) (undo-tree-id9 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -6859) (undo-tree-id10 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -6860) (undo-tree-id11 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -6861) (undo-tree-id12 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -6862) (undo-tree-id13 . -1) (#("_" 0 1 (fontified t face font-lock-string-face)) . -6863) (undo-tree-id14 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -6864) (undo-tree-id15 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -6865) (undo-tree-id16 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -6866) (undo-tree-id17 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -6867) (undo-tree-id18 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -6868) (undo-tree-id19 . -1) (#("\"" 0 1 (fontified t syntax-table (15) face font-lock-string-face)) . -6869) (undo-tree-id20 . -1) 6870) nil (25248 50454 697796 626000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -6858) (6858 . 6859) (#("]" 0 1 (fontified nil)) . -6858) (6858 . 6859) (6857 . 6859)) nil (25248 50454 697755 339000) 0 nil])
([nil nil ((6857 . 6864)) nil (25248 50454 697751 852000) 0 nil])
([nil nil ((6865 . 6866)) nil (25248 50454 697750 159000) 0 nil])
([nil nil ((6866 . 6875)) nil (25248 50454 697748 476000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -6877) (6877 . 6878) (#("]" 0 1 (fontified nil)) . -6877) (6877 . 6878) (6876 . 6878)) nil (25248 50454 697745 480000) 0 nil])
([nil nil ((6877 . 6883)) nil (25248 50454 697741 833000) 0 nil])
([nil nil ((6884 . 6885)) nil (25248 50454 697740 170000) 0 nil])
([nil nil ((6885 . 6902)) nil (25248 50454 697738 177000) 0 nil])
([nil nil ((6885 . 6894)) nil (25248 50454 697736 463000) 0 nil])
([nil nil ((6885 . 6886)) nil (25248 50454 697734 770000) 0 nil])
([nil nil ((6841 . 6846)) nil (25248 50454 697733 7000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t face font-lock-variable-name-face)) . 6923)) nil (25248 50454 697731 33000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . 6923) (#("r" 0 1 (fontified t)) . 6923) (#("c" 0 1 (fontified t)) . 6923) (#("_" 0 1 (fontified t face font-lock-comment-face)) . 6923) (#("r" 0 1 (fontified t)) . 6923) (#("e" 0 1 (fontified t)) . 6923) (#("s" 0 1 (fontified t)) . 6923) (#("u" 0 1 (fontified t)) . 6923) (#(":" 0 1 (fontified t face elixir-atom-face)) . 6923) (#(" " 0 1 (fontified t)) . 6923) (#("=" 0 1 (fontified t)) . 6923) (#(" " 0 1 (fontified t)) . 6923) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . 6923) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . 6923) (#("k" 0 1 (fontified t face font-lock-variable-name-face)) . 6923) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . 6923) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . 6923) (#("_" 0 1 (fontified t face font-lock-comment-face)) . 6923) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . 6923) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . 6923) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . 6923)) nil (25248 50454 697723 68000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . 6923)) nil (25248 50454 697712 719000) 0 nil])
([nil nil ((6853 . 6856) (#("}" 0 1 (fontified nil)) . -6852) (6852 . 6853) (#("}" 0 1 (fontified nil)) . -6852) (6852 . 6853) (6851 . 6853)) nil (25248 50454 697708 752000) 0 nil])
([nil nil ((6852 . 6855)) nil (25248 50454 697703 782000) 0 nil])
([nil nil ((6855 . 6864)) nil (25248 50454 697696 358000) 0 nil])
([nil nil ((#("p" 0 1 (fontified t face font-lock-keyword-face)) . -6808) (undo-tree-id28 . -1) 6809 (t 25248 50454 708762 341000)) nil (25248 50542 11574 346000) 0 nil])
([nil nil ((6845 . 6855)) nil (25248 50542 11569 888000) 0 nil])
([nil nil ((6855 . 6856)) nil (25248 50542 11567 984000) 0 nil])
([nil nil ((#("g" 0 1 (fontified t)) . -6852) (undo-tree-id24 . -1) (#("e" 0 1 (fontified t)) . -6853) (undo-tree-id25 . -1) (#("t" 0 1 (fontified t)) . -6854) (undo-tree-id26 . -1) (#("_" 0 1 (fontified t)) . -6855) (undo-tree-id27 . -1) 6856) nil (25248 50542 11563 917000) 0 nil])
([nil nil ((3605 . 3607)) nil (25248 50542 11549 660000) 0 nil])
([nil nil ((#("O" 0 1 (fontified t face font-lock-type-face)) . -3605) (undo-tree-id22 . -1) (#("A" 0 1 (fontified t face font-lock-type-face)) . -3606) (undo-tree-id23 . -1) 3607) nil (25248 50542 11541 685000) 0 nil])
([nil nil ((#("  {:ok, response} = Tesla.post(url, body, headers: get_headers())" 0 2 (fontified t) 2 3 (fontified t) 3 6 (fontified t face elixir-atom-face) 6 20 (fontified t) 20 25 (fontified t face font-lock-type-face) 25 42 (fontified t) 42 50 (fontified t face elixir-atom-face) 50 64 (fontified t) 64 65 (rear-nonsticky t fontified t)) . 6734) (undo-tree-id31 . -2) (t 25248 50542 24063 868000)) nil (25248 50649 206127 448000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t face font-lock-variable-name-face)) . 6780) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . 6780) (#("b" 0 1 (fontified t face font-lock-variable-name-face)) . 6780)) nil (25248 50649 206122 608000) 0 nil])
([nil nil ((#("=" 0 1 (fontified t)) . 6780) (#(" " 0 1 (fontified t)) . 6780) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . 6780)) nil (25248 50649 206119 142000) 0 nil])
([nil nil ((6777 . 6781) (#("    " 0 4 (fontified t)) . 6776) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (6775 . 6781)) nil (25248 50649 206115 535000) 0 nil])
([nil nil ((6781 . 6788)) nil (25248 50649 206098 882000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6872 . 6873) (nil fontified nil 6872 . 6873) (nil fontified nil 6870 . 6872) (nil fontified nil 6869 . 6870) (nil fontified nil 6868 . 6869) (nil fontified nil 6867 . 6868) (nil fontified nil 6852 . 6867) (nil fontified nil 6843 . 6852) (nil fontified nil 6833 . 6843) (nil fontified nil 6815 . 6833) (nil fontified nil 6809 . 6815) (nil fontified nil 6796 . 6809) (nil fontified nil 6788 . 6796) (6788 . 6873)) nil (25248 50649 206095 185000) 0 nil])
([nil nil ((6870 . 6878)) nil (25248 50649 206087 581000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6894) (6894 . 6895) (#(")" 0 1 (fontified nil)) . -6894) (6894 . 6895) (6878 . 6895)) nil (25248 50649 206083 693000) 0 nil])
([nil nil ((6894 . 6895)) nil (25248 50649 206078 884000) 0 nil])
([nil nil ((6888 . 6889)) nil (25248 50649 206071 901000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 6788) (#(" " 0 1 (fontified t)) . 6788) (#(" " 0 1 (fontified t)) . 6788) (#(" " 0 1 (fontified t)) . 6788) (#(" " 0 1 (fontified t)) . 6788) (#(" " 0 1 (fontified t)) . 6788) (#(" " 0 1 (fontified t)) . 6788) (#(" " 0 1 (fontified t)) . 6788) (t 25248 50649 215979 2000)) nil (25248 50656 163382 348000) 0 nil])
([nil nil ((6800 . 6801)) nil (25248 50656 163371 578000) 0 nil])
([nil nil ((6960 . 6964) (t 25248 50656 164328 945000)) nil (25248 50670 349898 607000) 0 nil])
([nil nil ((6944 . 7040) (#("    body = %{
           email: get_user_name(),
          password: get_password()
	} |> Jaxon.decode |> elem(1)  

     
    {:ok,response} = Tesla.post(@config[:endpoints][:login],body,headers: get_login_headers)
    
" 0 4 (fontified t) 4 8 (fontified t face font-lock-variable-name-face) 8 11 (fontified t) 11 14 (fontified t) 14 25 (fontified t) 25 31 (fontified t face elixir-atom-face) 31 49 (fontified t) 49 59 (fontified t) 59 68 (fontified t face elixir-atom-face) 68 83 (fontified t) 83 84 (fontified t) 84 85 (fontified t) 85 90 (fontified t) 90 95 (fontified t face font-lock-type-face) 95 110 (fontified t) 110 112 (fontified t) 112 113 (fontified t) 113 115 (fontified t) 115 116 (rear-nonsticky t fontified t) 116 117 (fontified t) 117 121 (fontified t) 121 122 (fontified t) 122 123 (fontified t) 123 127 (fontified t) 127 128 (fontified t) 128 131 (fontified t face elixir-atom-face) 131 140 (fontified t) 140 144 (fontified t) 144 149 (fontified t face font-lock-type-face) 149 154 (fontified t) 154 155 (fontified t) 155 162 (fontified t face elixir-attribute-face) 162 163 (fontified t) 163 173 (fontified t face elixir-atom-face) 173 174 (fontified t) 174 175 (fontified t) 175 181 (fontified t face elixir-atom-face) 181 188 (fontified t) 188 196 (fontified t face elixir-atom-face) 196 214 (fontified t) 214 215 (fontified t) 215 216 (fontified t) 216 220 (fontified t) 220 221 (fontified t)) . -6944) (undo-tree-id42 . -116) (undo-tree-id43 . -116) (undo-tree-id44 . -117) (undo-tree-id45 . -117) (undo-tree-id46 . -11) (undo-tree-id47 . -164) (undo-tree-id48 . -164) (undo-tree-id49 . -123) (undo-tree-id50 . -216) (undo-tree-id51 . -216) (undo-tree-id52 . -216) (undo-tree-id53 . -123) (undo-tree-id54 . -123) (undo-tree-id55 . -84) (undo-tree-id56 . -84) (undo-tree-id57 . -49) (undo-tree-id58 . -49) (undo-tree-id59 . -14) (undo-tree-id60 . -14) (undo-tree-id61 . -221) (undo-tree-id62 . -221) (undo-tree-id63 . -123) (undo-tree-id64 . -187) (undo-tree-id65 . -187) (undo-tree-id66 . -187) (undo-tree-id67 . -187) (undo-tree-id68 . -187) (6809 . 6943) (#("  
" 0 2 (fontified t) 2 3 (fontified t)) . -6771) (undo-tree-id69 . -3) (undo-tree-id70 . -3) (6764 . 6770) (#("    
    end


" 0 4 (fontified t) 4 5 (fontified t) 5 9 (fontified t) 9 12 (fontified t face font-lock-keyword-face) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t)) . -6764) (undo-tree-id71 . -5) (undo-tree-id72 . -5) (undo-tree-id73 . -15) (undo-tree-id74 . -13) (undo-tree-id75 . -13) (undo-tree-id76 . -14) (undo-tree-id77 . -14) (undo-tree-id78 . -15) (undo-tree-id79 . -15) (undo-tree-id80 . -5) (undo-tree-id81 . -5) (6696 . 6758) (#("      \"Content-Type\": @config[:headers][:auth][:content_type],
" 0 6 (fontified t) 6 7 (fontified t syntax-table (15) face font-lock-string-face) 7 19 (fontified t face font-lock-string-face) 19 20 (fontified t syntax-table (15) face font-lock-string-face) 20 22 (fontified t) 22 29 (fontified t face elixir-attribute-face) 29 30 (fontified t) 30 38 (fontified t face elixir-atom-face) 38 40 (fontified t) 40 45 (fontified t face elixir-atom-face) 45 47 (fontified t) 47 60 (fontified t face elixir-atom-face) 60 63 (fontified t)) . -6696) (6632 . 6668) (#("  defp get_login_headers()do
        [
" 0 2 (fontified t) 2 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t) 7 12 (face font-lock-function-name-face fontified t) 12 24 (fontified t face font-lock-function-name-face) 24 26 (fontified t) 26 28 (fontified t face font-lock-keyword-face) 28 29 (fontified t) 29 33 (fontified t) 33 39 (fontified t)) . -6632) (undo-tree-id82 . -33) (6625 . 6631) (#("    end
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t)) . -6625) (5313 . 6430) (#("#     status_code = get_status_code(response)
#     message = get_message(response)
#     error_message = get_error(response)

#        case status_code do
#                400 ->
#                Logger.error(\"#{ops_id}, #{get_time()} Drissly Response: #{response.body}\")
 #               {:error, \"Drissly: Bad Request\"}
#              401 ->
#                Logger.error(\"#{get_time()} Drissly Response: #{response.body}\")
#              403 ->
#                log :error, ops_id, \"#{get_time()} Drissly Response: #{response.body}\"
#                {:error, \"Drissly: Access Forbidden\"}
#              500 ->
#                log :error, ops_id, \"#{get_time()} Drissly Response: #{response.body}\"
#                {:error, \"Drissly: Internal Server Error\"}
    
#              502 ->
#     	    Logger.error(\"#{ops_id} #{get_time()} Drissly Response: #{response.body} error, #{error_me#ssage}\")
#              _ ->
 #           Logger.error(\"#{error_message}, #{ops_id}, #{get_time()} Drissly Response: #{response.body}\")
                
#    end
end 
	
  
" 0 6 (fontified t face font-lock-comment-delimiter-face) 6 46 (fontified t face font-lock-comment-face) 46 52 (fontified t face font-lock-comment-delimiter-face) 52 84 (fontified t face font-lock-comment-face) 84 90 (fontified t face font-lock-comment-delimiter-face) 90 126 (fontified t face font-lock-comment-face) 126 127 (fontified t) 127 136 (fontified t face font-lock-comment-delimiter-face) 136 137 (fontified t face font-lock-comment-face) 137 156 (fontified t face font-lock-comment-face) 156 173 (fontified t face font-lock-comment-delimiter-face) 173 180 (fontified t face font-lock-comment-face) 180 197 (fontified t face font-lock-comment-delimiter-face) 197 210 (fontified t face font-lock-comment-face) 210 211 (syntax-table (15) fontified t face font-lock-comment-face) 211 212 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 212 222 (fontified t face font-lock-comment-face) 222 223 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 223 254 (fontified t face font-lock-comment-face) 254 255 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 255 270 (fontified t face font-lock-comment-face) 270 271 (syntax-table (15) fontified t face font-lock-comment-face) 271 273 (fontified t face font-lock-comment-face) 273 274 (fontified t) 274 290 (fontified t face font-lock-comment-delimiter-face) 290 299 (fontified t face font-lock-comment-face) 299 300 (syntax-table (15) fontified t face font-lock-comment-face) 300 320 (fontified t face font-lock-comment-face) 320 321 (syntax-table (15) fontified t face font-lock-comment-face) 321 323 (fontified t face font-lock-comment-face) 323 338 (fontified t face font-lock-comment-delimiter-face) 338 345 (fontified t face font-lock-comment-face) 345 362 (fontified t face font-lock-comment-delimiter-face) 362 375 (fontified t face font-lock-comment-face) 375 376 (syntax-table (15) face font-lock-comment-face fontified t) 376 377 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) face font-lock-comment-face fontified t) 377 408 (face font-lock-comment-face fontified t) 408 409 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) face font-lock-comment-face fontified t) 409 424 (face font-lock-comment-face fontified t) 424 425 (syntax-table (15) face font-lock-comment-face fontified t) 425 427 (face font-lock-comment-face fontified t) 427 442 (fontified t face font-lock-comment-delimiter-face) 442 449 (fontified t face font-lock-comment-face) 449 466 (fontified t face font-lock-comment-delimiter-face) 466 486 (fontified t face font-lock-comment-face) 486 487 (syntax-table (15) fontified t face font-lock-comment-face) 487 488 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 488 500 (fontified t face font-lock-comment-face) 500 519 (fontified t face font-lock-comment-face) 519 520 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 520 535 (fontified t face font-lock-comment-face) 535 536 (syntax-table (15) fontified t face font-lock-comment-face) 536 537 (fontified t face font-lock-comment-face) 537 554 (fontified t face font-lock-comment-delimiter-face) 554 563 (fontified t face font-lock-comment-face) 563 564 (syntax-table (15) fontified t face font-lock-comment-face) 564 589 (fontified t face font-lock-comment-face) 589 590 (syntax-table (15) fontified t face font-lock-comment-face) 590 592 (fontified t face font-lock-comment-face) 592 607 (fontified t face font-lock-comment-delimiter-face) 607 614 (fontified t face font-lock-comment-face) 614 631 (fontified t face font-lock-comment-delimiter-face) 631 651 (fontified t face font-lock-comment-face) 651 652 (syntax-table (15) fontified t face font-lock-comment-face) 652 653 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 653 656 (fontified t face font-lock-comment-face) 656 684 (fontified t face font-lock-comment-face) 684 685 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 685 700 (fontified t face font-lock-comment-face) 700 701 (syntax-table (15) fontified t face font-lock-comment-face) 701 702 (fontified t face font-lock-comment-face) 702 719 (fontified t face font-lock-comment-delimiter-face) 719 728 (fontified t face font-lock-comment-face) 728 729 (syntax-table (15) fontified t face font-lock-comment-face) 729 759 (fontified t face font-lock-comment-face) 759 760 (syntax-table (15) fontified t face font-lock-comment-face) 760 762 (fontified t face font-lock-comment-face) 762 767 (fontified t) 767 782 (fontified t face font-lock-comment-delimiter-face) 782 789 (fontified t face font-lock-comment-face) 789 795 (fontified t face font-lock-comment-delimiter-face) 795 813 (fontified t face font-lock-comment-face) 813 814 (syntax-table (15) fontified t face font-lock-comment-face) 814 815 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 815 824 (fontified t face font-lock-comment-face) 824 825 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 825 856 (fontified t face font-lock-comment-face) 856 857 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 857 880 (fontified t face font-lock-comment-face) 880 881 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 881 897 (fontified t face font-lock-comment-face) 897 898 (syntax-table (15) fontified t face font-lock-comment-face) 898 900 (fontified t face font-lock-comment-face) 900 915 (fontified t face font-lock-comment-delimiter-face) 915 920 (fontified t face font-lock-comment-face) 920 921 (fontified t) 921 933 (fontified t face font-lock-comment-delimiter-face) 933 946 (fontified t face font-lock-comment-face) 946 947 (syntax-table (15) fontified t face font-lock-comment-face) 947 948 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 948 965 (fontified t face font-lock-comment-face) 965 966 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 966 976 (fontified t face font-lock-comment-face) 976 977 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 977 1008 (fontified t face font-lock-comment-face) 1008 1009 (elixir-interpolation (nil #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex> #<marker at 5284 in medusa_drissly_adapter.ex>) syntax-table (2) fontified t face font-lock-comment-face) 1009 1024 (fontified t face font-lock-comment-face) 1024 1025 (syntax-table (15) fontified t face font-lock-comment-face) 1025 1027 (fontified t face font-lock-comment-face) 1027 1044 (fontified t) 1044 1049 (fontified t face font-lock-comment-delimiter-face) 1049 1053 (fontified t face font-lock-comment-face) 1053 1056 (fontified t face font-lock-keyword-face) 1056 1057 (fontified t) 1057 1063 (fontified t)) . -5313) (undo-tree-id83 . -1060) (undo-tree-id84 . -211) (undo-tree-id85 . -220) (undo-tree-id86 . -211) (undo-tree-id87 . -220) (undo-tree-id88 . -222) (undo-tree-id89 . -235) (undo-tree-id90 . -222) (undo-tree-id91 . -235) (undo-tree-id92 . -254) (undo-tree-id93 . -270) (undo-tree-id94 . -254) (undo-tree-id95 . -270) (undo-tree-id96 . -376) (undo-tree-id97 . -389) (undo-tree-id98 . -376) (undo-tree-id99 . -389) (undo-tree-id100 . -408) (undo-tree-id101 . -424) (undo-tree-id102 . -408) (undo-tree-id103 . -424) (undo-tree-id104 . -487) (undo-tree-id105 . -500) (undo-tree-id106 . -487) (undo-tree-id107 . -500) (undo-tree-id108 . -519) (undo-tree-id109 . -535) (undo-tree-id110 . -519) (undo-tree-id111 . -535) (undo-tree-id112 . -652) (undo-tree-id113 . -665) (undo-tree-id114 . -652) (undo-tree-id115 . -665) (undo-tree-id116 . -684) (undo-tree-id117 . -700) (undo-tree-id118 . -684) (undo-tree-id119 . -700) (undo-tree-id120 . -814) (undo-tree-id121 . -823) (undo-tree-id122 . -814) (undo-tree-id123 . -823) (undo-tree-id124 . -824) (undo-tree-id125 . -837) (undo-tree-id126 . -824) (undo-tree-id127 . -837) (undo-tree-id128 . -856) (undo-tree-id129 . -872) (undo-tree-id130 . -856) (undo-tree-id131 . -872) (undo-tree-id132 . -880) (undo-tree-id133 . -897) (undo-tree-id134 . -880) (undo-tree-id135 . -897) (undo-tree-id136 . -947) (undo-tree-id137 . -963) (undo-tree-id138 . -947) (undo-tree-id139 . -963) (undo-tree-id140 . -965) (undo-tree-id141 . -974) (undo-tree-id142 . -965) (undo-tree-id143 . -974) (undo-tree-id144 . -976) (undo-tree-id145 . -989) (undo-tree-id146 . -976) (undo-tree-id147 . -989) (undo-tree-id148 . -1008) (undo-tree-id149 . -1024) (undo-tree-id150 . -1008) (undo-tree-id151 . -1024) (5245 . 5312) (#("     response = Jaxon.decode(elem(raw_response,1).body) |> elem(1)
" 0 5 (fontified t) 5 13 (fontified t face font-lock-variable-name-face) 13 16 (fontified t) 16 21 (fontified t face font-lock-type-face) 21 67 (fontified t)) . -5245) (4415 . 4425) (#("	}  
" 0 1 (fontified t) 1 2 (fontified t) 2 4 (fontified t) 4 5 (fontified t)) . -4415) (4293 . 4305) (#("        ''	
	
" 0 8 (fontified t) 8 9 (syntax-table (15) fontified t face font-lock-string-face) 9 10 (syntax-table (15) fontified t face font-lock-string-face) 10 14 (fontified t)) . -4293) (#("
" 0 1 (fontified t)) . -4276) (#("    
" 0 5 (fontified t)) . -3772) (t 25248 50670 361030 183000)) nil (25248 50723 450592 465000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t)) . -6794) (undo-tree-id32 . -1) (#("u" 0 1 (fontified t face elixir-atom-face)) . -6795) (undo-tree-id33 . -1) (#("s" 0 1 (fontified t face elixir-atom-face)) . -6796) (undo-tree-id34 . -1) (#("e" 0 1 (fontified t face elixir-atom-face)) . -6797) (undo-tree-id35 . -1) (#("r" 0 1 (fontified t face elixir-atom-face)) . -6798) (undo-tree-id36 . -1) (#("_" 0 1 (fontified t face elixir-atom-face)) . -6799) (undo-tree-id37 . -1) (#("c" 0 1 (fontified t face elixir-atom-face)) . -6800) (undo-tree-id38 . -1) (#("r" 0 1 (fontified t face elixir-atom-face)) . -6801) (undo-tree-id39 . -1) (#("e" 0 1 (fontified t face elixir-atom-face)) . -6802) (undo-tree-id40 . -1) (#("d" 0 1 (fontified t face elixir-atom-face)) . -6803) (undo-tree-id41 . -1) 6804) nil (25248 50723 450308 941000) 0 nil])
([nil nil ((#("x" 0 1 (fontified t face font-lock-type-face)) . -6903) (undo-tree-id158 . -1) 6904 (t 25248 50723 451496 635000)) nil (25248 50753 160874 651000) 0 nil])
([nil nil ((6903 . 6904)) nil (25248 50753 160872 767000) 0 nil])
([nil nil ((#("d" 0 1 (fontified t)) . -6907) (undo-tree-id152 . -1) (#("e" 0 1 (fontified t)) . -6908) (undo-tree-id153 . -1) (#("c" 0 1 (fontified t)) . -6909) (undo-tree-id154 . -1) (#("o" 0 1 (fontified t)) . -6910) (undo-tree-id155 . -1) (#("d" 0 1 (fontified t)) . -6911) (undo-tree-id156 . -1) (#("e" 0 1 (fontified t)) . -6912) (undo-tree-id157 . -1) 6913) nil (25248 50753 160870 212000) 0 nil])
([nil nil ((6907 . 6913)) nil (25248 50753 160853 200000) 0 nil])
([nil nil ((6934 . 6938) (#("    " 0 4 (fontified nil)) . 6933) (6933 . 6937) (6933 . 6934) (t 25248 50753 172776 539000)) nil (25248 50824 768064 476000) 0 nil])
([nil nil ((6938 . 6946)) nil (25248 50824 768061 89000) 0 nil])
([nil nil ((nil rear-nonsticky nil 6972 . 6973) (nil fontified nil 6972 . 6973) (nil fontified nil 6966 . 6972) (nil fontified nil 6964 . 6966) (nil fontified nil 6954 . 6964) (nil fontified nil 6953 . 6954) (nil fontified nil 6946 . 6953) (6946 . 6973)) nil (25248 50824 768058 374000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -6954) (6954 . 6955) (#("]" 0 1 (fontified nil)) . -6954) (6954 . 6955) (6946 . 6955)) nil (25248 50824 768052 884000) 0 nil])
([nil nil ((6954 . 6961)) nil (25248 50824 768049 497000) 0 nil])
([nil nil ((6961 . 6964)) nil (25248 50824 768047 754000) 0 nil])
([nil nil ((#("]" 0 1 (fontified nil)) . -6966) (6966 . 6967) (#("]" 0 1 (fontified nil)) . -6966) (6966 . 6967) (6965 . 6967)) nil (25248 50824 768045 149000) 0 nil])
([nil nil ((6966 . 6974)) nil (25248 50824 768041 482000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t face elixir-atom-face)) . -6970) (undo-tree-id159 . -1) (#(" " 0 1 (fontified t)) . -6971) (undo-tree-id160 . -1) (#("<" 0 1 (fontified t)) . -6972) (undo-tree-id161 . -1) (#(">" 0 1 (fontified t)) . -6973) (undo-tree-id162 . -1) 6974) nil (25248 50824 768036 362000) 0 nil])
([nil nil ((6970 . 6971)) nil (25248 50824 768010 973000) 0 nil])
([nil nil ((6972 . 6976)) nil (25248 50824 768003 349000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face elixir-atom-face)) . 7037) (#("[" 0 1 (fontified t)) . 7037) (#("]" 0 1 (fontified t)) . 7037) (#("s" 0 1 (fontified t)) . 7037) (#("t" 0 1 (fontified t)) . 7037) (#("n" 0 1 (fontified t)) . 7037) (#("i" 0 1 (fontified t)) . 7037) (#("o" 0 1 (fontified t)) . 7037) (#("p" 0 1 (fontified t)) . 7037) (#("d" 0 1 (fontified t)) . 7037) (#("n" 0 1 (fontified t)) . 7037) (#("e" 0 1 (fontified t)) . 7037) (#(":" 0 1 (fontified t face elixir-atom-face)) . 7037) (#("[" 0 1 (fontified t)) . 7037) (#("g" 0 1 (fontified t)) . 7037) (#("i" 0 1 (fontified t)) . 7037) (#("f" 0 1 (fontified t)) . 7037) (#("n" 0 1 (fontified t)) . 7037) (#("o" 0 1 (fontified t)) . 7037) (#("c" 0 1 (fontified t)) . 7037) (#("@" 0 1 (fontified t face elixir-attribute-face)) . 7037) (t 25248 50824 771590 856000)) nil (25248 51505 797700 163000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . 7037) (#("n" 0 1 (fontified t)) . 7037) (#("i" 0 1 (fontified t face font-lock-keyword-face)) . 7037) (#("g" 0 1 (fontified t)) . 7037) (#("o" 0 1 (fontified t)) . 7037) (#("l" 0 1 (fontified t)) . 7037)) nil (25248 51505 797686 137000) 0 nil])
([nil nil ((7037 . 7040)) nil (25248 51505 797676 729000) 0 nil])
([nil nil ((7075 . 7080) (t 25248 51505 834355 86000)) nil (25248 51532 35085 403000) 0 nil])
([nil nil ((7080 . 7093)) nil (25248 51532 35076 676000) 0 nil])
([nil nil ((7095 . 7096) (#("}" 0 1 (fontified nil)) . -7095) (7093 . 7096) (t 25248 51532 74661 598000)) nil (25248 51552 501999 545000) 0 nil])
([nil nil ((#("}" 0 1 (fontified t)) . -7095) (undo-tree-id166 . -1) (undo-tree-id167 . 1) (undo-tree-id168 . -1) 7096) nil (25248 51552 501998 52000) 0 nil])
([nil nil ((7095 . 7106)) nil (25248 51552 501995 97000) 0 nil])
([nil nil ((#("c" 0 1 (fontified t)) . -7104) (undo-tree-id164 . -1) (#("n" 0 1 (fontified t)) . -7105) (undo-tree-id165 . -1) 7106) nil (25248 51552 501993 724000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7110) (7110 . 7111) (#(")" 0 1 (fontified nil)) . -7110) (7110 . 7111) (7104 . 7111)) nil (25248 51552 501990 578000) 0 nil])
([nil nil ((#("A" 0 1 (fontified t face font-lock-type-face)) . -7098) (undo-tree-id163 . -1) 7099) nil (25248 51552 501988 204000) 0 nil])
([nil nil ((7098 . 7099)) nil (25248 51552 501974 809000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t)) . -7103) (undo-tree-id169 . -1) (#("n" 0 1 (fontified t)) . -7104) (undo-tree-id170 . -1) (#("c" 0 1 (fontified t)) . -7105) (undo-tree-id171 . -1) (#("o" 0 1 (fontified t)) . -7106) (undo-tree-id172 . -1) (#("d" 0 1 (fontified t)) . -7107) (undo-tree-id173 . -1) (#("e" 0 1 (fontified t)) . -7108) (undo-tree-id174 . -1) 7109 (t 25248 51552 510892 357000)) nil (25248 51583 85388 759000) 0 nil])
([nil nil ((7103 . 7109)) nil (25248 51583 85353 803000) 0 nil])
([nil nil ((7111 . 7112) (t 25248 51583 99225 373000)) nil (25248 51637 212073 987000) 0 nil])
([nil nil ((7111 . 7116)) nil (25248 51637 212073 155000) 0 nil])
([nil nil ((#("." 0 1 (fontified t)) . -7111) (undo-tree-id194 . -1) (#("e" 0 1 (fontified t)) . -7112) (undo-tree-id195 . -1) (#("l" 0 1 (fontified t)) . -7113) (undo-tree-id196 . -1) (#("e" 0 1 (fontified t)) . -7114) (undo-tree-id197 . -1) (#("m" 0 1 (fontified t)) . -7115) (undo-tree-id198 . -1) 7116) nil (25248 51637 212071 112000) 0 nil])
([nil nil ((7080 . 7092)) nil (25248 51637 212066 132000) 0 nil])
([nil nil ((7125 . 7128) (7123 . 7124)) nil (25248 51637 212065 361000) 0 nil])
([nil nil ((7128 . 7143)) nil (25248 51637 212064 539000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7079) (undo-tree-id184 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -7080) (undo-tree-id185 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -7081) (undo-tree-id186 . -1) (#("w" 0 1 (fontified t face font-lock-variable-name-face)) . -7082) (undo-tree-id187 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -7083) (undo-tree-id188 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -7084) (undo-tree-id189 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -7085) (undo-tree-id190 . -1) (#("k" 0 1 (fontified t face font-lock-variable-name-face)) . -7086) (undo-tree-id191 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -7087) (undo-tree-id192 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -7088) (undo-tree-id193 . -1) 7089) nil (25248 51637 212061 714000) 0 nil])
([nil nil ((7079 . 7085)) nil (25248 51637 212052 607000) 0 nil])
([nil nil ((7085 . 7094)) nil (25248 51637 212051 885000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -7133) (undo-tree-id175 . -1) (#("e" 0 1 (fontified t)) . -7134) (undo-tree-id176 . -1) (#("w" 0 1 (fontified t)) . -7135) (undo-tree-id177 . -1) (#("_" 0 1 (fontified t)) . -7136) (undo-tree-id178 . -1) (#("t" 0 1 (fontified t)) . -7137) (undo-tree-id179 . -1) (#("o" 0 1 (fontified t)) . -7138) (undo-tree-id180 . -1) (#("k" 0 1 (fontified t)) . -7139) (undo-tree-id181 . -1) (#("e" 0 1 (fontified t)) . -7140) (undo-tree-id182 . -1) (#("n" 0 1 (fontified t)) . -7141) (undo-tree-id183 . -1) 7142) nil (25248 51637 212048 970000) 0 nil])
([nil nil ((7133 . 7147)) nil (25248 51637 212029 152000) 0 nil])
([nil nil ((7080 . 7082) (t 25248 51637 223780 675000)) nil (25248 51673 75257 564000) 0 nil])
([nil nil ((#("{}short_response = response.body |> Jason.decode()" 0 2 (fontified t) 2 16 (fontified t face font-lock-variable-name-face) 16 36 (fontified t) 36 41 (fontified t face font-lock-type-face) 41 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t)) . 7080) (undo-tree-id200 . -2) (undo-tree-id201 . -2) (undo-tree-id202 . 50) (undo-tree-id203 . -1) (undo-tree-id204 . 49) (undo-tree-id205 . -2) (undo-tree-id206 . -50)) nil (25248 51673 75252 896000) 0 nil])
([nil nil ((#("short_response.token" 0 20 (fontified t)) . 7085) (undo-tree-id199 . -20)) nil (25248 51673 75233 729000) 0 nil])
([nil nil ((7080 . 7093) (t 25248 51673 80126 465000)) nil (25248 51813 563905 767000) 0 nil])
([nil nil ((7093 . 7096) (t 25248 51813 605335 341000)) nil (25248 52121 62603 270000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . -7095) (undo-tree-id207 . -1) 7096) nil (25248 52121 62600 244000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7110) (7110 . 7111) (#(")" 0 1 (fontified nil)) . -7110) (7110 . 7111) (7095 . 7111)) nil (25248 52121 62585 817000) 0 nil])
([nil nil ((7111 . 7113)) nil (25248 52121 62582 370000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -7120) (7120 . 7121) (#(")" 0 1 (fontified nil)) . -7120) (7120 . 7121) (7113 . 7121)) nil (25248 52121 62578 553000) 0 nil])
([nil nil ((7120 . 7121)) nil (25248 52121 62573 654000) 0 nil])
([nil nil ((7122 . 7123)) nil (25248 52121 62566 641000) 0 nil])
([nil nil ((7080 . 7089) (t 25248 52121 75379 14000)) nil (25248 52182 350539 680000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -7080) (undo-tree-id210 . -1) (#("e" 0 1 (fontified t)) . -7081) (undo-tree-id211 . -1) (#("w" 0 1 (fontified t)) . -7082) (undo-tree-id212 . -1) 7083) nil (25248 52182 350536 213000) 0 nil])
([nil nil ((7080 . 7082)) nil (25248 52182 350528 328000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t)) . -7080) (undo-tree-id208 . -1) (#("p" 0 1 (fontified t)) . -7081) (undo-tree-id209 . -1) 7082) nil (25248 52182 350525 533000) 0 nil])
([nil nil ((7080 . 7083)) nil (25248 52182 350508 391000) 0 nil])
([nil nil ((7089 . 7092)) nil (25248 52182 350506 678000) 0 nil])
([nil nil ((7134 . 7135) (#(")" 0 1 (fontified nil)) . -7134) (7134 . 7135)) nil (25248 52182 350504 383000) 0 nil])
([nil nil ((7092 . 7093)) nil (25248 52182 350501 588000) 0 nil])
([nil nil ((#("\"" 0 1 (fontified nil)) . -7138) (7138 . 7139) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -7138) (7138 . 7139) (7137 . 7139) (#("\"" 0 1 (fontified nil syntax-table (15))) . -7137) (7137 . 7138) (7136 . 7138)) nil (25248 52182 350497 39000) 0 nil])
([nil nil ((7138 . 7142)) nil (25248 52182 350491 98000) 0 nil])
([nil nil ((7142 . 7143)) nil (25248 52182 350483 614000) 0 nil])
([nil nil ((7074 . 7144) (#("    usr_token = (response.body |> Jason.decode() |> elem(1))[\"token\"] 
    
" 0 4 (fontified t) 4 7 (fontified t face font-lock-variable-name-face) 7 13 (fontified t face font-lock-variable-name-face) 13 16 (fontified t) 16 17 (fontified t) 17 25 (fontified t) 25 34 (fontified t) 34 39 (fontified t face font-lock-type-face) 39 46 (fontified t) 46 47 (fontified t) 47 56 (fontified t) 56 58 (fontified t) 58 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t syntax-table (15) face font-lock-string-face) 62 67 (fontified t face font-lock-string-face) 67 68 (fontified t syntax-table (15) face font-lock-string-face) 68 69 (fontified t) 69 70 (fontified t) 70 71 (fontified t) 71 75 (fontified t) 75 76 (fontified t)) . -7074) (undo-tree-id217 . -4) (undo-tree-id218 . -71) (undo-tree-id219 . -76) (undo-tree-id220 . -76) (undo-tree-id221 . -71) (undo-tree-id222 . -71) (undo-tree-id223 . -67) (undo-tree-id224 . -67) (6934 . 7002) (#("      url = @config[:endpoints][:base] <> @config[:endpoints][:login]
" 0 6 (fontified t) 6 9 (fontified t face font-lock-variable-name-face) 9 12 (fontified t) 12 19 (fontified t face elixir-attribute-face) 19 20 (fontified t) 20 30 (fontified t face elixir-atom-face) 30 31 (fontified t) 31 32 (fontified t) 32 37 (fontified t face elixir-atom-face) 37 42 (fontified t) 42 49 (fontified t face elixir-attribute-face) 49 50 (fontified t) 50 60 (fontified t face elixir-atom-face) 60 62 (fontified t) 62 68 (fontified t face elixir-atom-face) 68 69 (fontified t rear-nonsticky t) 69 70 (fontified t)) . -6934) (undo-tree-id225 . -70) (undo-tree-id226 . -70) (undo-tree-id227 . -70) (undo-tree-id228 . -70) (undo-tree-id229 . -70) (undo-tree-id230 . -12) (t 25248 52182 351715 762000)) nil (25248 52222 73426 812000) 0 nil])
([nil nil ((7105 . 7111) (#(" " 0 1 (fontified t)) . 7104) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (7105 . 7106)) nil (25248 52222 73408 738000) 0 nil])
([nil nil ((7111 . 7122)) nil (25248 52222 73406 473000) 0 nil])
([nil nil ((7129 . 7135) (#(" " 0 1 (fontified nil)) . 7128) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#("           " 0 11 (fontified t)) . -7111) (7140 . 7141)) nil (25248 52222 73405 241000) 0 nil])
([nil nil ((7135 . 7136)) nil (25248 52222 73393 78000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 7135)) nil (25248 52222 73391 946000) 0 nil])
([nil nil ((7145 . 7150)) nil (25248 52222 73391 225000) 0 nil])
([nil nil ((7150 . 7152)) nil (25248 52222 73390 123000) 0 nil])
([nil nil ((7152 . 7153)) nil (25248 52222 73385 875000) 0 nil])
([nil nil ((7074 . 7165) (#("    usr_token = (response.body
      |> Jason.decode()
      |> elem(1)
       )[\"token\"]
" 0 4 (fontified t) 4 13 (fontified t face font-lock-variable-name-face) 13 30 (fontified t) 30 31 (fontified t) 31 37 (fontified t) 37 40 (fontified t) 40 45 (fontified t face font-lock-type-face) 45 54 (fontified t) 54 55 (fontified t) 55 61 (fontified t) 61 71 (fontified t) 71 72 (fontified t) 72 81 (fontified t) 81 82 (fontified t syntax-table (15) face font-lock-string-face) 82 87 (fontified t face font-lock-string-face) 87 88 (fontified t syntax-table (15) face font-lock-string-face) 88 90 (fontified t)) . -7074) (undo-tree-id231 . -72) (undo-tree-id232 . -90) (undo-tree-id233 . -55) (undo-tree-id234 . -55) (undo-tree-id235 . -90) (undo-tree-id236 . -90) (undo-tree-id237 . -72) (undo-tree-id238 . -72) (undo-tree-id239 . -31) (undo-tree-id240 . -31) (undo-tree-id241 . -30) (undo-tree-id242 . -54) (undo-tree-id243 . -72) (undo-tree-id244 . -79) (undo-tree-id245 . -79) (undo-tree-id246 . -79) (undo-tree-id247 . -79) (undo-tree-id248 . -79) (t 25248 52222 71924 565000)) nil (25248 52231 219072 218000) 0 nil])
([nil nil ((7164 . 7169) (t 25248 52231 223971 695000)) nil (25248 52274 435720 68000) 0 nil])
([nil nil ((#("u" 0 1 (fontified t)) . 6586) (#("a" 0 1 (fontified t)) . 6586) (#(":" 0 1 (fontified t face elixir-atom-face)) . 6586) (#("[" 0 1 (fontified t)) . 6586) (#("]" 0 1 (fontified t)) . 6586) (#("s" 0 1 (fontified t)) . 6586) (#("r" 0 1 (fontified t)) . 6586) (#("e" 0 1 (fontified t)) . 6586) (#("d" 0 1 (fontified t)) . 6586) (#("a" 0 1 (fontified t)) . 6586) (#("e" 0 1 (fontified t)) . 6586) (#("h" 0 1 (fontified t)) . 6586) (#(":" 0 1 (fontified t face elixir-atom-face)) . 6586) (#("[" 0 1 (fontified t)) . 6586) (#("g" 0 1 (fontified t)) . 6586) (#("i" 0 1 (fontified t)) . 6586) (#("f" 0 1 (fontified t)) . 6586) (#("n" 0 1 (fontified t)) . 6586) (#("o" 0 1 (fontified t)) . 6586) (#("c" 0 1 (fontified t)) . 6586) (#("@" 0 1 (fontified t face elixir-attribute-face)) . 6586)) nil (25248 52274 435711 732000) 0 nil])
([nil nil ((#(":" 0 1 (fontified t face elixir-atom-face)) . 6586) (#("[" 0 1 (fontified t)) . 6586) (#("]" 0 1 (fontified t)) . 6586) (#("h" 0 1 (fontified t)) . 6586) (#("t" 0 1 (fontified t)) . 6586)) nil (25248 52274 435700 421000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . 6586) (#("n" 0 1 (fontified t)) . 6586) (#("e" 0 1 (fontified t)) . 6586) (#("k" 0 1 (fontified t)) . 6586) (#("o" 0 1 (fontified t)) . 6586) (#("t" 0 1 (fontified t)) . 6586)) nil (25248 52274 435695 111000) 0 nil])
([nil nil ((#(")" 0 1 (fontified nil)) . -6602) (6602 . 6603) (#(")" 0 1 (fontified nil)) . -6602) (6602 . 6603) (6586 . 6603)) nil (25248 52274 435690 91000) 0 nil])
([nil nil ((#("l" 0 1 (fontified t)) . -6590) (undo-tree-id249 . -1) (#("o" 0 1 (fontified t)) . -6591) (undo-tree-id250 . -1) (#("g" 0 1 (fontified t)) . -6592) (undo-tree-id251 . -1) (#("i" 0 1 (fontified t)) . -6593) (undo-tree-id252 . -1) (#("n" 0 1 (fontified t)) . -6594) (undo-tree-id253 . -1) 6595) nil (25248 52274 435682 146000) 0 nil])
([nil nil ((6590 . 6596)) nil (25248 52274 435654 424000) 0 nil])
([nil nil ((6762 . 6763) (t 25248 52274 448189 576000)) nil (25248 52284 390818 501000) 0 nil])
([nil nil ((#("      \"login\" ->
        ''
" 0 6 (fontified t) 6 7 (syntax-table (15) fontified t face font-lock-string-face) 7 12 (fontified t face font-lock-string-face) 12 13 (syntax-table (15) fontified t face font-lock-string-face) 13 17 (fontified t) 17 25 (fontified t) 25 26 (syntax-table (15) fontified t face font-lock-string-face) 26 27 (syntax-table (15) fontified t face font-lock-string-face) 27 28 (fontified t)) . -4276) (undo-tree-id258 . -28) (undo-tree-id259 . -28) (undo-tree-id260 . -28) (undo-tree-id261 . -28) (undo-tree-id262 . -17) (undo-tree-id263 . -17) (undo-tree-id264 . -28) (undo-tree-id265 . -28) 4304 (t 25248 52284 392238 656000)) nil (25248 52554 13167 366000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . 4276) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1)) nil (25248 52554 13145 846000) 0 nil])
nil
